<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Electron学习笔记</title>
    <url>/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Electron-简介"><a href="#Electron-简介" class="headerlink" title="Electron 简介"></a>Electron 简介</h1><p>Electron（官网：<a href="https://www.electronjs.org/zh/">https://www.electronjs.org/zh/</a>）是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源框架。</p>
<span id="more"></span>

<h1 id="官网消息2023-8"><a href="#官网消息2023-8" class="headerlink" title="官网消息2023.8"></a>官网消息2023.8</h1><h3 id="22-x-y-持续支持​"><a href="#22-x-y-持续支持​" class="headerlink" title="22.x.y 持续支持​"></a>22.x.y 持续支持<a href="https://www.electronjs.org/zh/blog/electron-25-0#22xy-%E6%8C%81%E7%BB%AD%E6%94%AF%E6%8C%81" title="链接到 22.x.y 持续支持">​</a></h3><p>正如<a href="https://www.electronjs.org/blog/windows-7-to-8-1-deprecation-notice">再见 Windows 7&#x2F;8&#x2F;8.1</a> 所述，Electron 22（Chromium 108）的计划寿命终止日期将从 2023 年 5 月 30 日延长至 2023 年 10 月 10 日。 Electron 团队将会继续向 Electron 22 提供本计划中的任何安全修复，直到 2023 年 10 月 10 日。 十月 支持日期遵循 Chromium 和 Microsoft 的延长支持日期。 10 月 11 日，Electron 团队将支持回退到最新的三个稳定主要版本，将不再支持 Windows 7&#x2F;8&#x2F;8.1。</p>
<table>
<thead>
<tr>
<th>E25（23 年 5 月）</th>
<th>E26（23 年 8月）</th>
<th>E27（23 年 10 月）</th>
</tr>
</thead>
<tbody><tr>
<td>25.x.y</td>
<td>26.x.y</td>
<td>27.x.y</td>
</tr>
<tr>
<td>24.x.y</td>
<td>25.x.y</td>
<td>26.x.y</td>
</tr>
<tr>
<td>23.x.y</td>
<td>24.x.y</td>
<td>25.x.y</td>
</tr>
<tr>
<td>22.x.y</td>
<td>22.x.y</td>
<td>–</td>
</tr>
</tbody></table>
<h2 id="时间表"><a href="#时间表" class="headerlink" title="时间表"></a>时间表</h2><table>
<thead>
<tr>
<th>Electron</th>
<th>Alpha</th>
<th>Beta</th>
<th>Stable</th>
<th>EOL</th>
<th>Chrome</th>
<th>Node</th>
<th>Supported</th>
</tr>
</thead>
<tbody><tr>
<td>26.0.0</td>
<td>2023-Jun-01</td>
<td>2023-Jun-27</td>
<td>2023-Aug-15</td>
<td>TBD</td>
<td>M116</td>
<td>TBD</td>
<td>√</td>
</tr>
<tr>
<td>25.0.0</td>
<td>2023-Apr-10</td>
<td>2023-May-02</td>
<td>2023-May-30</td>
<td>2024-Jan-02</td>
<td>M114</td>
<td>v18.15</td>
<td>√</td>
</tr>
<tr>
<td>24.0.0</td>
<td>2022-Feb-09</td>
<td>2023-Mar-07</td>
<td>2023-Apr-04</td>
<td>2023-Oct-10</td>
<td>M112</td>
<td>v18.14</td>
<td>√</td>
</tr>
</tbody></table>
<p>摘自：<a href="https://www.electronjs.org/zh/blog/electron-25-0">Electron 25.0.0</a></p>
<h1 id="Electron-特点"><a href="#Electron-特点" class="headerlink" title="Electron 特点"></a>Electron 特点</h1><p>Electron提供了易用的标记语法解析、绑定支持、灵活的布局排版、图形能力、数据处理、模板支持以及图形处理管线和插件拓展等功能。</p>
<ol>
<li><p>易用性和标记语法解析：Electron使用HTML和类似于HTML的标记语法，让你可以轻松创建用户界面。它与Web技术紧密集成，你可以使用熟悉的标记语法来构建界面和布局。</p>
</li>
<li><p>支持绑定和组件：Electron可以使用JavaScript框架（如Vue.js、React等）来实现绑定和组件化开发。你可以使用这些框架实现数据绑定和构建可复用的组件，类似于Vue或React。</p>
</li>
<li><p>布局排版和插件拓展：Electron提供了灵活的CSS布局排版，你可以使用CSS进行多种布局。此外，Electron还允许你通过插件系统来进行布局的拓展，使你能够自定义和扩展布局功能。</p>
</li>
<li><p>图形能力和后处理管线：Electron支持强大的图形能力，你可以使用Canvas API或WebGL来实现延迟渲染和后处理管线（例如使用着色器）。这使得你可以处理复杂的图形渲染和效果。</p>
</li>
<li><p>数据处理和模板：通过JavaScript框架，你可以实现数据处理、触发器和数据前后期处理。此外，你可以使用JavaScript的动态特性来实现动态模板，根据设备数据的变化选择不同的模板。</p>
</li>
<li><p>图形处理管线和图形插件：Electron允许你使用图形处理管线和图形插件来增强渲染器的图形功能。你可以使用现有的图形库或编写自定义的图形插件来满足你的需求。</p>
</li>
</ol>
<h1 id="如何学习-Electron"><a href="#如何学习-Electron" class="headerlink" title="如何学习 Electron"></a>如何学习 Electron</h1><ol>
<li><p>Electron官方网站：Electron的官方网站是一个重要的学习资源，提供了全面的文档、API参考和示例代码。你可以在官方网站上找到最新的Electron版本、教程和社区资源。访问Electron的官方网站：<a href="https://www.electronjs.org/">https://www.electronjs.org/ ↗</a></p>
</li>
<li><p>Electron文档：Electron官方提供了详细的文档，涵盖了Electron的核心概念、API参考、应用程序架构和开发流程等内容。你可以在文档中找到关于窗口管理、文件系统访问、进程间通信等方面的信息。访问Electron的文档：<a href="https://www.electronjs.org/docs">https://www.electronjs.org/docs ↗</a></p>
</li>
<li><p>Electron API演示应用程序：Electron官方提供了一个API演示应用程序，其中包含了许多示例代码，涵盖了Electron的各种功能和用法。你可以通过浏览这些示例代码来学习Electron的具体用法和最佳实践。访问API演示应用程序：<a href="https://github.com/electron/electron-api-demos">https://github.com/electron/electron-api-demos ↗</a></p>
</li>
<li><p>Electron Fiddle：Electron Fiddle是一个交互式的学习工具，它允许你在浏览器中编写和运行Electron代码片段。你可以使用Electron Fiddle来实验和学习Electron的各种功能和API。访问Electron Fiddle：<a href="https://www.electronjs.org/fiddle">https://www.electronjs.org/fiddle ↗</a></p>
</li>
<li><p>Electron社区资源：Electron拥有活跃的开发者社区，你可以通过访问Electron的论坛、GitHub存储库、Stack Overflow和其他开发者社区来获取帮助、参与讨论和分享经验。在Electron的官方网站上可以找到相关链接和资源。</p>
</li>
</ol>
<h1 id="安装-Electron-国内"><a href="#安装-Electron-国内" class="headerlink" title="安装 Electron (国内)"></a>安装 Electron (国内)</h1><h2 id="安装-Node-js："><a href="#安装-Node-js：" class="headerlink" title="安装 Node.js："></a>安装 Node.js：</h2><p>首先，确保你的电脑上已经安装了 Node.js。你可以从 Node.js 官方网站（<a href="https://nodejs.org/">https://nodejs.org ↗</a>）下载安装程序，并按照安装向导进行安装。</p>
<h2 id="查看node和npm版本"><a href="#查看node和npm版本" class="headerlink" title="查看node和npm版本"></a>查看node和npm版本</h2><p>安装完成后，你可以在命令提示符或 PowerShell 中验证 Node.js 是否安装成功，通过运行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<p>如果成功显示 Node.js 的版本号，则表示安装成功。</p>
<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/catnodeversion.png" class="" title="[验证 Node.js 是否安装成功]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\catnodeversion.png" alt="catnodeversion"></p>
<h2 id="创建Electron-项目"><a href="#创建Electron-项目" class="headerlink" title="创建Electron 项目"></a>创建Electron 项目</h2><p>在任意位置创建一个新的文件夹作为你的 Electron 项目目录。</p>
<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/createhelloworld.png" class="" title="创建一个新的文件夹]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\createhelloworld.png" alt="createhelloworld"></p>
<h2 id="进入项目目录："><a href="#进入项目目录：" class="headerlink" title="进入项目目录："></a>进入项目目录：</h2><p>在命令提示符或 PowerShell 中，使用 <code>cd</code> 命令进入你的 Electron 项目目录。<br>例如，如果你的项目目录在桌面上的一个名为 <code>HelloWorld</code> 的文件夹中，你可以运行以下命令进入该目录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:D</span><br><span class="line"><span class="built_in">cd</span> D:\electorn\HelloWorld</span><br></pre></td></tr></table></figure>


<h2 id="更换npm国内源"><a href="#更换npm国内源" class="headerlink" title="更换npm国内源"></a>更换npm国内源</h2><p>若原本的npm下载失败，尝试更换国内源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>（或）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>


<h2 id="使用-npm-进行全局安装"><a href="#使用-npm-进行全局安装" class="headerlink" title="使用 npm 进行全局安装"></a>使用 <code>npm</code> 进行全局安装</h2><p>在终端中运行以下命令来安装 Electron 作为项目的依赖项：<br>这将在项目目录中安装最新版本的 Electron。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install electron -g</span><br></pre></td></tr></table></figure>

<p>非全局安装：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install electron</span><br></pre></td></tr></table></figure>


<p>这将下载并安装 Electron 及其相关依赖项。安装完成后，你的项目目录中将出现一个名为 <code>node_modules</code> 的文件夹，其中包含了 Electron 及其依赖项的文件。</p>
<h2 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h2><p>安装好后，我们可以通过 <code>-v</code> 命令检测 <code>electron</code> 是否安装成功，命令如下所示：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">electron -v</span><br></pre></td></tr></table></figure>

<p>显示版本即为安装成功</p>
<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/electronversion.png" class="" title="[检测electron是否安装成功]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\electronversion.png" alt="electronversion"></p>
<p>其他命令：查看可提供的版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm view electron versions</span><br></pre></td></tr></table></figure>

<h2 id="初始化-npm"><a href="#初始化-npm" class="headerlink" title="初始化 npm"></a>初始化 npm</h2><p>在项目目录中运行以下命令，初始化 npm 项目，并按照提示填写项目相关信息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>这将生成一个 <code>package.json</code> 文件，其中包含了你的项目的配置信息。</p>
<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/npminitelectron.png" class="" title="[初始化 npm 项目]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\npminitelectron.png" alt="npminitelectron"></p>
<h2 id="创建入口main-js文件"><a href="#创建入口main-js文件" class="headerlink" title="创建入口main.js文件"></a>创建入口main.js文件</h2><p>在项目目录中创建一个新的 JavaScript 文件，例如 <code>main.js</code>，作为 Electron 应用程序的入口文件。<br>在 <code>main.js</code> 文件中编写你的 Electron 应用程序的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</span><br></pre></td></tr></table></figure>

<p>这段代码创建了一个 Electron 窗口，并加载了一个名为 <code>index.html</code> 的文件。</p>
<h2 id="创建html文件"><a href="#创建html文件" class="headerlink" title="创建html文件"></a>创建html文件</h2><p>在项目目录中创建一个新的 HTML 文件，例如 <code>index.html</code>。<br>打开 <code>index.html</code> 文件，并将以下代码粘贴到文件中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这是一个简单的 HTML 文件，其中包含一个标题为 “Hello World!” 的 <code>&lt;h1&gt;</code> 元素。</p>
<h2 id="运行-Electron-应用程序"><a href="#运行-Electron-应用程序" class="headerlink" title="运行 Electron 应用程序"></a>运行 Electron 应用程序</h2><p>在项目目录中执行以下命令来启动 Electron 应用程序：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx electron .</span><br></pre></td></tr></table></figure>

<p>这将在 Electron 中打开一个窗口，并加载 <code>index.html</code> 文件。你应该能够看到一个包含 “Hello World!” 的窗口。</p>
<p>恭喜！你已经成功创建并运行了一个简单的 Electron HelloWorld 程序。<br>你可以根据需要修改 <code>index.html</code> 文件来实现更复杂的界面和功能。</p>
<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/successhelloworld.png" class="" title="[简单的 Electron HelloWorld 程序]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\successhelloworld.png" alt="successhelloworld"></p>
<h2 id="“Hello-World”-文件结构"><a href="#“Hello-World”-文件结构" class="headerlink" title="“Hello World” 文件结构"></a>“Hello World” 文件结构</h2><p> “Hello World” Electron 应用程序的文件结构通常如下所示：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">my-electron-app/</span><br><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── package.json</span><br></pre></td></tr></table></figure>



<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/electronmainjs.png" class="" title="[文件结构]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\electronmainjs.png" alt="electronmainjs"></p>
<p>每个文件的作用：</p>
<ol>
<li><p><code>index.html</code>: 这是应用程序的主要 HTML 文件，用于定义应用程序的用户界面。你可以在其中添加 HTML、CSS 和 JavaScript 代码来创建你想要的界面和功能。</p>
</li>
<li><p><code>main.js</code>: 这是 Electron 应用程序的主要启动文件。它包含了创建 Electron 窗口、加载 <code>index.html</code> 文件等核心功能代码。</p>
</li>
<li><p><code>package.json</code>: 这是应用程序的配置文件，其中包含了应用程序的元数据、依赖项和脚本等信息。通过运行 <code>npm init</code> 命令可以生成这个文件，并在其中添加你的应用程序的相关信息。</p>
</li>
</ol>
<p>这是一个最简单的 Electron 应用程序的文件结构，它包含一个 HTML 文件和一个 JavaScript 文件。</p>
<p>你可以根据需要对文件结构进行扩展和修改，例如添加其他的 HTML、CSS 和 JavaScript 文件，或者将资源文件（如图像、样式表等）放在适当的位置。</p>
<h2 id="查看-Electron-版本号"><a href="#查看-Electron-版本号" class="headerlink" title="查看 Electron 版本号"></a>查看 Electron 版本号</h2><p>如果您的Electron应用程序已打包成可执行文件，则可以通过在命令行或PowerShell窗口中运行该文件，并添加–version参数来获取Electron的版本号。<br>例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">my-electron-app.exe --version</span><br></pre></td></tr></table></figure>

<p>这将输出您的Electron应用程序所使用的Electron版本号。</p>
<h1 id="升级-Electron-版本"><a href="#升级-Electron-版本" class="headerlink" title="升级 Electron 版本"></a>升级 Electron 版本</h1><p>要升级Electron的版本，请按照以下步骤操作：</p>
<ol>
<li><p>打开您的Electron应用程序的根目录并备份您的代码和配置文件。</p>
</li>
<li><p>在package.json文件中将Electron的版本号更新为您想要升级到的版本号，例如：</p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^26.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


<ol start="3">
<li>在命令行中运行以下命令，以安装新版本的Electron：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>这将会安装package.json文件中指定的所有依赖项，包括新版本的Electron。</p>
<ol start="4">
<li><p>更新您的Electron应用程序的代码和配置文件，以适应新版本的Electron。在新版本的Electron中可能会有一些API更改或功能更新，因此您可能需要相应地更改您的应用程序代码和配置文件。</p>
</li>
<li><p>测试您的应用程序，确保它在新版本的Electron中正常运行。</p>
</li>
</ol>
<p>请注意，升级Electron版本可能会导致应用程序出现不兼容或错误。因此，在升级之前，请确保备份您的代码和配置文件，并在测试之前进行更改。</p>
<h1 id="清除-npm-缓存"><a href="#清除-npm-缓存" class="headerlink" title="清除 npm 缓存"></a>清除 npm 缓存</h1><h2 id="验证代理设置"><a href="#验证代理设置" class="headerlink" title="验证代理设置"></a>验证代理设置</h2><p>如果你在代理后面，请确保代理设置正确。<br>你可以使用<code>npm config</code>命令检查和更新代理设置。在终端中运行以下命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config get proxy</span><br><span class="line">npm config get https-proxy</span><br></pre></td></tr></table></figure>

<p>如果这些命令返回一个值，表示已配置代理。<br>如果返回<code>null</code>，表示未设置代理</p>
<h2 id="删除代理缓存"><a href="#删除代理缓存" class="headerlink" title="删除代理缓存"></a>删除代理缓存</h2><p>如果代理设置不正确或者你不需要代理，可以使用以下命令删除它们：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure>

<h2 id="临时禁用代理："><a href="#临时禁用代理：" class="headerlink" title="临时禁用代理："></a>临时禁用代理：</h2><p>如果你正在使用代理，并怀疑它导致了问题，可以尝试临时禁用它，以查看npm能否正常连接注册表。</p>
<h2 id="使用不同的注册表"><a href="#使用不同的注册表" class="headerlink" title="使用不同的注册表"></a>使用不同的注册表</h2><p>默认情况下，npm使用官方注册表（registry.npmjs.org）。<br>尝试切换到其他注册表，看看是否可以解决问题。<br>运行以下命令更改注册表：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>

<p>更改注册表后，再次尝试运行npm命令。</p>
<h2 id="清除npm缓存"><a href="#清除npm缓存" class="headerlink" title="清除npm缓存"></a>清除npm缓存</h2><p>有时，npm缓存的问题可能导致连接问题。<br>你可以尝试通过运行以下命令来清除npm缓存：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure>

<p>清除缓存后，再次尝试运行npm命令。</p>
<h1 id="卸载-Electron"><a href="#卸载-Electron" class="headerlink" title="卸载 Electron"></a>卸载 Electron</h1><p>要卸载 Electron，你可以按照以下步骤进行操作：</p>
<h2 id="全局卸载"><a href="#全局卸载" class="headerlink" title="全局卸载"></a>全局卸载</h2><ol>
<li>如果你在全局范围内安装了 Electron，请使用以下命令将其卸载：</li>
</ol>
<p>使用 npm：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm uninstall -g electron</span><br></pre></td></tr></table></figure>

<p>如果你没有在全局范围内安装 Electron，则可以跳过此步骤。</p>
<h2 id="本地卸载"><a href="#本地卸载" class="headerlink" title="本地卸载"></a>本地卸载</h2><ol start="2">
<li>如果你在你的项目目录中使用了本地安装的 Electron，请在项目目录下执行以下命令卸载 Electron：</li>
</ol>
<p>使用 npm：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm uninstall electron</span><br></pre></td></tr></table></figure>

<p>这将从你的项目的 <code>node_modules</code> 目录中移除 Electron。</p>
<p>请注意，以上命令将仅移除 Electron 包本身，而不会删除你的应用程序代码和其他依赖项。</p>
<p>如果你想完全删除 Electron 相关的文件，你可以手动删除以下文件和目录：</p>
<ul>
<li><p>从全局范围内安装的情况下，删除对应的 Electron 可执行文件的路径（例如 Windows 中的 <code>C:\Users\your-username\AppData\Roaming\npm\node_modules\electron</code>）。</p>
</li>
<li><p>从项目目录中删除 <code>node_modules</code> 目录中的 Electron 相关文件。</p>
</li>
<li><p>如果你使用了其他构建工具或打包工具（如 webpack、Parcel 或 Electron Builder），请根据相应工具的文档，删除和清理相关的配置文件和构建输出目录。</p>
</li>
</ul>
<p>通过执行上述步骤，你将能够卸载 Electron。</p>
<h1 id="报错信息及解决方式"><a href="#报错信息及解决方式" class="headerlink" title="报错信息及解决方式"></a>报错信息及解决方式</h1><h2 id="【查看版本时报错】’electron’-不是内部或外部命令，也不是可运行的程序或批处理文件。"><a href="#【查看版本时报错】’electron’-不是内部或外部命令，也不是可运行的程序或批处理文件。" class="headerlink" title="【查看版本时报错】’electron’ 不是内部或外部命令，也不是可运行的程序或批处理文件。"></a>【查看版本时报错】’electron’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</h2><blockquote>
<p>‘electron’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</p>
</blockquote>
<p>使用 <code>electron -v</code> 查看版本时显示：</p>
<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/errorelectronversion.png" class="" title="[查看版本时报错]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\errorelectronversion.png" alt="errorelectronversion"></p>
<p>这个错误表明你尝试在命令行中执行 <code>electron</code> 命令时，系统无法找到 <code>electron</code> 命令。</p>
<p>这通常是由于 Electron 没有正确安装或没有在全局范围内配置导致的。</p>
<ol>
<li>安装 Electron：首先确保你已经在你的项目目录中通过 npm 或 yarn 安装了 Electron。在命令行中进入你的项目目录，并运行以下命令来安装 Electron：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install electron</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>检查全局安装：如果你希望在命令行中直接运行 <code>electron</code> 命令，你需要全局安装 Electron。使用以下命令来全局安装 Electron：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g electron</span><br></pre></td></tr></table></figure>

<p>请注意，全局安装可能需要管理员权限。</p>
<ol start="3">
<li>检查环境变量：如果你已经正确安装了 Electron，但仍然无法在命令行中执行 <code>electron</code> 命令，可能是因为系统的环境变量配置不正确。确保你的系统环境变量中包含 Electron 的可执行文件的路径。</li>
</ol>
<p>对于 Windows 用户，你可以检查以下路径是否在系统的 PATH 环境变量中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">C:\Users\your-username\AppData\Roaming\npm\node_modules\electron\dist</span><br></pre></td></tr></table></figure>

<p>如果路径不在 PATH 环境变量中，可以手动将它添加进去。</p>
<ol start="4">
<li>使用 npx 运行：如果你只是想在命令行中临时运行 Electron，而不进行全局安装，你可以使用 <code>npx</code> 命令来执行 Electron。在命令行中进入你的项目目录，并执行以下命令：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx electron</span><br></pre></td></tr></table></figure>

<p>这将临时下载并运行最新版本的 Electron。</p>
<h2 id="【安装时报错】npm-ERR-RequestError-connect-ETIMEDOUT-20-205-243-166-443"><a href="#【安装时报错】npm-ERR-RequestError-connect-ETIMEDOUT-20-205-243-166-443" class="headerlink" title="【安装时报错】npm ERR! RequestError: connect ETIMEDOUT 20.205.243.166:443"></a>【安装时报错】npm ERR! RequestError: connect ETIMEDOUT 20.205.243.166:443</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm ERR! code 1</span><br><span class="line">npm ERR! path D:\Electron\test1\node_modules\electron</span><br><span class="line">npm ERR! <span class="built_in">command</span> failed</span><br><span class="line">npm ERR! <span class="built_in">command</span> C:\WINDOWS\system32\cmd.exe /d /s /c node install.js</span><br><span class="line">npm ERR! RequestError: connect ETIMEDOUT 20.205.243.166:443</span><br></pre></td></tr></table></figure>

<p>这个错误表明在尝试安装 Electron 时，npm 遇到了连接超时的问题。</p>
<p>解决此问题的一种常见方法是切换 npm 的下载源。默认情况下，npm 使用的是官方的 npm registry，但有时该源可能遇到连接问题。</p>
<p>你可以尝试将 npm 源切换为国内的源，例如淘宝的 npm 镜像。请按照以下步骤进行操作：</p>
<ol>
<li><p>打开命令行工具，并进入到你的 Electron 项目目录下。</p>
</li>
<li><p>运行以下命令，将 npm 源切换为淘宝的 npm 镜像：</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>这将把 npm 源设置为淘宝的源。</p>
<ol start="3">
<li>然后，再次运行 <code>npm install</code> 命令来安装 Electron：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>这将使用淘宝的 npm 镜像来下载 Electron，以避免连接问题。</p>
<p>请注意，切换源可能会导致下载速度变慢，但能够解决连接超时的问题。如果仍然遇到问题，请确保你的网络连接正常，并检查防火墙或代理设置是否会阻止 npm 的网络访问。</p>
<h2 id="【安装时报错】npm-ERR-RequestError-read-ECONNRESET"><a href="#【安装时报错】npm-ERR-RequestError-read-ECONNRESET" class="headerlink" title="【安装时报错】npm ERR! RequestError: read ECONNRESET"></a>【安装时报错】npm ERR! RequestError: read ECONNRESET</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm ERR! code 1</span><br><span class="line">npm ERR! path C:\Users\15234\AppData\Roaming\npm\node_modules\electron</span><br><span class="line">npm ERR! <span class="built_in">command</span> failed</span><br><span class="line">npm ERR! <span class="built_in">command</span> C:\WINDOWS\system32\cmd.exe /d /s /c node install.js</span><br><span class="line">npm ERR! RequestError: <span class="built_in">read</span> ECONNRESET</span><br><span class="line">npm ERR!     at ClientRequest.&lt;anonymous&gt; (C:\Users\15234\AppData\Roaming\npm\node_modules\electron\node_modules\got\<span class="built_in">source</span>\request-as-event-emitter.js:178:14)</span><br><span class="line">npm ERR!     at Object.onceWrapper (node:events:628:26)</span><br><span class="line">npm ERR!     at ClientRequest.emit (node:events:525:35)</span><br><span class="line">npm ERR!     at origin.emit (C:\Users\15234\AppData\Roaming\npm\node_modules\electron\node_modules\@szmarczak\http-timer\<span class="built_in">source</span>\index.js:37:11)</span><br><span class="line">npm ERR!     at TLSSocket.socketErrorListener (node:_http_client:502:9)</span><br><span class="line">npm ERR!     at TLSSocket.emit (node:events:513:28)</span><br><span class="line">npm ERR!     at emitErrorNT (node:internal/streams/destroy:151:8)</span><br><span class="line">npm ERR!     at emitErrorCloseNT (node:internal/streams/destroy:116:3)</span><br><span class="line">npm ERR!     at process.processTicksAndRejections (node:internal/process/task_queues:82:21)</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>: C:\Users\15234\AppData\Local\npm-cache\_logs\2023-08-03T15_13_34_305Z-debug-0.log</span><br></pre></td></tr></table></figure>

<p>这个错误消息表明在尝试安装Electron时，npm遇到了连接错误。具体来说，它显示了“RequestError: read ECONNRESET”错误，这意味着npm无法从服务器读取数据。</p>
<p>以下是一些可能的解决方案：</p>
<ol>
<li><p>检查您的网络连接是否正常。尝试访问其他网站来确保您的网络连接正常。</p>
</li>
<li><p>尝试清除npm缓存，并重新运行<code>npm install</code>命令：</p>
</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>如果您使用的是代理，请确保npm已正确配置以使用代理服务器。您可以使用以下命令来设置代理：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> proxy http://proxy.company.com:8080</span><br><span class="line">npm config <span class="built_in">set</span> https-proxy http://proxy.company.com:8080</span><br></pre></td></tr></table></figure>

<p>请将“proxy.company.com”替换为您的代理服务器地址和端口号。</p>
<ol start="4">
<li>如果您使用的是较旧版本的npm，请尝试升级npm版本并重新运行<code>npm install</code>命令。您可以使用以下命令来升级npm版本：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g npm@latest</span><br></pre></td></tr></table></figure>

<p>这将会安装最新版本的npm。然后，您可以再次尝试运行<code>npm install</code>命令，查看是否已经解决了该问题。</p>
<p>请注意，如果您在尝试解决这个问题时对npm进行了更改，请注意备份您的代码和配置文件，并在测试之前仔细检查它们。</p>
<h2 id="【安装时报错】npm-ERR-path-D-electron-package-json"><a href="#【安装时报错】npm-ERR-path-D-electron-package-json" class="headerlink" title="【安装时报错】npm ERR! path D:\electron&#x2F;package.json"></a>【安装时报错】npm ERR! path D:\electron&#x2F;package.json</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">D:\electron&gt;npm install</span><br><span class="line">npm ERR! code ENOENT</span><br><span class="line">npm ERR! syscall open</span><br><span class="line">npm ERR! path D:\electron/package.json</span><br><span class="line">npm ERR! errno -4058</span><br><span class="line">npm ERR! enoent ENOENT: no such file or directory, open <span class="string">&#x27;D:\electron\package.json&#x27;</span></span><br><span class="line">npm ERR! enoent This is related to npm not being able to find a file.</span><br><span class="line">npm ERR! enoent</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>: C:\Users\15234\AppData\Local\npm-cache\_logs\2023-08-03T11_58_08_529Z-debug-0.log</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>这个错误消息表明在D:\electron目录中找不到package.json文件，因此npm无法运行<code>npm install</code>命令。</p>
<p>请确保您在D:\electron目录中已经创建了一个package.json文件，并指定了您的Electron应用程序的名称、版本、依赖项等信息。如果没有创建该文件，请使用以下命令来创建它：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p>该命令将会引导您创建一个新的package.json文件，并询问您的应用程序的名称、版本、作者、许可证等信息。完成后，您可以在D:\electron目录下找到生成的package.json文件。</p>
<p>如果您已经创建了package.json文件，请确保文件名和路径名称是正确的，并且该文件位于D:\electron目录下。如果它不在该目录中，请将其移动到该目录下。</p>
<p>如果问题仍然存在，请尝试运行以下命令来清除npm的缓存，并重新运行<code>npm install</code>命令：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure>

<p>然后再次尝试运行<code>npm install</code>命令。</p>
<p>请确保您在运行<code>npm install</code>命令之前已经在D:\electron文件夹中创建了一个package.json文件。您可以在该文件中指定您的应用程序的名称、版本、依赖项等信息。</p>
<p>如果您已经创建了package.json文件，那么可能是文件名或路径不正确。请检查文件名和路径是否正确，并确保您正在运行<code>npm install</code>命令的文件夹路径与package.json文件所在的路径相同。</p>
<p>此外，如果您使用的是较旧的npm版本，请尝试升级npm版本，并再次运行<code>npm install</code>命令。您可以使用以下命令来升级npm版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g npm@latest</span><br></pre></td></tr></table></figure>

<p>这将会安装最新版本的npm。然后，您可以再次尝试运行<code>npm install</code>命令，查看是否已经解决了该问题。</p>
<h2 id="【安装时报错】npm-WARN-cleanup-Failed-to-remove-some-directories"><a href="#【安装时报错】npm-WARN-cleanup-Failed-to-remove-some-directories" class="headerlink" title="【安装时报错】npm WARN cleanup Failed to remove some directories"></a>【安装时报错】npm WARN cleanup Failed to remove some directories</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm WARN cleanup Failed to remove some directories [</span><br><span class="line">npm WARN cleanup   [</span><br><span class="line">npm WARN cleanup     <span class="string">&#x27;D:\\Electron\\test1\\node_modules\\extract-zip&#x27;</span>,</span><br><span class="line">npm WARN cleanup     [Error: EPERM: operation not permitted, <span class="built_in">rmdir</span> <span class="string">&#x27;D:\Electron\test1\node_modules\extract-zip\node_modules&#x27;</span>] &#123;</span><br><span class="line">npm WARN cleanup       errno: -4048,</span><br><span class="line">npm WARN cleanup       code: <span class="string">&#x27;EPERM&#x27;</span>,</span><br><span class="line">npm WARN cleanup       syscall: <span class="string">&#x27;rmdir&#x27;</span>,</span><br><span class="line">npm WARN cleanup       path: <span class="string">&#x27;D:\\Electron\\test1\\node_modules\\extract-zip\\node_modules&#x27;</span></span><br><span class="line">npm WARN cleanup     &#125;</span><br><span class="line">npm WARN cleanup   ]</span><br><span class="line">npm WARN cleanup ]</span><br></pre></td></tr></table></figure>

<p>在尝试安装 Electron 时，npm 遇到了：</p>
<p><code>npm WARN cleanup</code>：在清理过程中无法删除某些目录。具体是 <code>D:\Electron\test1\node_modules\extract-zip\node_modules</code> 目录无法被删除，导致了警告。这可能是由于权限不足或其他操作系统相关的问题导致的。</p>
<ol>
<li>权限问题：确保你有足够的权限来删除目录。你可以尝试在命令行中以管理员权限运行安装命令，或者手动删除 <code>D:\Electron\test1\node_modules\extract-zip\node_modules</code> 目录。</li>
</ol>
<h2 id="【运行时报错】npm-ERR-Missing-script-“start”"><a href="#【运行时报错】npm-ERR-Missing-script-“start”" class="headerlink" title="【运行时报错】npm ERR!  Missing script: “start”"></a>【运行时报错】npm ERR!  Missing script: “start”</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm ERR! Missing script: <span class="string">&quot;start&quot;</span></span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! Did you mean one of these?</span><br><span class="line">npm ERR!     npm star <span class="comment"># Mark your favorite packages</span></span><br><span class="line">npm ERR!     npm stars <span class="comment"># View packages marked as favorites</span></span><br><span class="line">npm ERR!</span><br><span class="line">npm ERR! To see a list of scripts, run:</span><br><span class="line">npm ERR!   npm run</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     C:\Users\15234\AppData\Local\npm-cache\_logs\2023-08-03T08_07_03_419Z-debug-0.log</span><br></pre></td></tr></table></figure>

<p>缺少脚本：“start”<br>错误信息提示缺少名为 “start” 的脚本，同时给出了一些可能的替代命令。</p>
<ol>
<li><p>确认你在正确的目录中运行 npm 命令。你应该在包含 <code>package.json</code> 文件的应用程序根目录下运行 npm 命令。</p>
</li>
<li><p>检查你的 <code>package.json</code> 文件，确保其中包含了一个名为 “start” 的脚本。 <code>&quot;scripts&quot;</code> 部分应该包含 <code>&quot;start&quot;</code> 字段，并且对应的值应该是你启动应用程序的命令。</p>
</li>
</ol>
<p>示例 <code>package.json</code> 文件中的 <code>&quot;scripts&quot;</code> 部分：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果你的 <code>package.json</code> 文件中没有 “start” 脚本，你可以根据你的需求添加它。</p>
<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/electronpackagejson.png" class="" title="[错误信息]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\electronpackagejson.png" alt="electronpackagejson"></p>
<p>如图，启动应用程序的命令为：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npx electron .</span><br></pre></td></tr></table></figure>



<h2 id="【运行时报错】Unable-to-find-Electron-app-at-D-Electron"><a href="#【运行时报错】Unable-to-find-Electron-app-at-D-Electron" class="headerlink" title="【运行时报错】Unable to find Electron app at D:\Electron"></a>【运行时报错】Unable to find Electron app at D:\Electron</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Error launching app</span><br><span class="line">Unable to find Electron app at D:\Electron</span><br><span class="line">Cannot find module <span class="string">&#x27;D:\Electron&#x27;</span></span><br><span class="line">Require stack:</span><br><span class="line">C:\Users\15234VAppData\LocalNnpm-cachel_npx\1323dbbc85759269\node... main.js</span><br></pre></td></tr></table></figure>



<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/errorlauchingapp.png" class="" title="[错误信息]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\errorlauchingapp.png" alt="errorlauchingapp"></p>
<p>根据提供的错误信息，出现了一个与 Electron 应用程序启动相关的错误。错误信息显示了以下内容：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Error launching app</span><br><span class="line">Unable to find Electron app at D:\Electron</span><br><span class="line">Cannot find module <span class="string">&#x27;D:\Electron&#x27;</span></span><br><span class="line">Require stack:</span><br><span class="line">C:\Users\15234VAppData\LocalNnpm-cachel_npx\1323dbbc85759269\node... main.js</span><br></pre></td></tr></table></figure>

<p>这个错误表明 Electron 无法找到位于 <code>D:\Electron</code> 目录下的应用程序，并且在 <code>D:\Electron</code> 目录中找不到名为 <code>D:\Electron</code> 的模块。</p>
<p>请注意，根据提供的错误信息，似乎存在一个路径错误。错误信息中的路径为 <code>D:\Electron</code>，它被认为是一个模块路径，而不是一个应用程序路径。</p>
<p>请按照以下步骤检查和解决这个问题：</p>
<ol>
<li><p>检查应用程序路径：确认应用程序所在的路径是否正确。检查路径中的拼写错误、缺少斜杠等问题。</p>
</li>
<li><p>检查启动命令：确保你在启动 Electron 应用程序时使用了正确的命令。常见的启动命令是 <code>electron .</code> 或者 <code>electron main.js</code>。确保命令中的路径和文件名与你的项目结构一致。</p>
</li>
<li><p>确认应用程序目录结构：在应用程序的目录中，确保存在一个有效的 <code>package.json</code> 文件和一个入口文件（通常命名为 <code>main.js</code> 或 <code>index.js</code>）。<code>package.json</code> 文件应包含一个有效的 <code>&quot;main&quot;</code> 入口字段，指向你的应用程序的入口文件。</p>
</li>
</ol>
<h2 id="【运行时报错】Unable-to-find-Electron-app-at-D-Electron-my-electron-app"><a href="#【运行时报错】Unable-to-find-Electron-app-at-D-Electron-my-electron-app" class="headerlink" title="【运行时报错】Unable to find Electron app at D:\Electron\my-electron-app"></a>【运行时报错】Unable to find Electron app at D:\Electron\my-electron-app</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Error launching app</span><br><span class="line">Unable to find Electron app at D:\Electron\my-electron-app</span><br><span class="line">Cannot find module <span class="string">&#x27;D:\Electron\my-electron-app\index.js&#x27;</span>. Please verify that the package.json has a valid <span class="string">&quot;main&quot;</span> entry</span><br></pre></td></tr></table></figure>

<img src="/2023/08/03/Electron%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/errorlaunchingapp2.png" class="" title="[错误信息]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Electron学习笔记\errorlaunchingapp2.png" alt="errorlaunchingapp2"></p>
<p>错误启动应用程序<br>无法在 D:\electron\my-electron-app 找到 Electron 应用程序<br>无法找到模块 ‘D:\electron\my-electron-app\index.js’。请验证 package.json 文件中是否有有效的 “main” 入口</p>
<p>这个错误提示表明在指定的路径 <code>D:\Electron\my-electron-app</code> 下找不到 Electron 应用程序。同时，它还指出需要验证 <code>package.json</code> 文件中是否有有效的 <code>&quot;main&quot;</code> 入口。</p>
<p>请确保以下几点：</p>
<ol>
<li><p>检查指定的路径是否正确，确保你的 Electron 应用程序确实存在于 <code>D:\Electron\my-electron-app</code> 目录中。</p>
</li>
<li><p>验证 <code>package.json</code> 文件是否存在，并且确保其中包含了有效的 <code>&quot;main&quot;</code> 入口。<code>&quot;main&quot;</code> 入口应该指向 Electron 应用程序的主要启动文件（通常是 <code>index.js</code> 或 <code>main.js</code>）。</p>
</li>
<li><p>可能是 Electron 版本不匹配。<br>最新的 Electron 版本可能已经更新，因此旧版本的 Electron 可能无法正常工作。</p>
</li>
</ol>
<p>为了解决这个问题，你可以尝试更新 Electron 的版本，或者使用一个更稳定的版本。以下是更新 <code>package.json</code> 文件的示例，将 Electron 版本更新为最新版本：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.4.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在这个示例中，我将 Electron 版本更新为 <code>&quot;^25.4.0&quot;</code>，这是一个较新且稳定的版本。请注意，你也可以使用其他版本号，但建议使用较新的稳定版本。</p>
<p>更新 <code>package.json</code> 文件后，运行 <code>npm install</code> 命令来安装最新版本的 Electron：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>然后，尝试再次启动 Electron 应用程序：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>


<p>示例 <code>package.json</code> 文件：</p>
   <figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my-electron-app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	    <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.4.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>请确保 <code>&quot;main&quot;</code> 字段的值正确指向你的应用程序的主要启动文件。</p>
<ol start="3">
<li>确保你已经在应用程序的根目录下运行了正确的命令来启动 Electron 应用程序。通常，可以使用如下命令来启动应用程序：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">electron .</span><br></pre></td></tr></table></figure>

<p>这将在当前目录下查找 <code>package.json</code> 文件，并使用 <code>&quot;main&quot;</code> 字段指定的入口文件来启动 Electron 应用程序。</p>
<h1 id="Hello-World示例"><a href="#Hello-World示例" class="headerlink" title="Hello World示例"></a>Hello World示例</h1><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;electron&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.4.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;helloworld&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;electron .&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mor&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^25.4.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    win.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(createWindow);</span><br></pre></td></tr></table></figure>


<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p><a href="http://t.csdn.cn/WdTAY">Electron详解（一）：基本介绍</a><br><a href="http://t.csdn.cn/nBUo0">Electron详解（二）：基本使用与项目打包</a><br><a href="http://t.csdn.cn/k63l0">Electron简介、安装、实践</a><br><a href="http://t.csdn.cn/nFRiX">React使用Electron开发桌面端</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>Exercism.org-Java-Annalyn&#39;s Infiltration</title>
    <url>/2023/08/08/Exercism-org-Java-Annalyn-s-Infiltration/</url>
    <content><![CDATA[<p><a href="https://exercism.org/tracks/java/exercises/annalyns-infiltration">https://exercism.org/tracks/java/exercises/annalyns-infiltration</a></p>
<h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><p>In this exercise, you’ll be implementing the quest logic for a new RPG game a friend is developing. The game’s main character is Annalyn, a brave girl with a fierce and loyal pet dog. Unfortunately, disaster strikes, as her best friend was kidnapped while searching for berries in the forest. Annalyn will try to find and free her best friend, optionally taking her dog with her on this quest.</p>
<p>After some time spent following her best friend’s trail, she finds the camp in which her best friend is imprisoned. It turns out there are two kidnappers: a mighty knight and a cunning archer.</p>
<span id="more"></span>

<p>Having found the kidnappers, Annalyn considers which of the following actions she can engage in:</p>
<ul>
<li>Fast attack: a fast attack can be made if the knight is sleeping, as it takes time for him to get his armor on, so he will be vulnerable.</li>
<li>Spy: the group can be spied upon if at least one of them is awake. Otherwise, spying is a waste of time.</li>
<li>Signal prisoner: the prisoner can be signalled using bird sounds if the prisoner is awake and the archer is sleeping, as archers are trained in bird signaling, so they could intercept the message.</li>
<li><em>Free prisoner</em>: Annalyn can try sneaking into the camp to free the prisoner. This is a risky thing to do and can only succeed in one of two ways:<ul>
<li>If Annalyn has her pet dog with her she can rescue the prisoner if the archer is asleep. The knight is scared of the dog and the archer will not have time to get ready before Annalyn and the prisoner can escape.</li>
<li>If Annalyn does not have her dog then she and the prisoner must be very sneaky! Annalyn can free the prisoner if the prisoner is awake and the knight and archer are both sleeping, but if the prisoner is sleeping they can’t be rescued: the prisoner would be startled by Annalyn’s sudden appearance and wake up the knight and archer.</li>
</ul>
</li>
</ul>
<p>You have four tasks: to implement the logic for determining if the above actions are available based on the state of the three characters found in the forest and whether Annalyn’s pet dog is present or not.</p>
<h3 id="1-Check-if-a-fast-attack-can-be-made"><a href="#1-Check-if-a-fast-attack-can-be-made" class="headerlink" title="1. Check if a fast attack can be made"></a>1. Check if a fast attack can be made</h3><p>Implement the (<em>static</em>) <code>AnnalynsInfiltration.canFastAttack()</code> method that takes a boolean value that indicates if the knight is awake. This method returns <code>true</code> if a fast attack can be made based on the state of the knight. Otherwise, returns <code>false</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">knightIsAwake</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">AnnalynsInfiltration.canFastAttack(knightIsAwake);</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Check-if-the-group-can-be-spied-upon"><a href="#2-Check-if-the-group-can-be-spied-upon" class="headerlink" title="2. Check if the group can be spied upon"></a>2. Check if the group can be spied upon</h3><p>Implement the (<em>static</em>) <code>AnnalynsInfiltration.canSpy()</code> method that takes three boolean values, indicating if the knight, archer and the prisoner, respectively, are awake. The method returns <code>true</code> if the group can be spied upon, based on the state of the three characters. Otherwise, returns <code>false</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">knightIsAwake</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">archerIsAwake</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">prisonerIsAwake</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">AnnalynsInfiltration.canSpy(knightIsAwake, archerIsAwake, prisonerIsAwake);</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Check-if-the-prisoner-can-be-signalled"><a href="#3-Check-if-the-prisoner-can-be-signalled" class="headerlink" title="3. Check if the prisoner can be signalled"></a>3. Check if the prisoner can be signalled</h3><p>Implement the (<em>static</em>) <code>AnnalynsInfiltration.canSignalPrisoner()</code> method that takes two boolean values, indicating if the archer and the prisoner, respectively, are awake. The method returns <code>true</code> if the prisoner can be signalled, based on the state of the two characters. Otherwise, returns <code>false</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">archerIsAwake</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">prisonerIsAwake</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">AnnalynsInfiltration.canSignalPrisoner(archerIsAwake, prisonerIsAwake);</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Check-if-the-prisoner-can-be-freed"><a href="#4-Check-if-the-prisoner-can-be-freed" class="headerlink" title="4. Check if the prisoner can be freed"></a>4. Check if the prisoner can be freed</h3><p>Implement the (<em>static</em>) <code>AnnalynsInfiltration.canFreePrisoner()</code> method that takes four boolean values. The first three parameters indicate if the knight, archer and the prisoner, respectively, are awake. The last parameter indicates if Annalyn’s pet dog is present. The method returns <code>true</code> if the prisoner can be freed based on the state of the three characters and Annalyn’s pet dog presence. Otherwise, it returns <code>false</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">knightIsAwake</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">archerIsAwake</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">prisonerIsAwake</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">petDogIsPresent</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">AnnalynsInfiltration.canFreePrisoner(knightIsAwake, archerIsAwake, prisonerIsAwake, petDogIsPresent);</span><br><span class="line"><span class="comment">// =&gt; false</span></span><br></pre></td></tr></table></figure>


<h2 id="Question-Answers"><a href="#Question-Answers" class="headerlink" title="Question Answers"></a>Question Answers</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnalynsInfiltration</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canFastAttack</span><span class="params">(<span class="type">boolean</span> knightIsAwake)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !knightIsAwake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canSpy</span><span class="params">(<span class="type">boolean</span> knightIsAwake, <span class="type">boolean</span> archerIsAwake, <span class="type">boolean</span> prisonerIsAwake)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> knightIsAwake || archerIsAwake || prisonerIsAwake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canSignalPrisoner</span><span class="params">(<span class="type">boolean</span> archerIsAwake, <span class="type">boolean</span> prisonerIsAwake)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prisonerIsAwake &amp;&amp; !archerIsAwake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canFreePrisoner</span><span class="params">(<span class="type">boolean</span> knightIsAwake, <span class="type">boolean</span> archerIsAwake, <span class="type">boolean</span> prisonerIsAwake, <span class="type">boolean</span> petDogIsPresent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (prisonerIsAwake &amp;&amp; !archerIsAwake &amp;&amp; !knightIsAwake) || (!archerIsAwake &amp;&amp; petDogIsPresent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h2><blockquote>
<p>represented<br>v.<br>代表，表示;（在竞赛或体育赛事中）代表（国家或地区）;（标志或符号）意味着，代表着，标志着;描绘，（形象地）表现，描写;代理（个人或团体）;代表（个人或团体）出席;使有代表性，使有代表作;使呈现;陈述，诉说;象征;展示;相当于，相等于;作为……的代表（代言人）;表述;想象，设想;演出，扮演;提出异议，提出抗议;维护……的利益;回想;再提出;作为……的象征;典型地反映;成为……实例，成为典型;再呈现;抗议说;再递交;再上演，再演出;集中地体现;再赠送</p>
</blockquote>
<blockquote>
<p>implement<br>vt.<br>实施;执行;贯彻;使生效<br>n.<br>工具;器具;(常指)简单的户外用具</p>
</blockquote>
<blockquote>
<p>implementing<br>v.<br>实施;执行;贯彻;使生效<br>implement的现在分词</p>
</blockquote>
<blockquote>
<p>quest<br>n.<br>追求(幸福等);探索;寻找<br>vi.<br>探索;探求</p>
</blockquote>
<blockquote>
<p>logic<br>n.<br>逻辑;逻辑学;(做某事的)道理，合乎情理的原因;逻辑系统;思维方式;解释方法</p>
</blockquote>
<blockquote>
<p>develop<br>v.<br>发展;发展，变化;开发;加强;研制;出现(问题);使（胶卷）显影;(使)成长;壮大; 患(病);修建;详尽阐述;(问题)开始影响;(疾病)开始侵袭</p>
</blockquote>
<blockquote>
<p>developing<br>adj.<br>发展中的<br>v.<br>(使)成长，发展，壮大;开发;研制;出现(问题); 患(病);(问题)开始影响;(疾病)开始侵袭<br>develop的现在分词</p>
</blockquote>
<blockquote>
<p>Unfortunately<br>adv.<br>不幸地;遗憾地;可惜地;可悲地</p>
</blockquote>
<blockquote>
<p>disaster<br>n.<br>灾害;灾难;灾祸;不幸;祸患;彻底失败的人(或事)</p>
</blockquote>
<blockquote>
<p>strike<br>n.<br>罢工;（有损声誉的）不利因素，打击;袭击;(尤指)空袭;打;击;罢课;踢;罢市;全中;军事进攻;（珍贵东西的）意外发现;击球未中<br>v.<br>罢工;撞击;打;击打，踢(球等);击;碰撞;撞;敲;给（某人以…）印象;突击;擦，划（火柴）;行进;侵袭;碰;弹奏;突然想到;照在…上;开采出;顿时使处于某状态</p>
</blockquote>
<blockquote>
<p>kidnap<br>vt.<br>绑架;劫持;诱拐（小孩等），拐骗<br>n.<br>诱拐;绑架罪</p>
</blockquote>
<blockquote>
<p>kidnappers<br>n.<br>绑架者；绑匪；拐骗犯<br>kidnapper的复数</p>
</blockquote>
<blockquote>
<p>berry<br>n.<br>浆果;莓</p>
</blockquote>
<blockquote>
<p>free<br>adj.<br>自由的;免费的;空闲的;(货物等) 免税的;自然的, 不拘束的;自愿的, 主动的;未固定的，松开的;不受阻碍的;丰盛的;直爽的, 坦率的;受准许的, 可允许的;(用钱) 大手大脚的<br>adv.<br>自由地;免费地;帆脚索被松开地<br>v.<br>释放;使免于;使可用于;使解脱出来;使能腾出时间</p>
</blockquote>
<blockquote>
<p>optionally<br>adv.<br>可选地;随意地</p>
</blockquote>
<blockquote>
<p>trail<br>v.<br>跟踪;(在比赛或其他竞赛中)落后，失利，失败;追踪;(被)拖，拉;蔓生;(尤指跟在他人后面)疲惫地走，没精打采地慢走，磨蹭<br>n.<br>(乡间的)小路，小径;（特定）路线，路径;(尤指打猎时跟踪的)踪迹，臭迹;(长串的)痕迹，踪迹，足迹</p>
</blockquote>
<blockquote>
<p>camp<br>n.<br>营地;阵营;(尤指政府让人长时间住宿的)营房，营帐;兵营;度假营<br>vi.<br>露营;(尤指在假日)野营;宿营;暂住;借住;借宿<br>adj.<br>夸张的，滑稽可笑的(尤指故意逗笑);做作的;故意带女子气的，女性化的(被某些人认为是典型同性恋的特征)</p>
</blockquote>
<blockquote>
<p>imprison<br>vt.<br>监禁;关押</p>
</blockquote>
<blockquote>
<p>mighty<br>adj.<br>强大的;巨大的;非凡的;强而有力的<br>adv.<br>非常;极其;很</p>
</blockquote>
<blockquote>
<p>cunning<br>adj.<br>狡猾的;巧妙的;奸诈的;诡诈的;灵巧的;精巧的<br>n.<br>狡猾;狡黠;诡诈</p>
</blockquote>
<blockquote>
<p>archer<br>n.<br>弓箭手;射箭运动员</p>
</blockquote>
<blockquote>
<p>consider<br>v.<br>考虑;认为;觉得;顾及;(尤指为作出决定而)仔细考虑;以为;细想;体谅;端详</p>
</blockquote>
<blockquote>
<p>action<br>n.<br>行动;（身体部位的）动作，功能;作用;行为;诉讼;起诉;战斗;情节;机械装置，活动部件;所做之事;激动人心的事<br>vt.<br>务必做，确保处理(某事)</p>
</blockquote>
<blockquote>
<p>engage<br>v.<br>从事;（使）衔接，啮合;聘用;雇用;与（某人）交战;吸引住(注意力、兴趣);与…建立密切关系;尽力理解</p>
</blockquote>
<blockquote>
<p>vulnerable<br>adj.<br>脆弱的;(身体上或感情上)易受…伤害的</p>
</blockquote>
<blockquote>
<p>attack<br>n.<br>攻击;袭击;(在战争中使用武器的)进攻;（队员等的）进攻;发作，侵袭;（病、虫等的）损害，伤害;(口头和书面的)抨击，非难;抑制;进攻队员;（情感的）一阵突发<br>v.<br>攻击;袭击;(在战争等中使用武器)进攻;抨击;侵袭;非难;奋力处理</p>
</blockquote>
<blockquote>
<p>armor<br>n.<br>装甲；盔甲<br>v.<br>为…装甲</p>
</blockquote>
<blockquote>
<p>spy<br>n.<br>间谍;密探;暗中监视<br>v.<br>当间谍;发现，注意到;察看，探查;突然看见，突然发现;仔细观察<br>adj.<br>间谍的，间谍活动的</p>
</blockquote>
<blockquote>
<p>upon<br>prep.<br>在……上;在上面;刚一……就;即将发生;用在一些动词后，与on 同义;（用于两个相同的名词之间，强调数量之多）（一个）接（一个），……又……<br>adv.<br>在上面，在物体上;从此，因此</p>
</blockquote>
<blockquote>
<p>signal<br>n.<br>信号;(尤指铁路和公路上的)指示灯，信号灯，红绿灯;标志;预示;暗号<br>v.<br>显示;表示;表明;标志;表达;发信号;示意;预示;发暗号<br>adj.<br>重大的;显要的</p>
</blockquote>
<blockquote>
<p>prisoner<br>n.<br>囚犯;犯人;战俘;俘虏;被(敌人等)关起来的人;羁押候审者</p>
</blockquote>
<blockquote>
<p>intercept<br>vt.<br>拦截;截住;拦阻<br>n.<br>拦截;（数学）截距;截击;截听;拦截者</p>
</blockquote>
<blockquote>
<p>train<br>n.<br>列车;火车;行列;队列;拖裾，裙裾;一系列相关的事情(或行动);列队行进的人(或动物)<br>v.<br>培训;训练(人或动物);教育;进行…训练;接受训练;培养…的能力(或素质);(尤指)进行体育锻炼;使（植物）朝某方向生长</p>
</blockquote>
<blockquote>
<p>trained<br>v.<br>培训;训练(人或动物);教育;进行…训练;接受训练;培养…的能力(或素质);(尤指)进行体育锻炼<br>adj.<br>培训；训练过的，受过培训的<br>train的过去分词和过去式</p>
</blockquote>
<blockquote>
<p>signaling<br>n.<br>打信号，发信号</p>
</blockquote>
<blockquote>
<p>sneak<br>v.<br>溜;偷走(不重要的或小的东西);偷拿;偷偷地走;偷带;（儿童向成人）打小报告，告状;偷偷地做<br>n.<br>打小报告的人，告状者(尤指儿童)<br>adj.<br>突然的;出其不意的</p>
</blockquote>
<blockquote>
<p>risky<br>adj.<br>有风险的;有危险(或风险)的</p>
</blockquote>
<blockquote>
<p>rescue<br>vt.<br>抢救;营救;援救<br>n.<br>救援;抢救;营救;获救;营救行动</p>
</blockquote>
<blockquote>
<p>escape<br>v.<br>逃脱，幸免于难;(从不愉快或危险处境中)逃脱;逃避;逃跑;摆脱;(从监禁或管制中)逃走;逃出;避免(不愉快或危险的事物);漏出;被忘掉;（不自觉地）由…发出<br>n.<br>逃脱;逃避;漏出;逃避现实;解脱;Esc键;消遣;渗出(量)</p>
</blockquote>
<blockquote>
<p>sneaky<br>adj.<br>偷偷摸摸的;鬼鬼祟祟的;悄悄的</p>
</blockquote>
<blockquote>
<p>rescued<br>v.<br>抢救;营救;援救<br>rescue的过去分词和过去式</p>
</blockquote>
<blockquote>
<p>sudden<br>adj.<br>突然的，忽然的;意外的，突然发生的;迅速的，快的;&lt;古&gt;未经事先考虑的，鲁莽的，急速作成的，草率从事的<br>adv.<br>&lt;口&gt;突然地，出乎意料地<br>n.<br>突然发生的事（或情况）</p>
</blockquote>
<blockquote>
<p>appearance<br>n.<br>出现;外观;外表;外貌;出版;公开露面;(尤指突然的)抵达，到来;起源;首次使用</p>
</blockquote>
<blockquote>
<p>implement<br>vt.<br>实施;执行;贯彻;使生效<br>n.<br>工具;器具;(常指)简单的户外用具</p>
</blockquote>
<blockquote>
<p>determining<br>v.<br>确定;测定;决定;影响;形成;安排;裁决;查明;支配;准确算出<br>adj.<br>决定性的<br>determine的现在分词</p>
</blockquote>
<blockquote>
<p>determine<br>v.<br>确定;测定;决定;决定，决心（做某事）;影响;形成;安排;裁决;查明;支配;准确算出</p>
</blockquote>
<blockquote>
<p>available<br>adj.<br>可获得的;有空的;可购得的;可找到的</p>
</blockquote>
<blockquote>
<p>present<br>n.<br>目前;现在;礼物;礼品<br>adj.<br>存在;当前的;出现;出席;在场;现存的<br>vt.<br>提出;(以某种方式)展现，显示，表现;表达，表示;提交;使发生;颁发;交付;授予;把…交给;上演;正式介绍;突然出现;主持播放;正式出席</p>
</blockquote>
]]></content>
      <categories>
        <category>Exercises</category>
      </categories>
      <tags>
        <tag>exercism.org</tag>
      </tags>
  </entry>
  <entry>
    <title>Exercism.org-Java-Log Levels</title>
    <url>/2023/08/10/Exercism-org-Java-Log-Levels/</url>
    <content><![CDATA[<h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><p>In this exercise you’ll be processing log-lines.</p>
<p>Each log line is a string formatted as follows: <code>&quot;[&lt;LEVEL&gt;]: &lt;MESSAGE&gt;&quot;</code>.</p>
<span id="more"></span>

<p>There are three different log levels:</p>
<ul>
<li><code>INFO</code></li>
<li><code>WARNING</code></li>
<li><code>ERROR</code></li>
</ul>
<p>You have three tasks, each of which will take a log line and ask you to do something with it.</p>
<h3 id="1-Get-message-from-a-log-line"><a href="#1-Get-message-from-a-log-line" class="headerlink" title="1. Get message from a log line"></a>1. Get message from a log line</h3><p>Implement the (<em>static</em>) <code>LogLevels.message()</code> method to return a log line’s message:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LogLevels.message(<span class="string">&quot;[ERROR]: Invalid operation&quot;</span>)</span><br><span class="line"><span class="comment">// =&gt; &quot;Invalid operation&quot;</span></span><br></pre></td></tr></table></figure>

<p>Any leading or trailing white space should be removed:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LogLevels.message(<span class="string">&quot;[WARNING]:  Disk almost full\r\n&quot;</span>)</span><br><span class="line"><span class="comment">// =&gt; &quot;Disk almost full&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Get-log-level-from-a-log-line"><a href="#2-Get-log-level-from-a-log-line" class="headerlink" title="2. Get log level from a log line"></a>2. Get log level from a log line</h3><p>Implement the (<em>static</em>) <code>LogLevels.logLevel()</code> method to return a log line’s log level, which should be returned in lowercase:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LogLevels.logLevel(<span class="string">&quot;[ERROR]: Invalid operation&quot;</span>)</span><br><span class="line"><span class="comment">// =&gt; &quot;error&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Reformat-a-log-line"><a href="#3-Reformat-a-log-line" class="headerlink" title="3. Reformat a log line"></a>3. Reformat a log line</h3><p>Implement the (<em>static</em>) <code>LogLevels.reformat()</code> method that reformats the log line, putting the message first and the log level after it in parentheses:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LogLevels.reformat(<span class="string">&quot;[INFO]: Operation completed&quot;</span>)</span><br><span class="line"><span class="comment">// =&gt; &quot;Operation completed (info)&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><table>
<thead>
<tr>
<th>Modifier and Type</th>
<th>Method and Description</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>indexOf(int ch)</code><br>Returns the index within this string of the first occurrence of the specified character.</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>indexOf(int ch, int fromIndex)</code><br>Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.<br></td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>indexOf(String str)</code><br>Returns the index within this string of the first occurrence of the specified substring.</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>indexOf(String str, int fromIndex)</code><br>Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.<br></td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>substring(int beginIndex)</code><br>Returns a new string that a substring of this string.<br></td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>substring(int beginIndex,int endIndex)</code><br>Returns a new string that a substring of this string.<br></td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>trim()</code><br>Returns a copy of the string, with leading and trailing whitespace omitted.<br></td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>toLowerCase()</code><br>Converts all of the characters in this String to lower case using the rules of the default locale.<br></td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>toLowerCase()</code><br>Converts all of the characters in this String to lower case using the rules of the given Locale.<br></td>
</tr>
</tbody></table>
<h2 id="Question-Answers"><a href="#Question-Answers" class="headerlink" title="Question Answers"></a>Question Answers</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogLevels</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Method for task 1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">message</span><span class="params">(String logLine)</span> &#123;</span><br><span class="line">        <span class="comment">// Extract message part by using substring method</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> logLine.substring(logLine.indexOf(<span class="string">&#x27;:&#x27;</span>) + <span class="number">1</span>).trim();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Method for task 2</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">logLevel</span><span class="params">(String logLine)</span> &#123;</span><br><span class="line">        <span class="comment">// Extract level part by using substring method, then convert it to lowercase</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">level</span> <span class="operator">=</span> logLine.substring(logLine.indexOf(<span class="string">&#x27;[&#x27;</span>) + <span class="number">1</span>, logLine.indexOf(<span class="string">&#x27;]&#x27;</span>)).toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Method for task 3</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reformat</span><span class="params">(String logLine)</span> &#123;</span><br><span class="line">        <span class="comment">// Use above two methods to extract message and level, then reformat the log line</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> message(logLine);</span><br><span class="line">        <span class="type">String</span> <span class="variable">level</span> <span class="operator">=</span> logLevel(logLine);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> message + <span class="string">&quot; (&quot;</span> + level + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h2><blockquote>
<p>process<br>n.<br>(为达到某一目标的)过程;进程;流程;工序;工艺流程;(事物发展，尤指自然变化的)步骤;做事方法<br>v.<br>处理(文件、请求等);加工;数据处理;审核;审阅<br>v.<br>列队行进;缓缓前进<br>adj.<br>(用化学方法等)处理过的;照相制版的;经过特殊加工的;三色版的</p>
</blockquote>
<blockquote>
<p>processing<br>v.<br>处理;审阅，审核，处理(文件、请求等);加工;数据处理<br>v.<br>列队行进;缓缓前进<br>n.<br>加工；处理；运算<br>process的现在分词</p>
</blockquote>
<blockquote>
<p>formatted<br>v.<br>格式化;安排…的版式<br>adj.<br>格式化（的）；格式化了的；有格式的<br>format的过去分词和过去式</p>
</blockquote>
<blockquote>
<p>Implement<br>vt.<br>实施;执行;贯彻;使生效<br>n.<br>工具;器具;(常指)简单的户外用具</p>
</blockquote>
<blockquote>
<p>lowercase<br>n.<br>小写字母;小写字体</p>
</blockquote>
<blockquote>
<p>occurrence<br>n.<br>发生;出现;存在;发生的事情;存在的事物</p>
</blockquote>
]]></content>
      <categories>
        <category>Exercises</category>
      </categories>
      <tags>
        <tag>exercism.org</tag>
      </tags>
  </entry>
  <entry>
    <title>Exercism.org-Java-Cook your lasagna</title>
    <url>/2023/08/09/Exercism-org-Java-Cook-your-lasagna/</url>
    <content><![CDATA[<p><a href="https://exercism.org/tracks/java/exercises/lasagna">https://exercism.org/tracks/java/exercises/lasagna</a></p>
<h2 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h2><p>In this exercise you’re going to write some code to help you cook a brilliant lasagna from your favorite cooking book.</p>
<p>You have four tasks, all related to the time spent cooking the lasagna.</p>
<span id="more"></span>

<h3 id="1-Define-the-expected-oven-time-in-minutes"><a href="#1-Define-the-expected-oven-time-in-minutes" class="headerlink" title="1. Define the expected oven time in minutes"></a>1. Define the expected oven time in minutes</h3><p>Define the <code>expectedMinutesInOven()</code> method that does not take any parameters and returns how many minutes the lasagna should be in the oven. According to the cooking book, the expected oven time in minutes is 40:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lasagna</span> <span class="variable">lasagna</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lasagna</span>();</span><br><span class="line"><span class="comment">//Create a Lasagna object using the new keyword</span></span><br><span class="line">lasagna.expectedMinutesInOven();</span><br><span class="line"><span class="comment">//Invoking the expectedMinutesInOven() method in the Lasagna</span></span><br><span class="line"><span class="comment">// =&gt; 40</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Calculate-the-remaining-oven-time-in-minutes"><a href="#2-Calculate-the-remaining-oven-time-in-minutes" class="headerlink" title="2. Calculate the remaining oven time in minutes"></a>2. Calculate the remaining oven time in minutes</h3><p>Define the <code>remainingMinutesInOven()</code> method that takes the actual minutes the lasagna has been in the oven as a parameter and returns how many minutes the lasagna still has to remain in the oven, based on the expected oven time in minutes from the previous task.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lasagna</span> <span class="variable">lasagna</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lasagna</span>();</span><br><span class="line">lasagna.remainingMinutesInOven(<span class="number">30</span>);</span><br><span class="line"><span class="comment">//Invoking the remainingMinutesInOven() method in the Lasagna</span></span><br><span class="line"><span class="comment">// =&gt; 10</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Calculate-the-preparation-time-in-minutes"><a href="#3-Calculate-the-preparation-time-in-minutes" class="headerlink" title="3. Calculate the preparation time in minutes"></a>3. Calculate the preparation time in minutes</h3><p>Define the <code>preparationTimeInMinutes()</code> method that takes the number of layers you added to the lasagna as a parameter and returns how many minutes you spent preparing the lasagna, assuming each layer takes you 2 minutes to prepare.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lasagna</span> <span class="variable">lasagna</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lasagna</span>();</span><br><span class="line">lasagna.preparationTimeInMinutes(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Calculate-the-total-working-time-in-minutes"><a href="#4-Calculate-the-total-working-time-in-minutes" class="headerlink" title="4. Calculate the total working time in minutes"></a>4. Calculate the total working time in minutes</h3><p>Define the <code>totalTimeInMinutes()</code> method that takes two parameters: the first parameter is the number of layers you added to the lasagna, and the second parameter is the number of minutes the lasagna has been in the oven. The function should return how many minutes in total you’ve worked on cooking the lasagna, which is the sum of the preparation time in minutes, and the time in minutes the lasagna has spent in the oven at the moment.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lasagna</span> <span class="variable">lasagna</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lasagna</span>();</span><br><span class="line">lasagna.totalTimeInMinutes(<span class="number">3</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// =&gt; 26</span></span><br></pre></td></tr></table></figure>

<h2 id="Question-Answers"><a href="#Question-Answers" class="headerlink" title="Question Answers"></a>Question Answers</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lasagna</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> define the &#x27;expectedMinutesInOven()&#x27; method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">expectedMinutesInOven</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">40</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> define the &#x27;remainingMinutesInOven()&#x27; method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">remainingMinutesInOven</span><span class="params">(<span class="type">int</span> time)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expectedMinutesInOven() - time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> define the &#x27;preparationTimeInMinutes()&#x27; method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">preparationTimeInMinutes</span><span class="params">(<span class="type">int</span> layers)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> layers*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> define the &#x27;totalTimeInMinutes()&#x27; method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">totalTimeInMinutes</span><span class="params">(<span class="type">int</span> layers,<span class="type">int</span> time)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> preparationTimeInMinutes(layers)+remainingMinutesInOven(time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="Word"><a href="#Word" class="headerlink" title="Word"></a>Word</h2><blockquote>
<p>Instructions<br>n.<br>(计算机的)指令;指示;说明书;命令;操作指南;吩咐;用法说明<br>instruction的复数</p>
</blockquote>
<blockquote>
<p>brilliant<br>adj.<br>明亮的;很成功的;很好的;巧妙的;聪颖的;技艺高的;使人印象深的<br>n.<br>宝石;钻石</p>
</blockquote>
<blockquote>
<p>lasagna<br>n.<br>(意大利)千层面</p>
</blockquote>
<blockquote>
<p>task<br>n.<br>任务;(尤指艰巨或令人厌烦的)工作;(尤指语言教学中旨在帮助达到某一学习目的的)活动<br>vt.<br>交给某人(任务);派给某人(工作)</p>
</blockquote>
<blockquote>
<p>relate<br>vt.<br>联系;讲(故事);把…联系起来;叙述;使有联系;讲述</p>
</blockquote>
<blockquote>
<p>expect<br>v.<br>预期;预计;期待;要求;指望;预料;等待;盼望;猜想</p>
</blockquote>
<blockquote>
<p>expected<br>adj.<br>预期的;预料的<br>v.<br>预期;预计;期待;要求;指望;预料;等待;盼望<br>expect的过去分词和过去式</p>
</blockquote>
<blockquote>
<p>oven<br>n.<br>烤箱;烤炉</p>
</blockquote>
<blockquote>
<p>remaining<br>adj.<br>剩下的;仍需做的;还需处理的<br>v.<br>仍然是;剩余;保持不变;遗留;继续存在;仍需去做(或说、处理)<br>remain的现在分词</p>
</blockquote>
<blockquote>
<p>actual<br>adj.<br>实际的;(强调事情最重要的部分)真正的，…本身;真实的</p>
</blockquote>
<blockquote>
<p>remain<br>v.<br>（事实、问题等）仍然是（表示强调）;剩余，余留;保留，坚持（观点、态度或信念）;保持不变;仍然存在，继续存在;留下，逗留，停留;（最后）属于;（最后）取决于;尚待，留待;仍需去做（或说、处理）<br>n.<br>剩余物，残余（物）;遗体，残骸;（历史）遗迹，残迹</p>
</blockquote>
<blockquote>
<p>previous<br>adj.<br>以前的, 先前的, 以往的;上一次的, 上一个的;&lt;口&gt;过早的, 过急的;(时间上)稍前的</p>
</blockquote>
<blockquote>
<p>preparation<br>n.<br>准备;(医药、化妆品等)配制品，制剂;准备工作;预备</p>
</blockquote>
<blockquote>
<p>layers<br>n.<br>层;表层;层次;阶层<br>v.<br>把…分层堆放<br>layer的第三人称单数和复数</p>
</blockquote>
<blockquote>
<p>assuming<br>conj.<br>假如;假设…为真<br>v.<br>假设;假定;承担(责任);认为;呈现(外观、样子);取得(权力);显露(特征);就(职)<br>adj.<br>傲慢的<br>assume的现在分词</p>
</blockquote>
]]></content>
      <categories>
        <category>Exercises</category>
      </categories>
      <tags>
        <tag>exercism.org</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Page博客搭建</title>
    <url>/2050/01/01/Github-Page%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="前提介绍"><a href="#前提介绍" class="headerlink" title="前提介绍"></a>前提介绍</h1><p>写了比较详细的Github Page博客搭建相关过程！为方便查阅，特地把本篇内容放在博客置顶。</p>
<p>本篇前半部分写于2021年，后半部分写于2023年，截至2025年本搭建过程仍可全流程速通。</p>
<p>已经非常了解Git与Github可直接跳转到：【电脑本地安装：Node.js】或【电脑本地安装：Hexo】目录观看。</p>
<span id="more"></span>

<hr>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>Git是一个分布式版本控制系统，用来跟踪文件和项目的变化，可以记录文件的修改历史，使多个开发者能够协同工作并管理代码的版本，常用于个人或多人软件开发。就像游戏存档？</p>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>GitHub是一个基于 Git 的代码托管平台，提供了集中式的远程代码仓库托管服务。开发者可以将他们的代码存储在 GitHub 上，并与其他开发者协作、分享代码以及管理项目。</p>
<h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h3><p>GitHub Pages是 GitHub 提供的静态网页托管服务，允许用户创建和托管静态网站。用户可以通过 GitHub Pages 将自己的代码仓库中的静态文件自动部署为可访问的网站。</p>
<p><a href="https://pages.github.com/">Github Page的官方介绍页</a></p>
<h3 id="Markdown和md文件"><a href="#Markdown和md文件" class="headerlink" title="Markdown和md文件"></a>Markdown和md文件</h3><p>MD文件是一种使用纯文本格式编写的标记语言文件，扩展名为<code>.md</code>。MD是Markdown的缩写，Markdown是一种轻量级的标记语言，用于以易读易写的方式编写文档。</p>
<p>可以使用任何文本编辑器，例如记事本、Sublime Text、Visual Studio Code等。只需使用纯文本编写，然后使用Markdown语法来标记文本的格式。一些常用的将MD文件转换为HTML的工具包括Markdown编辑器（例如Typora、Dillinger、StackEdit、Obsidian等）和命令行工具（例如pandoc）。</p>
<p>参考：</p>
<p>Markdown语法说明（中文版）：<a href="https://markdown-zh.readthedocs.io/en/latest/">https://markdown-zh.readthedocs.io/en/latest/</a></p>
<p>Markdown Guide：<a href="https://www.markdownguide.org/">https://www.markdownguide.org/</a></p>
<h3 id="YAML配置文件"><a href="#YAML配置文件" class="headerlink" title="YAML配置文件"></a>YAML配置文件</h3><p>YAML是一种人性化的数据序列化语言，适用于所有编程语言，专门为常见用例而创建的，例如：配置文件、日志文件、进程间消息传递、跨语言数据共享、对象持久化和调试复杂数据结构。</p>
<p>YAML 文件使用 .yml 或 .yaml 扩展名，并遵循特定的语法规则。</p>
<p>YAML是一种简单、表达力强的、以数据为导向的语言，它不是一种标记语言 (YAML)，作为配置格式时非常易读。它具有直观的可视化结构，并且其逻辑非常简单：缩进的项目继承父项目的属性。</p>
<p>YAML使用缩进来确定结构并表示嵌套。为了保持跨系统的可移植性，设计时不允许使用制表符，因此改用空格（字面意义的空格字符）</p>
<p>在<code>_config.yml</code>配置文件中：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:KiraraKira/Kirara.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>相当于：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy.type</span>: <span class="string">git</span></span><br><span class="line"><span class="attr">deploy.repo</span>: <span class="string">git@github.com:KiraraKira/Kirara.github.io.git</span></span><br><span class="line"><span class="attr">deploy.branch</span>: <span class="string">main</span></span><br></pre></td></tr></table></figure>



<p>有关YXML的教程可以参考：</p>
<blockquote>
<ul>
<li><a href="http://morlvoid.pro/2023/08/02/yaml-%e6%95%99%e7%a8%8b/">YAML教程</a></li>
<li><a href="https://yaml.org/spec/1.2.2/#chapter-1-introduction-to-yaml">YAML Ain’t Markup Language (YAML™) version 1.2</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a></li>
<li><a href="https://www.redhat.com/sysadmin/yaml-beginners">YAML for beginners</a></li>
<li><a href="https://www.redhat.com/en/topics/automation/what-is-yaml">What is YAML?</a></li>
<li><a href="https://yaml.com/doc/glossary/">YAML Glossary</a></li>
<li><a href="http://c.biancheng.net/spring_boot/yaml.html"># YAML教程（快速入门版）</a></li>
<li><a href="https://www.runoob.com/w3cnote/yaml-intro.html">## YAML 入门教程</a></li>
</ul>
</blockquote>
<h1 id="注册-GitHub-账号"><a href="#注册-GitHub-账号" class="headerlink" title="注册 GitHub 账号"></a>注册 GitHub 账号</h1><p>在游览器打开 GitHub 的官方网站。网址：<br><a href="https://github.com/">https://github.com</a></p>
<p>点击右上角 “Sign up”（注册）按钮，进入注册页面。</p>
<img src="singupgithub.png" alt="注册Github账号">

<p>下图就是注册页面了。</p>
<p>在注册页面，填写用户名（Username）、电子邮件地址（Email address）和密码（Password）</p>
<img src="githubenteremail.png" alt="使用邮箱注册">

<p>全部填写完毕后，点击 “Create account”（创建账号）按钮。</p>
<img src="github7.png" alt="注册github">

<p>根据提示完成其他必要的信息，例如选择计划（免费或付费）、是否开启学生优惠和接受相关条款等等，根据自己的需要选择。</p>
<p>完成注册后，会在邮箱内收到一封确认电子邮件，邮箱内有验证码。</p>
<p>点击邮件中的确认链接和相应验证码，激活GitHub 账号。</p>
<h1 id="电脑本地安装：Git"><a href="#电脑本地安装：Git" class="headerlink" title="电脑本地安装：Git"></a>电脑本地安装：Git</h1><h2 id="下载Git"><a href="#下载Git" class="headerlink" title="下载Git"></a>下载Git</h2><p>这里是Windows系统下载git的方式。</p>
<p>打开 Git 的官方网站：<br><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
<p>点击左侧的 ”Downloads“（下载）。</p>
<p>根据电脑的系统选择下载32位和64位。</p>
<img src="downloadgit.png" alt="下载git">





<h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>双击下载的安装程序文件（通常是一个 .exe 文件），启动 Git 的安装向导。</p>
<p><strong>Git-2.41.0.3-64-bit.exe</strong> </p>
<p>根据提示开始下载，通常情况下选择默认即可</p>
<p>但是需要注意的是，有两个务必选择的选项：</p>
<ul>
<li><p>“Use Git from the Windows Command Prompt”（在 Windows 命令提示符中使用 Git）</p>
</li>
<li><p>“Checkout Windows-style, commit Unix-style line endings”（检出 Windows 风格，提交 Unix 风格的行尾）</p>
</li>
</ul>
<img src="git.png" alt="安装git1">

<img src="git2.png" alt="安装git2">



<p>后面的内如果没有特别要改的需求，可以全部按照默认格式  </p>
<p>Tips：关于安装的更多详情可参考：  <a href="http://t.csdn.cn/Wm8bN">超详细之Git 2.41.0版本安装教程</a></p>
<h2 id="配置Git环境"><a href="#配置Git环境" class="headerlink" title="配置Git环境"></a>配置Git环境</h2><p>在之前的git安装中，会默认配置电脑环境变量，如果没有默认配置的话，按照下面的步骤手动配置环境变量：右键点击打开 “<strong>此电脑</strong>” 或 “<strong>我的电脑</strong>” ，点击 “<strong>属性</strong>”  </p>
<img src="catR.png" alt="查找属性">



<p>点击右侧的 “<strong>高级系统设置</strong>”</p>
<img src="huanjing1.png" alt="高级系统设置">



<p>点击 “环境变量”</p>
<img src="huanjingbianliang.png" alt="image20230817111502124">





<p>找到 “<strong>系统变量</strong>” 中的 “<strong>Path</strong>”，双击打开</p>
<img src="huanjing2.png" alt="系统环境变量">



<p>查看系统环境变量中是否有git安装地址 。如果没有，手动点击右侧的“新建”添加 。</p>
<p>添加成功后，原路返回的顺序依次点击 “<strong>确定</strong>”。</p>
<img src="huanjing4.png" alt="环境变量">



<p>确认git安装无误后，来看看git能不能正常使用吧！  </p>
<p>打开<strong>cmd窗口</strong>或桌面上的<strong>git图标</strong>：</p>
<img src="zhuomiangiticon.png" alt="打开git桌面图标">





<p>输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">where</span> git </span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>



<p>可以查看git安装地址和git版本。</p>
<p>显示了git的版本表示git已经成功安装。</p>
<img src="xitong1.png" alt="查看git版本">





<h2 id="配置用户信息"><a href="#配置用户信息" class="headerlink" title="配置用户信息"></a>配置用户信息</h2><p>已经安装好Git后，寻找一个没什么重要文件的文件夹，鼠标右键点击空白处，点击<code>Open Git Bash here</code>，打开<code>git bash</code>。</p>
<img src="opengitbash.png" alt="打开gitbash">



<p>在命令行中输入以下命令，设置全局的用户名和电子邮件地址。</p>
<p>引号内的内容记得替换为Github账号中实际的用户名和电子邮件地址。</p>
<p>实际的用户名是在注册的时候使用的Username。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>



<p>例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Kirara&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;kirara@Rhodes.com&quot;</span></span><br></pre></td></tr></table></figure>



<h2 id="验证Git-配置"><a href="#验证Git-配置" class="headerlink" title="验证Git 配置"></a>验证Git 配置</h2><p>使用下面的命令查看自己有没有配置成功名字和邮箱：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>



<p>第一个命令 <code>git config user.name</code> 用于检索配置的用户名，第二个命令 <code>git config user.email</code> 用于检索配置的邮箱地址。</p>
<p>在命令行或终端中执行这两个命令时，将输出您当前本地 Git 配置中设置的用户名和邮箱地址。</p>
<p>如果输出了之前配置的内容，表示配置成功。</p>
<p>还可以使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --list</span><br></pre></td></tr></table></figure>

<p>来查看git的全局配置</p>
<img src="gitconfiglist.png" alt="查看git配置">



<h2 id="配置SSH协议"><a href="#配置SSH协议" class="headerlink" title="配置SSH协议"></a>配置SSH协议</h2><p>Github向仓库推送代码时，可以使用 SSH 协议进行推送。</p>
<p>SSH（Secure Shell）是一种网络协议，用于在不安全的网络中安全地进行远程登录和数据传输。它通过对网络连接进行加密和身份验证来保护通信的安全性。</p>
<p>SSH 私钥（Private Key）是一种加密密钥，用于身份验证和加密数据。私钥通常存储在本地计算机上，并且必须保持私密和安全。每个用户都会有自己的私钥。</p>
<p>SSH 公钥（Public Key）是与私钥相关联的公共密钥。它可以安全地与他人共享，而不会泄露私钥的内容。公钥可以用于验证与其对应的私钥，从而实现安全的身份认证和加密通信。</p>
<p>配置SSH协议需要配置相关的私钥和公钥。</p>
<img src="catssh.png" alt="配置私钥和公钥">





<h2 id="生成SSH私钥"><a href="#生成SSH私钥" class="headerlink" title="生成SSH私钥"></a>生成SSH私钥</h2><p>生成SSH私钥有很多种方法</p>
<p>例如：在git bash窗口中输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure>

<p>或者打开cmd窗口，输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure>

<p>上面两条命令生成密钥的命令是RSA（Rivest-Shamir-Adleman）加密算法，默认使用较短的 2048 位。</p>
<p>生成密钥可以任意选择自己想用加密方式，例如，下面的密钥也是使用了算法，但使用<code>-b 4096</code> 参数指定了生成的 RSA 密钥的长度为 4096 位：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure>



<p>除了RSA加密算法以外，还有DSA（Digital Signature Algorithm）等等许多种都可以使用，相关具体的使用方法可以自己在网上查找。</p>
<p>例如：下图中使用的是Ed25519 算法。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;邮件地址&quot;</span></span><br></pre></td></tr></table></figure>

<p>下图显示密钥已经生成完毕了。</p>
<img src="ed25519sshkey.png" alt="生成密钥">





<h2 id="获取-SSH-公钥"><a href="#获取-SSH-公钥" class="headerlink" title="获取 SSH 公钥"></a>获取 SSH 公钥</h2><p>在生成 SSH 密钥对后，需要获取公钥的内容。</p>
<p>找到公钥文件生成的位置，打开公钥文件（通常文件默认在 <code>~/.ssh/id_rsa.pub</code>），使用记事本打开，复制全部内容。</p>
<img src="openintext.png" alt="20230814195210">





<h2 id="添加-SSH-密钥"><a href="#添加-SSH-密钥" class="headerlink" title="添加 SSH 密钥"></a>添加 SSH 密钥</h2><p>登录到你的 GitHub 帐户，点击右上角的头像，点击Settings，也就是设置</p>
<img src="githubkirara.png" alt="打开github设置">



<p>在左侧的菜单中，选择选择 “SSH and GPG keys”（SSH 和 GPG 密钥）</p>
<img src="githubsshandgpgkeys.png" alt="找到SSH密钥">



<p>点击 “New SSH key”（新建 SSH 密钥）。</p>
<img src="githubkirara2.png" alt="新建SSH公钥">



<p>添加密钥信息：在 “Title”（标题）字段中，为该 SSH 密钥提供一个描述性的名称，可随意填写。</p>
<p>然后，在 “Key”（密钥）字段中，粘贴之前复制的 SSH 公钥内容。</p>
<img src="githubkirara3.png" alt="填写ssh密钥">



<p>保存 SSH 密钥：点击 “Add SSH key”（添加 SSH 密钥）按钮，将 SSH 密钥保存到 GitHub 账号中</p>
<img src="addnewsshkey.png" alt="新建SSH密钥">






<h2 id="测试SSH配置"><a href="#测试SSH配置" class="headerlink" title="测试SSH配置"></a>测试SSH配置</h2><p>为了确保 SSH 密钥正确配置，确保电脑可以与 GitHub 进行连接，使用下面的命令来验证SSH是否配置成功：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>



<p>如果一切设置正确，会收到一条像下面这样的欢迎消息：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Hi KiraraKira! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>



<img src="sshTkirara.png" alt="验证SSH">





<h1 id="电脑本地安装：Node-js"><a href="#电脑本地安装：Node-js" class="headerlink" title="电脑本地安装：Node.js"></a>电脑本地安装：Node.js</h1><p>因为Hexo 是一个基于 Node.js 的静态网站生成器，所以需要安装Node.js。</p>
<p>而Node.js 是一个运行时环境，让 JavaScript 可以在服务器端运行。</p>
<p>需要用到Hexo，在安装Hexo之前，还需要先下载安装Node.js。</p>
<h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>访问 Node.js 官方网站：在您的浏览器中打开：(<a href="https://nodejs.org/en">https://nodejs.org/en</a>)</p>
<p>在node.js官网下载安装，和Git一样，基本按照默认配置安装就可以了。</p>
<img src="downloadnodejs.png" alt="下载nodejs">



<h2 id="查看npm版本"><a href="#查看npm版本" class="headerlink" title="查看npm版本"></a>查看npm版本</h2><p>npm（Node Package Manager）是一个由 Node.js 的包管理器，与 Node.js 一起安装提供。主要功能是允许开发者在 Node.js 环境中查找、安装、更新和管理 JavaScript 包（也称为模块）。</p>
<p>也就是说，安装好Node.js后，理论上会自动安装好npm。</p>
<p>使用下列命令查看 npm 和 Node.js 的安装版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm -v</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure>



<img src="catnpmvesion.png" alt="查看npm版本">



<p>可查看版本即为npm安装成功。</p>
<p>如果不显示版本，参考之前的《配置Git环境》：右键点击”此电脑“，点击”属性“，点击”高级系统设置“，点击”环境变量“，在”系统变量“中找到 ”Path“，查看环境变量中是否有 node.js，如果没有，手动找到 node.js 的安装路径，手动将路径添加进Path，并按原路径确认。</p>
<h1 id="电脑本地安装：Hexo"><a href="#电脑本地安装：Hexo" class="headerlink" title="电脑本地安装：Hexo"></a>电脑本地安装：Hexo</h1><p>Hexo 是一个基于 Node.js 的静态博客框架，它使用 Markdown 文件来创建和管理内容，并生成静态网页供发布，Hexo 需要依赖 npm 安装。</p>
<p>Hexo 官方文档：<a href="https://hexo.io/zh-cn/docs/commands">https://hexo.io/zh-cn/docs/commands</a></p>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>在当前项目目录下安装 Hexo 及其相关依赖项：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo</span><br></pre></td></tr></table></figure>



<h3 id="全局安装-Hexo-的命令行工具（CLI）"><a href="#全局安装-Hexo-的命令行工具（CLI）" class="headerlink" title="全局安装 Hexo 的命令行工具（CLI）"></a>全局安装 Hexo 的命令行工具（CLI）</h3><p>使用 npm 在全局范围安装 Hexo 的命令行工具（Hexo CLI），安装好后可以在任何目录下通过命令行使用 Hexo 相关命令，不仅限于特定的项目目录。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>



<h3 id="在全局范围内强制重新安装-Hexo-CLI"><a href="#在全局范围内强制重新安装-Hexo-CLI" class="headerlink" title="在全局范围内强制重新安装 Hexo CLI"></a>在全局范围内强制重新安装 Hexo CLI</h3><p>如果之前下载过Hexo，电脑中已经存在旧版本的 Hexo CLI，默认情况下，为了防止意外覆盖或破坏现有的配置或数据， npm 会而是保留原来的旧版本，不会安装。</p>
<p>但是如果想要强制安装新版本的Hexo，或单纯想要重新安装，可使用 <code>--force</code> 标志，强制 npm 忽略现有的 Hexo ，开始安装全新的Hexo。</p>
<p>这个命令会删除旧版本的 Hexo CLI，并用最新版本进行替换。强制重新安装可以确保Hexo CLI 是最新版。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli --force</span><br></pre></td></tr></table></figure>



<img src="installhexo.png" alt="installhexo">





<h2 id="查看Hexo版本"><a href="#查看Hexo版本" class="headerlink" title="查看Hexo版本"></a>查看Hexo版本</h2><p>下面两个命令都可以显示 Hexo 的版本信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br><span class="line"></span><br><span class="line">hexo -version</span><br></pre></td></tr></table></figure>

<p>如果查看版本时只显示“hexo-cli: 4.3.1”，是正常情况，是因为hexo没有初始化，之后使用 <code>hexo init 文件夹名</code> 初始化后就可以看到 hexo 的版本。</p>
<img src="hexoversion.png" alt="installhexo">



<h1 id="正式创建Github-Page"><a href="#正式创建Github-Page" class="headerlink" title="正式创建Github Page"></a>正式创建Github Page</h1><p>现在，准备好了Github账号，配置好了Git，安装好了Node.js环境和Hexo，可以正式创建Github Page了！</p>
<h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><p>点击右上角的加号，选择<code>“New repository”</code>。</p>
<p>Repository（仓库）是用于存储和管理代码项目的地方。</p>
<p>一个 Repository 可以包含项目的所有文件、文件夹、版本历史记录、分支、标签以及与项目相关的其他资源。</p>
<img src="github1.png" alt="installhexo">



<p>在<code>Create a new repository</code>页面，找到：<code>Repository name *</code>。这里的星号表示必填项。</p>
<p>填入新建的仓库名字。</p>
<p>注意：仓库的名字一定要填：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">博客名字.github.io</span><br></pre></td></tr></table></figure>

<p>不可以省略后面的 <code>github.io</code> ，否则无法建立正确的Github Page。</p>
<img src="repositoryname.png" alt="installhexo">



<p>创建好后，修改一下仓库的配置。</p>
<p>点击 <code>Seetings</code> （设置），进入仓库的设置页。</p>
<p><code>&quot;Pages&quot;</code>（页面）选项提供了配置和管理项目的静态网页的功能，</p>
<img src="openseetings.png" alt="installhexo">





<p>如下图所示：默认的分支为：<code>main</code>。</p>
<p>分支名需要记住，后面的网站配置中需要使用。</p>
<img src="defaultbranch.png" alt="installhexo">



<p>点击左侧的<code>Pages</code>。</p>
<img src="opengithubpages.png" alt="installhexo">



<p>找到：Buile and deployment（构建和部署）</p>
<p>Source（源）：</p>
<ul>
<li><p>Github Actions（Github操作）最适合使用框架和自定义构建过程</p>
<p>适合需要灵活性和自定义性的项目，可以根据特定的框架、工具和构建流程来执行自动化任务。</p>
</li>
<li><p>Deploy from a brance（从分支部署）经典页面体验</p>
<p>只有经过验证的代码被部署到生产环境，提供稳定和可靠的页面体验。</p>
</li>
</ul>
<p>两种构建和部署方法都可以支持使用Hexo ，但Hexo 更适合使用 Deploy from a branch 。</p>
<p>例如，可以将 Hexo 生成的静态网页文件所在的分支（通常是 <code>gh-pages</code> 分支，在下图中我使用了默认的的 main 分支）作为部署源。</p>
<p>启用 Deploy from a branch 并选择该分支后，每次推送代码到该分支时，GitHub Pages 会自动构建并部署分支上的静态网页。</p>
<img src="buildanddeployment.png" alt="installhexo">





<img src="deployfromabranch.png" alt="installhexo">





<h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>在电脑容易找到的位置新建一个文件夹，尽量与自己的Github 仓库同名，例如：D:\Kirara\Kirara.github.io</p>
<p>这个文件夹就作为存放代码的地方。</p>
<p>进入文件夹：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 文件夹名</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Kirara.github.io</span><br></pre></td></tr></table></figure>



<p>初始化一个新的 Hexo 网站：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>Hexo 将创建一个新的文件夹，其中包含用于构建和管理网站的基本文件和目录结构。</p>
<img src="hexoinit.png" alt="installhexo">



<img src="allfile.png" alt="installhexo">



<p><code>_config.yml</code>：Hexo 网站的主要配置文件，包含网站的各种设置选项，如标题、URL、主题等，可以在这个文件中进行自定义配置。</p>
<p><code>package.json</code>：Node.js 的包管理文件，用于管理 Hexo 网站所需的依赖包和插件，可以使用 npm 或 yarn 命令来安装、更新和管理依赖项。</p>
<p><code>scaffolds</code> 目录：包含用于生成新文章、页面和草稿的模板文件，在命令行中使用 Hexo 提供的相应命令，可以使用这些模板快速创建新的内容。</p>
<p><code>source</code> 目录：用于存储 Hexo 网站的源文件，包括 Markdown 格式的文章和页面。您可以在这里编写和管理网站的内容。</p>
<p><code>themes</code> 目录：用于存放主题文件的目录。Hexo 支持使用不同的主题来定制网站的外观和样式。在此目录中，您可以将下载或自定义的主题放置在相应的子目录中。</p>
<h2 id="安装Hexo的依赖包"><a href="#安装Hexo的依赖包" class="headerlink" title="安装Hexo的依赖包"></a>安装Hexo的依赖包</h2><p>运行 <code>npm install</code> 命令，会根据项目中的 <code>package.json</code> 文件中的依赖项列表，将所有所需的软件包和模块下载并安装到当前项目的 <code>node_modules</code> 文件夹中。<br>这些依赖包通常是项目所需的第三方库、框架、工具或插件。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>



<p>运行<code>npm install</code>命令后，会自动下载一些依赖文件到Kirara这个目录，下载到<code>node_modules</code>中。</p>
<p><code>node_modules</code>文件夹内的依赖文件不要轻易删除</p>
<img src="allfile.png" alt="installhexo">



<h2 id="安装Hexo需要的插件"><a href="#安装Hexo需要的插件" class="headerlink" title="安装Hexo需要的插件"></a>安装Hexo需要的插件</h2><p>Hexo 默认已经包含了下列的渲染引擎插件，大多数情况下不需要手动安装。</p>
<p>但如果在使用 Hexo 过程中遇到了相关的渲染问题或错误，可以尝试使用下面的安装插件命令重新安装。</p>
<p>在本地文件夹中打开<code>git bush</code>，输入命令即可安装插件：</p>
<h3 id="EJS-渲染引擎插件"><a href="#EJS-渲染引擎插件" class="headerlink" title="EJS 渲染引擎插件"></a>EJS 渲染引擎插件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-ejs --save</span><br></pre></td></tr></table></figure>

<p>安装 Hexo 博客框架中的 EJS 渲染引擎插件，并将其作为项目的依赖保存。<br><code>hexo-renderer-ejs</code> 是 Hexo 的一个渲染引擎插件，它用于将 EJS（Embedded JavaScript）模板语言转换为 HTML 页面。EJS 允许在 HTML 页面中嵌入 JavaScript 代码，以实现动态内容的渲染和生成。</p>
<h3 id="Stylus-渲染引擎插件"><a href="#Stylus-渲染引擎插件" class="headerlink" title="Stylus 渲染引擎插件"></a>Stylus 渲染引擎插件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>

<p>命令的作用是安装 Hexo 博客框架中的 Stylus 渲染引擎插件，并将其作为项目的依赖保存。<code>hexo-renderer-stylus</code> 是 Hexo 的一个渲染引擎插件，用于处理 Stylus 样式表语言。</p>
<p>Tips：Stylus 是一种基于缩进的样式表语言，类似于 Sass 和 Less，它提供了更简洁灵活的语法来编写 CSS。</p>
<p>如果希望在 Hexo 项目中使用其他的样式预处理器（如 Sass 或 Less），可以安装对应的渲染引擎插件，并相应地修改 Hexo 配置文件中的样式相关配置。</p>
<h3 id="Marked-渲染引擎插件"><a href="#Marked-渲染引擎插件" class="headerlink" title="Marked 渲染引擎插件"></a>Marked 渲染引擎插件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>

<p>安装 Hexo 博客框架中的 Marked 渲染引擎插件，并将其作为项目的依赖保存。<code>hexo-renderer-marked</code> 是 Hexo 的一个渲染引擎插件，用于将 Markdown 文档转换为 HTML 页面。</p>
<h3 id="三个插件同时安装："><a href="#三个插件同时安装：" class="headerlink" title="三个插件同时安装："></a>三个插件同时安装：</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-server hexo-browsersync hexo-renderer-pug --save</span><br></pre></td></tr></table></figure>



<h2 id="安装服务器、浏览器同步和-Pug-渲染引擎插件"><a href="#安装服务器、浏览器同步和-Pug-渲染引擎插件" class="headerlink" title="安装服务器、浏览器同步和 Pug 渲染引擎插件"></a>安装服务器、浏览器同步和 Pug 渲染引擎插件</h2><h3 id="插件解释"><a href="#插件解释" class="headerlink" title="插件解释"></a>插件解释</h3><h4 id="服务器插件"><a href="#服务器插件" class="headerlink" title="服务器插件"></a>服务器插件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure>

<p>提供了一个本地服务器，可以在开发环境中预览和调试生成的静态页面。安装 <code>hexo-server</code> 插件后，可以使用 <code>hexo server</code> 命令来启动本地服务器，并通过浏览器访问 Hexo 博客的预览页面。</p>
<h4 id="浏览器同步插件"><a href="#浏览器同步插件" class="headerlink" title="浏览器同步插件"></a>浏览器同步插件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-browsersync --save</span><br></pre></td></tr></table></figure>

<p>浏览器同步插件，它基于 BrowserSync 技术，可以在多个浏览器和设备上同步刷新页面。安装 <code>hexo-browsersync</code> 插件后，可以在使用 <code>hexo server</code> 启动的本地服务器上实现浏览器同步，从而在实时编辑博客内容时，各个浏览器会自动更新并显示最新的页面。</p>
<h4 id="渲染引擎插件"><a href="#渲染引擎插件" class="headerlink" title="渲染引擎插件"></a>渲染引擎插件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug --save</span><br></pre></td></tr></table></figure>

<p>渲染引擎插件，用于处理 Pug（以前称为 Jade）模板语言。Pug 是一种简洁而强大的模板语言，它提供了更简洁的语法来编写 HTML 页面。</p>
<p>安装 <code>hexo-renderer-pug</code> 插件后，Hexo 将使用 Pug 渲染引擎来处理包含 Pug 语法的模板文件，并将其转换为最终的 HTML 页面。</p>
<h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><p><code>hexo g</code> 和 <code>hexo generate</code> 用于生成静态页面的命令，完全等价的，可以互换使用。<br>运行 <code>hexo g</code> 或 <code>hexo generate</code> 命令时，Hexo 会根据博客内容和配置，将 Markdown 文件转换为 HTML 页面，并生成相应的静态页面，将页面生成在public文件夹下。</p>
<img src="publicallfiles.png" alt="installhexo">



<p>这些静态页面可以用于发布到服务器或托管平台上，以供访问和阅读。<br>这两个命令的作用相同，只是 <code>hexo g</code> 是 <code>hexo generate</code> 的简写形式，方便用户记忆和使用。<br>可以根据个人喜好选择使用哪个命令来生成静态页面，效果是一样的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo generate</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<img src="hexog1.png" alt="installhexo">





<h2 id="本地运行预览效果"><a href="#本地运行预览效果" class="headerlink" title="本地运行预览效果"></a>本地运行预览效果</h2><p><code>hexo s</code> 和 <code>hexo server</code> 是 Hexo 博客框架中用于启动本地服务器的命令，同样完全等价的，可以互换使用，没有区别。</p>
<p>运行 <code>hexo s</code> 或 <code>hexo server</code> 命令时，Hexo 会启动一个本地服务器，用于在您的计算机上预览和测试生成的静态页面。您可以通过访问指定的本地地址（默认为 <a href="http://localhost:4000）来查看您的博客。">http://localhost:4000）来查看您的博客。</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>



<img src="hexos.png" alt="installhexo">



<img src="hexonothemes.png" alt="installhexo">



<p>看到这样的默认页面就代表本地配置成功。</p>
<h2 id="关闭本地运行"><a href="#关闭本地运行" class="headerlink" title="关闭本地运行"></a>关闭本地运行</h2><p>键盘同时按下：Ctrl 和C</p>
<h1 id="通过Git部署配置"><a href="#通过Git部署配置" class="headerlink" title="通过Git部署配置"></a>通过Git部署配置</h1><h2 id="安装Git部署插件"><a href="#安装Git部署插件" class="headerlink" title="安装Git部署插件"></a>安装Git部署插件</h2><p>安装 Hexo 博客框架中的 Git 部署插件，并将其作为项目的依赖保存。<br><code>hexo-deployer-git</code> 是 Hexo 的一个部署插件，它通过 Git 版本控制系统来将生成的静态页面部署到远程服务器或托管平台上。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>



<p>通过执行命令后，安装插件到 Hexo 项目中，并添加到项目的 <code>package.json</code> 文件中的依赖列表中。</p>
<p>在执行 <code>hexo deploy</code> 或 <code>hexo d</code> 命令时，Hexo 将使用 Git 部署插件来将生成的页面提交到预先配置的远程 Git 仓库。</p>
<p>需要注意的是：在安装 <code>hexo-deployer-git</code> 插件之前，需要先在 Hexo 配置文件中进行相应的配置，包括指定部署的 Git 仓库地址、分支信息、用户名密码等。</p>
<p>也就是说，在安装 <code>hexo-deployer-git</code> 插件之前，提前在<code>_config.yml</code>文件中的<code>deploy :type:</code>中 填入<code>git</code>：</p>
<img src="deploytypegit.png" alt="installhexo">







<h2 id="指定部署方式和相关配置"><a href="#指定部署方式和相关配置" class="headerlink" title="指定部署方式和相关配置"></a>指定部署方式和相关配置</h2><p>打开目录下的<code>_config.yml</code>文件。</p>
<p>可以使用VS Code打开，或者记事本、Notepad++都可以。</p>
<img src="ioconfigymlfile.png" alt="installhexo">





<p>找到文件最下方的 deploy，添加下列内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">部署类型</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:Github账号用户名/仓库名.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">分支名</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>type: 部署类型</code>：指定部署的类型为 Git，表示使用 Git 作为部署的方式。</li>
<li><code>repo: git@github.com:Github账号用户名/仓库名.git</code>：指定要部署到的仓库的 Git URL。</li>
<li><code>branch: 分支名</code>：指定要将静态网页部署到的 Git 分支。在这个例子中，静态网页将被部署到名为 “main” 的分支。</li>
</ul>
<p>例如：</p>
<img src="ioconfigyml.png" alt="installhexo">

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:KiraraKira/Kirara.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>仓库所在的 GitHub 用户是 “KiraraKira”，部署目标是名为 “Kirara.github.io” 的仓库。通过配置，GitHub Pages 会将生成的静态网页部署到仓库中。</p>
<h1 id="远程部署Github-Page"><a href="#远程部署Github-Page" class="headerlink" title="远程部署Github Page"></a>远程部署Github Page</h1><p><code>hexo deploy</code> 和 <code>hexo d</code> 命令是 Hexo 博客框架中用于部署生成的静态页面的命令，它们是完全等价的，可以互换使用，没有区别。</p>
<p>运行 <code>hexo deploy</code> 或 <code>hexo d</code> 命令时，Hexo 会根据您在配置文件中设置的部署信息，将生成的静态页面部署到相应的远程服务器或平台上，以便将博客内容发布到互联网上。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>



<img src="hexod.png" alt="installhexo">






<h2 id="查看远程部署效果"><a href="#查看远程部署效果" class="headerlink" title="查看远程部署效果"></a>查看远程部署效果</h2><p>在Github Pages页面找到 <code>Visit site</code>，点击就可以查看部署到远程的网页</p>
<img src="visitsitegithubpage.png" alt="installhexo">





<p>如果远程的链接也能正常打开，就代表配置成功。</p>
<img src="hexonothemes.png" alt="installhexo">









<h1 id="修改主题（以Arknights主题为例）"><a href="#修改主题（以Arknights主题为例）" class="headerlink" title="修改主题（以Arknights主题为例）"></a>修改主题（以Arknights主题为例）</h1><p>Kiraraの游戏城使用了Arknights主题。具体配置请看github原作者的教程：<br><a href="https://github.com/Yue-plus/hexo-theme-arknights">https://github.com/Yue-plus/hexo-theme-arknights</a></p>
<h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>在项目文件夹下打开git bash，输入：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git cloen 想要的主题链接</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Yue-plus/hexo-theme-arknights.git themes/arknights</span><br></pre></td></tr></table></figure>



<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>以下引用自Arknight原作者的教程：</p>
<hr>
<ul>
<li><p>1.参照 <a href="https://hexo.io/zh-cn/docs/configuration">Hexo 官网</a> 修改 <code>Hexo/</code> 目录下的 <code>_config.yml</code>。</p>
</li>
<li><p>2.把 <code>theme:</code> 的值改为 <code>arknights</code></p>
</li>
<li><p>3.开启代码高亮：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>4.<strong>剪切</strong> <a href="https://github.com/Yue-plus/hexo-theme-arknights/blob/main/_config.yml"><code>Hexo/themes/arknights/_config.yml</code></a> 到 Hexo 目录下，并重命名为 <code>_config.arknights.yml</code>。</p>
<blockquote>
<p>建议参考：</p>
<ul>
<li><a href="https://hexo.io/zh-cn/docs/configuration#%E4%BD%BF%E7%94%A8%E4%BB%A3%E6%9B%BF%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">使用代替主题配置文件</a></li>
</ul>
</blockquote>
<p>主题的配置文件可参照中文注释修改。</p>
</li>
</ul>
<hr>
<p>教程解释：第一步和第二步</p>
<p>下载好主题文件后，打开根目录，找到<code>_config.yml</code></p>
<p>修改<code>_config.yml</code>中的<code>theme: landscape</code>改为<code>theme: arknights</code></p>
<img src="themesarknights.png" alt="installhexo">





<p>教程解释：第四步</p>
<p>如下图，剪切主题文件夹中的<code>_config.yml</code>，重命名为：<code>_config.arknights.yml</code>，并粘贴至根目录文件夹下</p>
<img src="copyarknightsconfig.png" alt="installhexo">





<p>然后重新执行<code>hexo g</code>来重新渲染静态页面：</p>
<img src="hexog.png" alt="installhexo">









<h2 id="修改网站介绍"><a href="#修改网站介绍" class="headerlink" title="修改网站介绍"></a>修改网站介绍</h2><p>使用文本编辑器打开 Hexo 项目目录中的 <code>_config.yml</code> 文件，修改站点配置、主题配置、部署配置等</p>
<h3 id="网站介绍相关配置解释"><a href="#网站介绍相关配置解释" class="headerlink" title="网站介绍相关配置解释"></a>网站介绍相关配置解释</h3><ul>
<li><p><code>title</code>：设置博客的标题。如：Kiraraの游戏城</p>
</li>
<li><p><code>subtitle</code>：设置博客的副标题。例如：Kirara</p>
</li>
<li><p><code>description</code>：设置博客的描述。例如：Kirara的个人主页</p>
</li>
<li><p><code>author</code>：设置博客的作者。例如：Kirara</p>
</li>
<li><p><code>language</code>：设置博客的语言。英文为en，中文为zh-CN，需要查看相应的主题使用。</p>
</li>
<li><p><code>timezone</code>：设置博客的时区。</p>
</li>
<li><p><code>url</code>：设置博客的 URL 地址。这里的博客URL地址为Github Page页面显示的地址</p>
<img src="yoursiteisliveat.png" alt="installhexo">


</li>
<li><p><code>root</code>：设置博客的根目录。</p>
</li>
<li><p><code>permalink</code>：设置博客文章的永久链接格式。</p>
</li>
<li><p><code>date_format</code>：设置博客文章日期的格式。</p>
</li>
</ul>
<img src="configyml.png" alt="installhexo">





<p>其他配置都可以自定义，可以按照需要自由修改</p>
<h2 id="本地预览主题"><a href="#本地预览主题" class="headerlink" title="本地预览主题"></a>本地预览主题</h2><p>依次执行下面的命令，可以启动本地服务器预览：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除public文件夹下的所有文件</span></span><br><span class="line">hexo g <span class="comment"># 将网页生成在public文件夹下</span></span><br><span class="line">hexo s <span class="comment"># 启动本地服务器预览</span></span><br></pre></td></tr></table></figure>



<p><code>hexo clean</code>的命令是：清除public文件夹下的所有文件。</p>
<ol>
<li><p>清除生成的静态页面：Hexo 在生成静态页面时会将生成的 HTML、CSS、JavaScript 等文件保存在指定的目录中，以便部署到服务器或托管平台上。<code>hexo clean</code> 命令会清除之前生成的静态页面，以便在下一次执行 <code>hexo generate</code> 命令时重新生成新的页面。</p>
</li>
<li><p>清除缓存文件：Hexo 在生成页面时会使用一些缓存文件来提高生成速度和效率。这些缓存文件存储在 <code>.hexo</code> 或 <code>.cache</code> 目录中。执行 <code>hexo clean</code> 命令会清除这些缓存文件，以便下次生成时重新计算和生成缓存。</p>
</li>
</ol>
<p>执行 <code>hexo clean</code> 命令可以清理旧的生成文件和缓存，确保下一次生成的静态页面和缓存文件是基于最新的内容和配置。</p>
<p>在更新博客内容或更改 Hexo 配置时特别有用。</p>
<p>需要注意的是，执行 <code>hexo clean</code> 命令会删除之前生成的静态页面和缓存文件，因此请确保在执行该命令之前备份重要的数据</p>
<img src="arknightsthemelight.png" alt="installhexo">







<h2 id="远程预览主题"><a href="#远程预览主题" class="headerlink" title="远程预览主题"></a>远程预览主题</h2><p>能够正常看到主题就代表主题安装成功</p>
<img src="arknightsthemesblack.png" alt="installhexo">







<h1 id="其他个性化设置"><a href="#其他个性化设置" class="headerlink" title="其他个性化设置"></a>其他个性化设置</h1><h2 id="个性化页面配置"><a href="#个性化页面配置" class="headerlink" title="个性化页面配置"></a>个性化页面配置</h2><img src="hexootherdiy.png" alt="installhexo">



<p>更详细的个性化页面配置请参考：<a href="https://zhuanlan.zhihu.com/p/69211731">Hexo 博客美化合集（不断更新）</a></p>
<h1 id="在Github-Page发布文章"><a href="#在Github-Page发布文章" class="headerlink" title="在Github Page发布文章"></a>在Github Page发布文章</h1><h2 id="创建一篇新文章"><a href="#创建一篇新文章" class="headerlink" title="创建一篇新文章"></a>创建一篇新文章</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章名&quot;</span></span><br></pre></td></tr></table></figure>

<p>创建成功后，可以在source文件夹的 _posts文件夹中找到新建的md文件。</p>
<img src="hexonewmd.png" alt="installhexo">





<img src="hexonewpostsmd.png" alt="installhexo">



<p>打开md文件，在文件中写入文章内容。例如可以使用Typora来写入文章内容。</p>
<p>记得按 Ctrl  S 保存！</p>
<h2 id="渲染静态页面"><a href="#渲染静态页面" class="headerlink" title="渲染静态页面"></a>渲染静态页面</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<p>(两个命令作用一样，任选一个使用即可)</p>
<h2 id="在本地运行"><a href="#在本地运行" class="headerlink" title="在本地运行"></a>在本地运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>(两个命令作用一样，任选一个使用即可)</p>
<h2 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>(两个命令作用一样，任选一个使用即可)</p>
<h2 id="生成静态页面并将其部署到指定的远程服务器（快捷方式）"><a href="#生成静态页面并将其部署到指定的远程服务器（快捷方式）" class="headerlink" title="生成静态页面并将其部署到指定的远程服务器（快捷方式）"></a>生成静态页面并将其部署到指定的远程服务器（快捷方式）</h2><p><code>hexo g -d</code> 命令的效果等同于先运行 <code>hexo g</code> 命令生成静态页面，然后再运行 <code>hexo d</code> 命令将生成的静态页面部署到远程服务器。这个命令组合的便捷性在于省去了手动执行这两个命令的步骤，使得生成和部署过程更加简洁和快捷。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>



<p>刷新一下网站，就能看到新写的文章啦。</p>
<h1 id="其他静态网站生成器"><a href="#其他静态网站生成器" class="headerlink" title="其他静态网站生成器"></a>其他静态网站生成器</h1><p>除了 Hexo，还有其他类似的静态网站生成器可供选择，只不过因为Hexo有罗德岛的主题所以才选择用了Hexo。</p>
<p>例如：</p>
<p>Jekyll：Jekyll 是 GitHub Pages 的默认选择，它使用 Ruby 编程语言，具有强大的主题和插件。</p>
<p>Gatsby：Gatsby 是一个基于 React 的静态网站生成器，使用 GraphQL 查询语言来获取数据。</p>
<p>Hugo：Hugo 是一个快速的静态网站生成器，使用 Go 编程语言编写。</p>
<p>感兴趣想尝试的话可以试试这些静态网站生成器</p>
<h1 id="绮良Github-Page网址"><a href="#绮良Github-Page网址" class="headerlink" title="绮良Github Page网址"></a>绮良Github Page网址</h1><p><a href="https://kirarakira.github.io/Kirara.github.io/">https://kirarakira.github.io/Kirara.github.io/</a></p>
<h1 id="值得参考的教程"><a href="#值得参考的教程" class="headerlink" title="值得参考的教程"></a>值得参考的教程</h1><p><a href="http://www.tanglab.cn/2022/11/24/R&D/2022/GitHub_pages_tutorial/#Part-0-Git%E6%98%AF%E5%95%A5%EF%BC%9FGitHub%E5%8F%88%E6%98%AF%E5%95%A5%EF%BC%9F%E4%B8%BA%E5%95%A5%E8%A6%81%E7%94%A8GitHub%E5%81%9A%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%EF%BC%9F">Tutorial:基于Hexo框架的GitHub个人主页搭建教程（前篇）</a></p>
<p><a href="https://github.com/hexojs/hexo/issues/3427">部署到 git 后 打开 GitHub Pages 为 404</a></p>
<p><a href="https://github.com/hexojs/hexo/issues/350">上传内容以后页面一直是404？</a></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>GitHub Page</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML学习笔记</title>
    <url>/2021/01/23/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h4 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h4><p>结构 : HTML(超文本标记语言)</p>
<p>表现 : CSS(层叠样式表)</p>
<p>行为 : JavaScript(脚本语言)</p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/The_web_and_web_standards">Web 和 Web标准</a></p>
<span id="more"></span>

<h4 id="文档参考网站"><a href="#文档参考网站" class="headerlink" title="文档参考网站 :"></a>文档参考网站 :</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML">MDN</a>(推荐)</p>
<p><a href="https://www.w3school.com.cn/h.asp">W3School</a>(推荐)</p>
<p><a href="https://www.runoob.com/html/html-intro.html">菜鸟教程</a></p>
<h4 id="书籍推荐-英文原版"><a href="#书籍推荐-英文原版" class="headerlink" title="书籍推荐 ( 英文原版 ) :"></a>书籍推荐 ( 英文原版 ) :</h4><p><a href="https://www.aliyundrive.com/s/BXa6TSA7GPQ">Head First - HTML with CSS &amp; XHTML</a></p>
<p><a href="%E3%80%8CHead.First.HTMLwithCSS&XHTML.pdf%E3%80%8Dhttps://www.aliyundrive.com/s/Rz8H8q9dYRj">Head First HTML5 Programming Building Web Apps with JavaScript</a></p>
<p>(添加桌面pdf文件)</p>
<h4 id="基本快捷键"><a href="#基本快捷键" class="headerlink" title="基本快捷键"></a>基本快捷键</h4><p>Ctrl + C 复制</p>
<p>Ctrl + V 粘贴</p>
<p>Ctrl + X 剪切</p>
<p>Ctrl + Z 撤销</p>
<p>Ctrl + &#x2F; 注释</p>
<p>Ctrl + S 保存</p>
<p>Ctrl + F 查找</p>
<p><a href="https://blog.csdn.net/tianshan2010/article/details/112437752?ops_request_misc=&request_id=&biz_id=102&utm_term=%E7%94%B5%E8%84%91%E5%BF%AB%E6%8D%B7%E9%94%AE&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-112437752.nonecase&spm=1018.2226.3001.4187">基本快捷键</a></p>
<p><a href="https://blog.csdn.net/qq_38265674/article/details/112061632?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164603992816780271516406%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164603992816780271516406&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-112061632.pc_search_result_control_group&utm_term=%E7%94%B5%E8%84%91%E5%BF%AB%E6%8D%B7%E9%94%AE&spm=1018.2226.3001.4187">常用快捷键</a></p>
<h4 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h4><p><a href="https://www.sublimetext.com/">Sublime Text</a></p>
<p><a href="https://www.dcloud.io/hbuilderx.html">HbuliderX</a></p>
<p><a href="https://code.visualstudio.com/">visual studio code</a></p>
<p>WebStorm10</p>
<p>DWCS6</p>
<h4 id="浏览器分类"><a href="#浏览器分类" class="headerlink" title="浏览器分类"></a>浏览器分类</h4><p>IE  内核Trident</p>
<p>Firefox(火狐)  内核Gecko</p>
<p>Safari  内核Webkit</p>
<p>Chrome(谷歌)  Oprea  内核Blik</p>
<p>Edge  内核Chromiun和Blink</p>
<h4 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h4><p>http</p>
<p>参考文章 : <a href="https://baike.baidu.com/item/HTTP/243074?fr=aladdin">HTTP</a></p>
<p>https</p>
<p>参考文章 : <a href="https://baike.baidu.com/item/HTTPS/285356?fr=aladdin">HTTPS</a></p>
<h4 id="怪异模式和标准模式"><a href="#怪异模式和标准模式" class="headerlink" title="怪异模式和标准模式"></a>怪异模式和标准模式</h4><p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Quirks_Mode_and_Standards_Mode">怪异模式和标准模式</a></p>
<h4 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h4><p>浏览器Web标准&#x2F;W3C(万维网联盟)</p>
<p>参考文章 : <a href="https://baike.baidu.com/item/W3C%E6%A0%87%E5%87%86/8367679?fr=aladdin">W3C标准</a></p>
<p><a href="https://www.w3school.com.cn/w3c/w3c_intro.asp">W3C简介</a></p>
<h4 id="VScode快捷键"><a href="#VScode快捷键" class="headerlink" title="VScode快捷键"></a>VScode快捷键</h4><p>快速生成HTML骨架快捷键</p>
<ul>
<li>英文”!” + Tab</li>
<li>英文”!” + Enter</li>
<li>html + : (既英文冒号) + 5</li>
</ul>
<p>Ctrl + Enter 双标签中转为下一行</p>
<p>Shift + Alt + ↓ 双标签中向下复制整行</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>超文本<strong>标记语言</strong></p>
<p>HTML 标记标签通常被称为 HTML 标签 (HTML tag)</p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML/Getting_started">开始学习HTML</a></p>
<p><a href="https://www.w3school.com.cn/html/html_jianjie.asp">HTML简介</a></p>
<h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>网页标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">boby</span>&gt;</span></span><br><span class="line">    网页内容</span><br><span class="line">    <span class="tag">&lt;/<span class="name">boby</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文件 : <a href="https://www.w3school.com.cn/html/html_head.asp">HTML头部</a></p>
<h3 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- en英文  zh-CN中文  fr法文--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文章 : <a href="https://www.w3school.com.cn/tags/html_ref_language_codes.asp">HTML语言代码参考手册</a></p>
<h3 id="字符集Charset"><a href="#字符集Charset" class="headerlink" title="字符集Charset"></a>字符集Charset</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">Charset</span>=<span class="string">&quot; &quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- GB2312简体中文  BIG5繁体中文  GBK简体繁体中文  UTF-8(utf-8)所有语言--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文章 : <a href="https://www.w3school.com.cn/html/html_charset.asp">HTML编码(字符集)</a></p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文章 : <a href="https://www.w3school.com.cn/html/html_comments.asp">HTML注释</a></p>
<h3 id="基本约定"><a href="#基本约定" class="headerlink" title="基本约定"></a>基本约定</h3><p>参考文章 : <a href="https://www.w3school.com.cn/html/html_charset.asp">HTML(5)样式指南和代码约定</a></p>
<h3 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h3><p>元素( Element )指的是从开始标签（start tag）到结束标签（end tag）的所有代码</p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Element">Element元素</a></p>
<p><a href="https://www.w3school.com.cn/html/html_elements.asp">HTML元素</a></p>
<p><a href="https://www.w3school.com.cn/html/html5_semantic_elements.asp">HTML5 语义元素</a></p>
<h4 id="块级元素-块元素"><a href="#块级元素-块元素" class="headerlink" title="块级元素(块元素)"></a>块级元素(块元素)</h4><p>独占一行 , 只能出现在<code>&lt;body&gt; &lt;/body&gt;</code>元素内。</p>
<p>例 : </p>
<p> <strong><code>&lt;h1&gt;</code>~&#96;<h6>&#96;</strong> <strong><code>&lt;form&gt;</code></strong> <strong><code>dl </code>  <code>&lt;dd&gt;</code></strong> <strong><code>&lt;hr&gt;</code></strong>  <strong><code>&lt;ol&gt;</code></strong> <strong><code>&lt;ul&gt;</code></strong>  <strong><code>&lt;p&gt;</code> <code>&lt;table&gt;</code> <code>&lt;div&gt;</code></strong> <code>&lt;adress&gt;</code> , <code>&lt;article&gt;</code> , <code>&lt;aside&gt;</code> , <code>&lt;bolckquote&gt;</code> , <code>&lt;fieldest&gt;</code> , <code>&lt;figcaption&gt;</code> , <code>&lt;figure&gt;</code> , <code>&lt;footer&gt;</code>, <code>&lt;header</code> , <code>&lt;hgroup&gt;</code>, ,<code>&lt;pre&gt;</code> , <code>&lt;section&gt;</code> , </p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Block-level_elements">块级元素</a></p>
<h4 id="行内元素-内联元素"><a href="#行内元素-内联元素" class="headerlink" title="行内元素(内联元素)"></a>行内元素(内联元素)</h4><p>只占据它对应标签的边框所包含的空间。</p>
<p>例 : <strong><code>&lt;b&gt;</code> <code>&lt;strong&gt;</code> —— 字体加粗</strong> </p>
<p><strong><code>&lt;big&gt;</code>  <code>&lt;small&gt;</code> —— 字体改变大小</strong></p>
<p> <strong><code>&lt;i&gt;</code>  <code>&lt;em&gt;</code>  —— 字体倾斜</strong></p>
<p><strong><code>&lt;u&gt;</code> <code>&lt;ins&gt;</code> —— 字体添加下划线</strong></p>
<p><strong><code>&lt;s&gt;</code>  <code>&lt;del&gt;</code>  —— 字体添加删除线</strong></p>
<p><strong><code>&lt;br&gt;</code> —— 换行</strong></p>
<p><strong><code>&lt;input&gt; </code></strong> <strong><code>&lt;textarea&gt;</code></strong> <strong><code>&lt;img&gt;</code> —— 添加图片</strong><strong><code>&lt;span&gt;</code></strong></p>
<p> <strong><code>&lt;q&gt;</code>  ——引用标签</strong></p>
<p><strong><code>&lt;label&gt;</code>—— 定义标注标签 , 配合<code>&lt;input&gt;</code>按钮使用增加用户体验</strong> </p>
<p> <code>&lt;tt&gt;</code> , <code>&lt;abbr&gt;</code> , <code>&lt;acronym&gt;</code> , <code>&lt;cite&gt;</code> , <code>&lt;code&gt;</code> , <code>&lt;dfn&gt;</code> ,  <code>&lt;kbd&gt;</code> ,  <code>&lt;samp&gt;</code>, <code>&lt;var.a&gt;</code> , <code>&lt;bdo&gt;</code>,  , <code>&lt;map&gt;</code> , <code>&lt;object&gt;</code> ,,  <code>&lt;script&gt;</code>,  , <code>&lt;sub&gt;</code> , <code>&lt;supbutton&gt;</code> ,<code>&lt;select&gt;</code> </p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Inline_elements">行内元素</a></p>
<p><a href="https://www.w3school.com.cn/html/html_blocks.asp">HYMLdiv和span</a></p>
<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><h5 id="声明标签"><a href="#声明标签" class="headerlink" title="声明标签"></a>声明标签</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文档类型声明标签 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- doc文档,type类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文章 : <a href="https://www.w3school.com.cn/tags/html_ref_dtd.asp">HTML&lt;!DOCTYPE&gt;</a></p>
<h5 id="根标签"><a href="#根标签" class="headerlink" title="根标签"></a>根标签</h5><p><code>&lt;html&gt;  &lt;/html&gt;</code></p>
<h5 id="骨架标签"><a href="#骨架标签" class="headerlink" title="骨架标签"></a>骨架标签</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="标签-1"><a href="#标签-1" class="headerlink" title="&lt;meta&gt; 标签"></a><code>&lt;meta&gt;</code> 标签</h5><p>提供有关页面的元信息。位于文档的头部，不包含任何内容。 在 HTML 中，<meta> 标签没有结束标签。</p>
<p>参考文章 : <a href="https://www.w3school.com.cn/tags/tag_meta.asp">HTMLmeta标签</a></p>
<h4 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h4><h6 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h6><p><code>&lt;h1&gt;&lt;/h1&gt;</code>~&#96;<h6></h6>&#96;</p>
<p>参考文章 : <a href="https://www.w3school.com.cn/html/html_headings.asp">HTML标题</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Heading_Elements">h1–h6：HTML 区域标题元素</a></p>
<h6 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h6><p><code>&lt;p&gt;&lt;/p&gt;</code></p>
<p>可根据浏览器页面大小改变每行字数</p>
<p>参考文章 : <a href="https://www.w3school.com.cn/html/html_paragraphs.asp">HTML段落</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p">p</a></p>
<h6 id="盒子标签"><a href="#盒子标签" class="headerlink" title="盒子标签"></a>盒子标签</h6><p><code>&lt;div&gt; &lt;/div&gt;</code> —— 单独占一行 , 此标签内可存放任何标签和内容</p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div">div：内容划分元素</a></p>
<p><code>&lt;span&gt; &lt;/span&gt;</code> —— 一行可存在多个</p>
<p>等</p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/span">span</a></p>
<h6 id="有序列表标签"><a href="#有序列表标签" class="headerlink" title="有序列表标签"></a>有序列表标签</h6><p><code>&lt;ol&gt; &lt;/ol&gt;</code> , <code>&lt;li&gt; &lt;/li&gt;</code></p>
<p><code>&lt;li&gt; &lt;/li&gt; </code>—— 标签内可存放任何标签和内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ol">ol</a></p>
<h6 id="无序列表标签"><a href="#无序列表标签" class="headerlink" title="无序列表标签"></a>无序列表标签</h6><p><code>&lt;ul&gt; &lt;/ul&gt;</code> , <code>&lt;li&gt; &lt;/li&gt;</code></p>
<p><code>&lt;li&gt; &lt;/li&gt; </code>—— 标签内可存放任何标签和内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ul">ul</a></p>
<h6 id="自定义列表标签"><a href="#自定义列表标签" class="headerlink" title="自定义列表标签"></a>自定义列表标签</h6><p><code>&lt;dl&gt; &lt;/dl&gt;</code> , <code>&lt;dt&gt; &lt;/dt&gt;</code> , <code>&lt;dd&gt; &lt;/dd&gt;</code></p>
<p><code>dt</code>只有一个 , <code>dd</code>有很多个</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dt</span>&gt;</span><span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/dl"><dl></a></p>
<p>参考文章 : <a href="https://www.w3school.com.cn/html/html_lists.asp">HTML列表</a></p>
<h4 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h4><p><code>&lt;br&gt;</code>或<code>&lt;br/&gt;</code>—— 换行 ( 只能在HTML5中去掉 “&#x2F;“ ) ,</p>
<p><code>&lt;nobr&gt;</code>或<code>&lt;nobr/&gt;</code> —— 不换行 , </p>
<p><code>&lt;hr&gt;</code>或<code>&lt;hr/&gt; </code>—— 水平线 , </p>
<p><code>&lt;img&gt; </code>—— (必带属性 : <code>src=&quot; ”</code>) 插入图片 , </p>
<p><code>&lt;input&gt;</code> —— 输入，表单控件 ,  </p>
<p><code>&lt;link&gt;</code> —— 链接，关联</p>
<p>等</p>
<h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>参考文章 : <a href="https://www.w3school.com.cn/html/html_entities.asp">HTML字符实体</a></p>
<p><a href="https://www.w3school.com.cn/html/html_symbols.asp">HTML符号</a></p>
<h5 id="空格实体"><a href="#空格实体" class="headerlink" title="空格实体"></a>空格实体</h5><p><code>&amp;nbsp;</code> —— 不换行空格 , 既空格键 </p>
<p><code>&amp;ensp;</code> ——半角空格 , 字体度的一半</p>
<p><code>&amp;emsp;</code> —— 全角空格 , 16px </p>
<p><code>&amp;thinsp;</code> ——窄空格 </p>
<p><code>&amp;zwnj;</code> ——零宽不连字 </p>
<p><code>&amp;zwj;</code>  —— 零宽连字 </p>
<p>参考文章：<a href="https://blog.csdn.net/u014781844/article/details/84859693">HTML中的&amp; nbsp; &amp; ensp; &amp; emsp;等6种空格标记</a></p>
<h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><h4 id="相对路径-常用"><a href="#相对路径-常用" class="headerlink" title="相对路径(常用)"></a>相对路径(常用)</h4><p><code>../</code> —— 向上一个文件夹返回查找文件 , 不能跨储存盘</p>
<p><code>./</code> —— 可查找当前根目录所有文件</p>
<h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p><code>\</code> ——可跨储存盘</p>
<p>或直接输入文件地址</p>
<p>参考文章 : <a href="https://www.w3school.com.cn/html/html_filepaths.asp">HTML文件路径</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Paths">路径</a></p>
<h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>直接插入图片 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>图片替换的文字 : <code>alt=&quot; &quot;</code></p>
<p>提示文本 : <code>title=&quot;  &quot;</code></p>
<p>修改图片大小 : 图片的width(宽)和height(高)可一起修改 , 若只写其中一个 , 图片等比例缩放</p>
<p>参考文章 : <a href="https://www.w3school.com.cn/html/html_images.asp">HTML图像</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img">img：图像嵌入元素</a></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="链接外地网址"><a href="#链接外地网址" class="headerlink" title="链接外地网址 :"></a>链接外地网址 :</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不写target属性则默认在当前网页打开--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--target=&quot;_self&quot;在当前网页打开--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--target=&quot;_blank&quot;在新的网页打开--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="链接内部网址"><a href="#链接内部网址" class="headerlink" title="链接内部网址"></a>链接内部网址</h4><ol>
<li><p>添加其他的html文件 : <code>&lt;a href=&quot;&quot;(文件位置)&gt;&lt;/a&gt;</code></p>
</li>
<li><p>回到顶部 : <code>&lt;a href=&quot; &quot;&gt;</code> 或 <code>&lt;a href=&quot;#&quot;&gt;</code></p>
</li>
<li><p>不回顶部 : <code>&lt;a href=&quot;javascript:;&quot;&gt;&lt;/a&gt;</code></p>
</li>
</ol>
<h4 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h4><p>添加zip文件 : <code>&lt;a href=&quot; &quot;(zip文件位置)&gt;&lt;/a&gt;</code></p>
<h4 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h4><p>寻找 : <code>&lt;a href=&quot;#+锚链接名字&quot;&gt;名字&lt;/a&gt;</code></p>
<p>定位 : <code>&lt;id = &quot;锚链接名字&quot;&gt;</code></p>
<p>参考文章 : <a href="https://www.w3school.com.cn/html/html_links.asp">HTML链接</a></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><p><code>&lt;table&gt; &lt;/table&gt;</code>——表格</p>
<p><code>&lt;tbody&gt; &lt;/tbody&gt;</code> ——表格主体</p>
<p><code>&lt;thead&gt; &lt;/thead&gt; </code>——表格头部</p>
<p><code>&lt;th&gt; &lt;/th&gt;</code> ——表头单元格</p>
<p><code>&lt;tr&gt; &lt;/tr&gt;</code> ——行</p>
<p><code>&lt;td&gt; &lt;/td&gt;</code>——单元格</p>
<p><code>&lt;ul&gt;&lt;lul&gt;</code>——无序的列表</p>
<p><code>&lt;li&gt;&lt;/li&gt;</code>——列表项</p>
<h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><p><code>height </code>——表格高</p>
<p><code>width</code> ———表格宽</p>
<p><code>border </code>———表格边框——默认1 , “ “——代表没有边框</p>
<p><code>align</code> ———表格对齐方式</p>
<p><code>lift</code>——居左</p>
<p><code>center</code> ———居中</p>
<p><code>right</code> ——居右</p>
<p><code>cellpadding</code> ——像素值——单元格与内容的距离——默认1像素</p>
<p><code>cellspacing</code> ——像素值——单元格之间距离——默认2像素</p>
<h4 id="合并表格"><a href="#合并表格" class="headerlink" title="合并表格"></a>合并表格</h4><p><strong>跨行合并</strong>——<code>rowspan=&quot;</code>——从上到下合并，最上面开始，以下删除<br><strong>跨列合并</strong>——<code>colspan=&quot; &quot;</code>——从左到右合并，最左边开始，以右删除</p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/table">table </a></p>
<p><a href="https://www.w3school.com.cn/html/html_tables.asp">HTML表格</a></p>
<h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p><strong>表单在网页中主要负责数据采集的功能，和向服务器传送数据</strong></p>
<p>表单标签 : 包含了处理表单<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE&spm=1001.2101.3001.7020">数据</a>所用 CGI 程序的 URL, 以及数据提交到服务器的方法</p>
<p> 表单域 : 包含了<a href="https://so.csdn.net/so/search?q=%E6%96%87%E6%9C%AC%E6%A1%86&spm=1001.2101.3001.7020">文本框</a>、密码框、隐藏域、多行文本框、复选框、单选框、下拉选择框、和文件上传框等。</p>
<p>表单按钮 :包括提交按钮，复位按钮和一般按钮；用于将数据传送到服务器上的 CGI 脚本或者取消输入，还可以用表单按钮来控制其他定义了处理脚本的处理工作。</p>
<p>后台地址 : xxx.php</p>
<p>参考文章 : <a href="https://www.w3school.com.cn/html/html_forms.asp">HTML表单</a></p>
<p><a href="https://www.w3school.com.cn/html/html_forms_attributes.asp">HTML表单属性</a></p>
<p><a href="https://www.w3school.com.cn/html/html_form_elements.asp">HTML表单元素</a></p>
<p><a href="https://www.w3school.com.cn/html/html_form_input_types.asp">HTML输入类型</a></p>
<p><a href="https://www.w3school.com.cn/html/html_form_attributes.asp">HTML input属性</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/input_event">input</a></p>
<h4 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件 :"></a>表单控件 :</h4><p><code>&lt;input&gt;</code> : 输入列表  <code>&lt;input type=&quot;属性值&quot;&gt;</code> </p>
<p>默认属性值为<code>text</code> , 即 <code>&lt;input type=&quot;text&quot;&gt;</code> , 文本框 , 单行 , 默认20个字符</p>
<p><code>password</code> : 密码框</p>
<p><code>value</code> : 规定input元素的值 , 用户自定义</p>
<p><code>placehloder</code> : 占位符 , 提示作用</p>
<p><code>select</code> : 下拉列表</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--至少要含有一对option标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>&lt;textare&gt;</code> : 文本域 : 文本框可放大缩小</p>
<p><code>&lt;textare cols=&quot; &quot;(每行的字数)&gt;</code>(一般用css制作)</p>
<p><code>&lt;textare rows=&quot;  &quot;(显示的行数)&gt;</code>(一般用css制作)</p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/input_event">input</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea">textarea</a></p>
<p><strong>只能在表单内使用的按钮</strong>(可放入图标&#x2F;图片)</p>
<p><code>&lt;input type=&quot;submit&quot;&gt;</code> : 默认按钮内文字 “ 提交 “ </p>
<p><code>&lt;input type=&quot;reset&quot;&gt;</code> : 默认功能重置 , 清除以上所有信息</p>
<h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>没有位置限制的按钮 : </p>
<p><code>&lt;input type=&quot;button&quot;&gt;</code> : 普通按钮 , 没有实质作用 , 需后期js添加功能</p>
<p><code>&lt;button&gt; &lt;/button&gt;</code> </p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button">button</a></p>
<p>上传文件的按钮 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>





<p>图片按钮 : </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">`<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;image src=&quot;</span> &quot; &quot;&gt;</span></span><br></pre></td></tr></table></figure>







<p>隐藏域</p>
<p><code>hidden</code> : 属性 , 隐藏的输入字段 , 不给用户使用 , 程序员写给后台进行其他用途</p>
<p>参考文章 : <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/hidden">hidden</a></p>
<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><img src="/2021/01/23/HTML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/HTML%E7%9F%A5%E8%AF%86%E7%82%B9.png" class="" title="[HTML知识点]">



]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 数据类型转换-JS中的字符串是不是对象</title>
    <url>/2023/09/15/JavaScript-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2-JS%E4%B8%AD%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E4%B8%8D%E6%98%AF%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>这个问题困扰了很久，在阅读了大量文献和参与了众多讨论后终于寻得了一个可靠合理的解释。</p>
<p>本文在解释 “JS中的字符串是不是对象” 这个问题之前铺垫了许多前置知识，例如JS数据类型、JS对象、JS数据类型转换。</p>
<p>若想直接获得问题的答案，寻找目录中的“总结”查看即可。</p>
<span id="more"></span>

<hr>
<h1 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h1><p>在MDN官网中，对于“数据结构和类型（Data structures and types）”这一概念是这样介绍的：</p>
<h2 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h2><blockquote>
<p><strong>Data types</strong><br>The latest ECMAScript standard defines eight data types:</p>
<ul>
<li>Seven data types that are primitives:</li>
</ul>
<ol>
<li>Boolean. <code>true</code> and <code>false</code>.</li>
<li>null. A special keyword denoting a null value. (Because JavaScript is case-sensitive, <code>null</code> is not the same as <code>Null</code>, <code>NULL</code>, or any other variant.)</li>
<li>undefined. A top-level property whose value is not defined.</li>
<li>Number. An integer or floating point number. For example: <code>42</code> or <code>3.14159</code>.</li>
<li>BigInt. An integer with arbitrary precision. For example: <code>9007199254740992n</code>.</li>
<li>String. A sequence of characters that represent a text value. For example: <code>&quot;Howdy&quot;</code>.</li>
<li>Symbol. A data type whose instances are unique and immutable.</li>
</ol>
<ul>
<li>and Object</li>
</ul>
</blockquote>
<blockquote>
<p>Although these data types are relatively few, they enable you to perform useful operations with your applications. Functions are the other fundamental elements of the language. While functions are technically a kind of object, you can think of objects as named containers for values, and functions as procedures that your script can perform.</p>
</blockquote>
<blockquote>
<p>最新的 ECMAScript 标准定义了 8 种数据类型：</p>
<ul>
<li>七种基本数据类型：</li>
<li>布尔值（Boolean），有 2 个值分别是：<code>true</code> 和 <code>false</code>。</li>
<li>null，一个表明 null 值的特殊关键字。JavaScript 是大小写敏感的，因此 <code>null</code> 与 <code>Null</code>、<code>NULL</code>或变体完全不同。</li>
<li>undefined，和 null 一样是一个特殊的关键字，undefined 表示变量未赋值时的属性。</li>
<li>数字（Number），整数或浮点数，例如： <code>42</code> 或者 <code>3.14159</code>。</li>
<li>任意精度的整数（BigInt），可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制。</li>
<li>字符串（String），字符串是一串表示文本值的字符序列，例如：<code>&quot;Howdy&quot;</code>。</li>
<li>代表（Symbol，在 ECMAScript 6 中新添加的类型）。一种实例是唯一且不可改变的数据类型。</li>
<li>以及对象（Object）。</li>
</ul>
</blockquote>
<blockquote>
<p>虽然这些数据类型相对来说比较少，但是通过他们你可以在程序中开发有用的功能。对象和函数是这门语言的另外两个基本元素。你可以把对象当作存放值的一个命名容器，然后将函数当作你的程序能够执行的步骤。</p>
</blockquote>
<hr>
<p>在MDN的描述中，JavaScript的数据类型分类如下：</p>
<p>基本数据类型（Seven data types）：Boolean， null， undefined， Number， Bigint， String， Symbol<br>对象（Object）：包含Array，Function等</p>
<hr>
<p>再来看W3C对于数据类型的解释：</p>
<h2 id="W3C"><a href="#W3C" class="headerlink" title="W3C"></a>W3C</h2><blockquote>
<p><strong>JavaScript 数据类型</strong><br><strong>字符串值，数值，布尔值，数组，对象。</strong></p>
<p><strong>JavaScript 数据类型</strong><br>JavaScript 变量能够保存多种数据类型：数值、字符串值、数组、对象等等：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">7</span>;                             <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&quot;Gates&quot;</span>;                      <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">&quot;Porsche&quot;</span>, <span class="string">&quot;Volvo&quot;</span>, <span class="string">&quot;BMW&quot;</span>];         <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> x = &#123;<span class="attr">firstName</span>:<span class="string">&quot;Bill&quot;</span>, <span class="attr">lastName</span>:<span class="string">&quot;Gates&quot;</span>&#125;;    <span class="comment">// 对象</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>数据类型的概念</strong><br>在编程过程中，数据类型是重要的概念。<br>为了能够操作变量，了解数据类型是很重要的。</p>
<p><strong>ECMAScript 有 5 种原始类型（primitive type），即 Undefined、 Null、 Boolean、 Number 和 String。</strong><br><strong>原始数据</strong><br>原始数据值是一种没有额外属性和方法的单一简单数据值。<br><code>typeof</code> 运算符可返回以下原始类型之一：</p>
<ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>undefined<br>请不要把字符串、数值和布尔值声明为对象！<br>如果通过关键词”new”声明JavaScript量，则该变 量会被创建为对象:</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> X = <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line"><span class="comment">//把x声明为String 对象</span></span><br><span class="line">&gt;<span class="keyword">var</span> y = <span class="keyword">new</span> <span class="title class_">Number</span>();</span><br><span class="line"><span class="comment">//把y声明为Number 对象</span></span><br><span class="line"><span class="keyword">var</span> z = <span class="keyword">new</span> <span class="title class_">Boolean</span>();</span><br><span class="line"><span class="comment">//把z声明为Boolean对象</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>请避免字符串、数值或逻辑对象。他们会增加代码的复杂性并降低执行速度。<br>您将在本教程的稍后章节学到更多有关对象的知识。</p>
<p><strong>复杂数据</strong><br><code>typeof</code> 运算符可返回以下两种类型之一：</p>
<ul>
<li>function</li>
<li>object<br><code>typeof</code> 运算符把对象、数组或 <code>null</code> 返回 <code>object</code>。<br><code>typeof</code> 运算符不会把函数返回 <code>object</code>。</li>
</ul>
<p><strong>引用类型通常叫做类（class）。</strong> 也就是说，遇到引用值，所处理的就是对象。<br>本教程会讨论大量的 ECMAScript 预定义引用类型。从现在起，将重点讨论与已经讨论过的原始类型紧密相关的引用类型。</p>
<p>注意：从传统意义上来说，ECMAScript 并不真正具有类。事实上，除了说明不存在类，在 ECMA-262 中根本没有出现“类”这个词。ECMAScript 定义了“对象定义”，逻辑上等价于其他程序设计语言中的类。<br>提示：本教程将使用术语“对象”。<br>对象是由 new 运算符加上要实例化的对象的名字创建的。</p>
<p><strong>Object 对象</strong><br>Object 对象自身用处不大，不过在了解其他类之前，还是应该了解它。因为 ECMAScript 中的 Object 对象与 Java 中的 java.lang.Object 相似，ECMAScript 中的所有对象都由这个对象继承而来，Object 对象中的所有属性和方法都会出现在其他对象中，所以理解了 Object 对象，就可以更好地理解其他对象。</p>
</blockquote>
<hr>
<p>在W3C的描述中，JavaScript的数据类型分类如下：</p>
<p>原始类型（primitive type）：Undefined、 Null、 Boolean、 Number 和 String<br>引用类型（对象）（Object）：Object</p>
<p>尽管MDN官网和W3C的官网描述并不完全一致，但可以明确的一点是：尽管在JavaScript中有着 “万物皆对象” 的说法，但依然有非对象的数据类型存在，且原始类型没有属性和方法。最没有争议的原始类型是：Undefined、 Boolean、 Number 和 String。</p>
<p>值得注意的是，虽然 <code>null</code> 有时被认为是一个对象（例如，<code>typeof null</code> 的结果是 <code>&#39;object&#39;</code>），但在实际上，它并不是对象，而是一个原始值。这是JavaScript的一个已知错误。</p>
<p>W3C对于null的解释：</p>
<blockquote>
<p>注释：您也许会问，为什么 typeof 运算符对于 null 值会返回 “Object”。这实际上是 JavaScript 最初实现中的一个错误，然后被 ECMAScript 沿用了。现在，null 被认为是对象的占位符，从而解释了这一矛盾，但从技术上来说，它仍然是原始值。</p>
</blockquote>
<hr>
<p>再来看一下MDN和W3C关于“对象”这个概念的介绍：</p>
<h1 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript 对象"></a>JavaScript 对象</h1><h2 id="MDN-1"><a href="#MDN-1" class="headerlink" title="MDN"></a>MDN</h2><p>MDN对于“对象”的解释：</p>
<blockquote>
<p>Introducing JavaScript objects</p>
<p>In JavaScript, most things are objects, from core JavaScript features like arrays to the browser APIs built on top of JavaScript. You can even create your own objects to encapsulate related functions and variables into efficient packages and act as handy data containers. The object-based nature of JavaScript is important to understand if you want to go further with your knowledge of the language, therefore we’ve provided this module to help you.</p>
</blockquote>
<blockquote>
<p>在 JavaScript 中，大多数事物都是对象，从作为核心功能的字符串和数组，到建立在 JavaScript 之上的浏览器 API 。你甚至可以自己创建对象，将相关的函数和变量高效地封装打包成便捷的数据容器。对于进一步学习 JavaScript 语言知识而言，理解这种面向对象（object-oriented, OO）的特性是必不可少的，所以，我们提供了这个模块来帮助你了解这一切。这里我们会先详细介绍对象的理论和语法，再介绍如何创建对象。<br>对象基础<br>对象是一个包含相关数据和方法的集合（通常由一些变量和函数组成，我们称之为对象里面的属性和方法）</p>
<p>每次我们学习的示例使用浏览器内建的 API 和 JavaScript 的一些对象时，我们就在使用对象，因为，这些功能是由跟我们所看到的对象同样的结构来构建的，尽管比我们自己定义的示例要复杂许多。</p>
</blockquote>
<hr>
<h3 id="W3C-1"><a href="#W3C-1" class="headerlink" title="W3C"></a>W3C</h3><p>W3C对于“对象”的解释：</p>
<blockquote>
<p><strong>JavaScript 对象定义</strong></p>
<ul>
<li><a href="https://www.w3school.com.cn/js/js_history.asp" title="JavaScript 历史">JS 历史</a></li>
<li><a href="https://www.w3school.com.cn/js/js_object_properties.asp" title="JavaScript 对象属性">JS 对象属性</a><br>在 JavaScript 中，对象是王。如果您理解了对象，就理解了 JavaScript。<br>在 JavaScript 中，几乎“所有事物”都是对象。</li>
<li>布尔是对象（如果用 <em>new</em> 关键词定义）</li>
<li>数字是对象（如果用 <em>new</em> 关键词定义）</li>
<li>字符串是对象（如果用 <em>new</em> 关键词定义）</li>
<li>日期永远都是对象</li>
<li>算术永远都是对象</li>
<li>正则表达式永远都是对象</li>
<li>数组永远都是对象</li>
<li>函数永远都是对象</li>
<li>对象永远都是对象<br>所有 JavaScript 值，除了原始值，都是对象。</li>
</ul>
<p><strong>JavaScript 原始值</strong><br>_原始值_指的是没有属性或方法的值。<br>_原始数据类型_指的是拥有原始值的数据。<br>JavaScript 定义了 5 种原始数据类型：</p>
<ul>
<li>string</li>
<li>number</li>
<li>boolean</li>
<li>null</li>
<li>undefined<br>原始值是一成不变的（它们是硬编码的，因此不能改变）。</li>
</ul>
<p><strong>面向对象术语</strong></p>
<p><strong>对象</strong><br>ECMA-262 把对象（object）定义为“属性的无序集合，每个属性存放一个原始值、对象或函数”。严格来说，这意味着对象是无特定顺序的值的数组。<br>尽管 ECMAScript 如此定义对象，但它更通用的定义是基于代码的名词（人、地点或事物）的表示。</p>
<p><strong>类</strong><br>每个对象都由类定义，可以把类看做对象的配方。类不仅要定义对象的接口（interface）（开发者访问的属性和方法），还要定义对象的内部工作（使属性和方法发挥作用的代码）。编译器和解释程序都根据类的说明构建对象。</p>
<p><strong>实例</strong><br>程序使用类创建对象时，生成的对象叫作类的实例（instance）。对类生成的对象的个数的唯一限制来自于运行代码的机器的物理内存。每个实例的行为相同，但实例处理一组独立的数据。由类创建对象实例的过程叫做实例化（instantiation）。<br>在前面的章节我们提到过，ECMAScript 并没有正式的类。相反，ECMA-262 把对象定义描述为对象的配方。这是 ECMAScript 逻辑上的一种折中方案，因为对象定义实际上是对象自身。即使类并不真正存在，我们也把对象定义叫做类，因为大多数开发者对此术语更熟悉，而且从功能上说，两者是等价的。</p>
<p><strong>对象的构成</strong><br>在 ECMAScript 中，对象由特性（attribute）构成，特性可以是原始值，也可以是引用值。如果特性存放的是函数，它将被看作对象的方法（method），否则该特性被看作对象的属性（property）。</p>
<p><strong>在 ECMAScript 中，所有对象并非同等创建的。</strong><br><strong>一般来说，可以创建并使用的对象有三种：本地对象、内置对象和宿主对象。</strong><br><strong>本地对象</strong><br>ECMA-262 把本地对象（native object）定义为“独立于宿主环境的 ECMAScript 实现提供的对象”。简单来说，本地对象就是 ECMA-262 定义的类（引用类型）。它们包括：</p>
<ul>
<li>Object</li>
<li>Function</li>
<li>Array</li>
<li>String</li>
<li>Boolean</li>
<li>Number</li>
<li>Date</li>
<li>RegExp</li>
<li>Error</li>
<li>EvalError</li>
<li>RangeError</li>
<li>ReferenceError</li>
<li>SyntaxError</li>
<li>TypeError</li>
<li>URIError</li>
</ul>
</blockquote>
<hr>
<h1 id="补充（Java中的数据类型）"><a href="#补充（Java中的数据类型）" class="headerlink" title="补充（Java中的数据类型）"></a>补充（Java中的数据类型）</h1><p>如果有了解过Java语言的数据类型会知道：Java有八种基本类型，有byte，short，int，long，double，float，boolean，char。</p>
<p>而在引用数据类型中，定义了它们的包装类，即八种包装类：<br>Byte（java.lang.Byte（父类Number））<br>Short（java.lang.Short（父类Number））<br>Integer（java.lang.Integer（父类Number））<br>Long（java.lang.Long（父类Number））<br>Double（java.lang.Double（父类Number））<br>Float（java.lang.Float（父类Number））<br>Boolean（java.lang.Boolean（父类Object））<br>Character（java.lang.Character（父类Object））</p>
<p>需要注意的一点是：Java的基本类型中没有String，String本身就是一个引用数据类型的类。<br>基本数据类型没有属性和方法，无法进行调用操作，而它们的包装类具有属性和方法，可以调用包装类的属性和方法使用。</p>
<hr>
<p>当你认为JavaScript的数据类型有对象和Undefined、 Boolean、 Number、 String几个非对象，而对象拥有属性和方法，可以调用，但其他非对象类型则没有属性和方法，不能调用。</p>
<p>别急。还记得JavaScript中的数据类型有隐式转换吗？</p>
<hr>
<h1 id="JavaScript-数据类型的转换"><a href="#JavaScript-数据类型的转换" class="headerlink" title="JavaScript 数据类型的转换"></a>JavaScript 数据类型的转换</h1><h2 id="MDN-2"><a href="#MDN-2" class="headerlink" title="MDN"></a>MDN</h2><p>下面是MDN对于数据类型转换的解释：</p>
<blockquote>
<p><strong>Data type conversion</strong><br>JavaScript is a <em>dynamically typed</em> language. This means you don’t have to specify the data type of a variable when you declare it. It also means that data types are automatically converted as-needed during script execution.</p>
<p>Numbers and the ‘+’ operator<br>In expressions involving numeric and string values with the <code>+</code> operator, JavaScript converts numeric values to strings.<br>With all other operators, JavaScript does <em>not</em> convert numeric values to strings.</p>
<p>Converting strings to numbers<br>In the case that a value representing a number is in memory as a string, there are methods for conversion.</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt"><code>parseInt()</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat"><code>parseFloat()</code></a><br><code>parseInt</code> only returns whole numbers, so its use is diminished for decimals.<br><strong>Note:</strong> Additionally, a best practice for <code>parseInt</code> is to always include the <em>radix</em> parameter. The radix parameter is used to specify which numerical system is to be used.<br>An alternative method of retrieving a number from a string is with the <code>+</code> (unary plus) operator.</li>
</ul>
</blockquote>
<blockquote>
<p><strong>数据类型的转换</strong><br>JavaScript 是一种动态类型语言 (dynamically typed language)。这意味着你在声明变量时可以不必指定数据类型，而数据类型会在代码执行时会根据需要自动转换。</p>
<p><strong>数字转换为字符串</strong><br>在包含的数字和字符串的表达式中使用加法运算符（+），JavaScript 会把数字转换成字符串。</p>
<p>在涉及其他运算符时，JavaScript 语言不会把数字变为字符串。</p>
<p><strong>字符串转换为数字</strong><br>有一些方法可以将内存中表示一个数字的字符串转换为对应的数字。</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt" title="Currently only available in English (US)"><code>parseInt()</code> (en-US)</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat"><code>parseFloat()</code></a><br><code>parseInt</code> 方法只能返回整数，所以使用它会丢失小数部分。另外，调用 parseInt 时最好总是带上进制（radix）参数，这个参数用于指定使用哪一种进制。<br>将字符串转换为数字的另一种方法是使用一元<strong>加法运算符</strong>。</li>
</ul>
</blockquote>
<h2 id="W3C-2"><a href="#W3C-2" class="headerlink" title="W3C"></a>W3C</h2><p>W3C对于数据类型转换的解释：</p>
<blockquote>
<p>JavaScript 拥有动态类型，这意味着相同变量可用作不同类型。<br>W3C中详细介绍数据类型转换的相关链接：<a href="https://www.w3school.com.cn/js/pro_js_typeconversion.asp">https://www.w3school.com.cn/js/pro_js_typeconversion.asp</a></p>
</blockquote>
<hr>
<p>现在已经知道了JavaScript中的数据类型、对象、以及数据类型转换的概念后，再来看看下面这个例子：</p>
<h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>在VSCode中输入以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="keyword">var</span> b = a.<span class="title function_">substring</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，变量a为一个基本类型的字符串，a此时应当为一个基本类型的string。<br>后面调用了a的substring方法。</p>
<p>运行后得到的结果为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abcdefg</span><br><span class="line">abcdefg</span><br><span class="line">cdefg</span><br></pre></td></tr></table></figure>

<p>由结果第三行可知，调用a的方法成功了。<br>似乎和前面的结论相悖：一个基本类型的a竟可以调用方法。</p>
<h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p>JS中有“原型”和“原型链”这样的概念。我们利用原型链的特性再来看一个例子。</p>
<p>在浏览器的开发者模式中，可以在控制台输入JS代码并运行。</p>
<p>在控制台中输入下面的内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;aaa&quot;</span></span><br><span class="line">a.<span class="property">__proto__</span></span><br></pre></td></tr></table></figure>

<p>输入完毕后回车，可以得到下面的结果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span> &#123;<span class="string">&#x27;&#x27;</span>, <span class="attr">constructor</span>: ƒ, <span class="attr">anchor</span>: ƒ, <span class="attr">at</span>: ƒ, <span class="attr">big</span>: ƒ, …&#125;</span><br><span class="line"></span><br><span class="line"><span class="attr">anchor</span>: ƒ <span class="title function_">anchor</span>()</span><br><span class="line"><span class="attr">at</span>: ƒ <span class="title function_">at</span>()</span><br><span class="line"><span class="attr">big</span>: ƒ <span class="title function_">big</span>()</span><br><span class="line"><span class="attr">blink</span>: ƒ <span class="title function_">blink</span>()</span><br><span class="line"><span class="attr">bold</span>: ƒ <span class="title function_">bold</span>()</span><br><span class="line"><span class="attr">charAt</span>: ƒ <span class="title function_">charAt</span>()</span><br><span class="line"><span class="attr">charCodeAt</span>: ƒ <span class="title function_">charCodeAt</span>()</span><br><span class="line"><span class="attr">codePointAt</span>: ƒ <span class="title function_">codePointAt</span>()</span><br><span class="line"><span class="attr">concat</span>: ƒ <span class="title function_">concat</span>()</span><br><span class="line"><span class="attr">constructor</span>: ƒ <span class="title class_">String</span>()</span><br><span class="line"><span class="attr">endsWith</span>: ƒ <span class="title function_">endsWith</span>()</span><br><span class="line"><span class="attr">fixed</span>: ƒ <span class="title function_">fixed</span>()</span><br><span class="line"><span class="attr">fontcolor</span>: ƒ <span class="title function_">fontcolor</span>()</span><br><span class="line"><span class="attr">fontsize</span>: ƒ <span class="title function_">fontsize</span>()</span><br><span class="line"><span class="attr">includes</span>: ƒ <span class="title function_">includes</span>()</span><br><span class="line"><span class="attr">indexOf</span>: ƒ <span class="title function_">indexOf</span>()</span><br><span class="line"><span class="attr">isWellFormed</span>: ƒ <span class="title function_">isWellFormed</span>()</span><br><span class="line"><span class="attr">italics</span>: ƒ <span class="title function_">italics</span>()</span><br><span class="line"><span class="attr">lastIndexOf</span>: ƒ <span class="title function_">lastIndexOf</span>()</span><br><span class="line"><span class="attr">length</span>: <span class="number">0</span></span><br><span class="line"><span class="attr">link</span>: ƒ <span class="title function_">link</span>()</span><br><span class="line"><span class="attr">localeCompare</span>: ƒ <span class="title function_">localeCompare</span>()</span><br><span class="line"><span class="attr">match</span>: ƒ <span class="title function_">match</span>()</span><br><span class="line"><span class="attr">matchAll</span>: ƒ <span class="title function_">matchAll</span>()</span><br><span class="line"><span class="attr">normalize</span>: ƒ <span class="title function_">normalize</span>()</span><br><span class="line"><span class="attr">padEnd</span>: ƒ <span class="title function_">padEnd</span>()</span><br><span class="line"><span class="attr">padStart</span>: ƒ <span class="title function_">padStart</span>()</span><br><span class="line"><span class="attr">repeat</span>: ƒ <span class="title function_">repeat</span>()</span><br><span class="line"><span class="attr">replace</span>: ƒ <span class="title function_">replace</span>()</span><br><span class="line"><span class="attr">replaceAll</span>: ƒ <span class="title function_">replaceAll</span>()</span><br><span class="line"><span class="attr">search</span>: ƒ <span class="title function_">search</span>()</span><br><span class="line"><span class="attr">slice</span>: ƒ <span class="title function_">slice</span>()</span><br><span class="line"><span class="attr">small</span>: ƒ <span class="title function_">small</span>()</span><br><span class="line"><span class="attr">split</span>: ƒ <span class="title function_">split</span>()</span><br><span class="line"><span class="attr">startsWith</span>: ƒ <span class="title function_">startsWith</span>()</span><br><span class="line"><span class="attr">strike</span>: ƒ <span class="title function_">strike</span>()</span><br><span class="line"><span class="attr">sub</span>: ƒ <span class="title function_">sub</span>()</span><br><span class="line"><span class="attr">substr</span>: ƒ <span class="title function_">substr</span>()</span><br><span class="line"><span class="attr">substring</span>: ƒ <span class="title function_">substring</span>()</span><br><span class="line"><span class="attr">sup</span>: ƒ <span class="title function_">sup</span>()</span><br><span class="line"><span class="attr">toLocaleLowerCase</span>: ƒ <span class="title function_">toLocaleLowerCase</span>()</span><br><span class="line"><span class="attr">toLocaleUpperCase</span>: ƒ <span class="title function_">toLocaleUpperCase</span>()</span><br><span class="line"><span class="attr">toLowerCase</span>: ƒ <span class="title function_">toLowerCase</span>()</span><br><span class="line"><span class="attr">toString</span>: ƒ <span class="title function_">toString</span>()</span><br><span class="line"><span class="attr">toUpperCase</span>: ƒ <span class="title function_">toUpperCase</span>()</span><br><span class="line"><span class="attr">toWellFormed</span>: ƒ <span class="title function_">toWellFormed</span>()</span><br><span class="line"><span class="attr">trim</span>: ƒ <span class="title function_">trim</span>()</span><br><span class="line"><span class="attr">trimEnd</span>: ƒ <span class="title function_">trimEnd</span>()</span><br><span class="line"><span class="attr">trimLeft</span>: ƒ <span class="title function_">trimStart</span>()</span><br><span class="line"><span class="attr">trimRight</span>: ƒ <span class="title function_">trimEnd</span>()</span><br><span class="line"><span class="attr">trimStart</span>: ƒ <span class="title function_">trimStart</span>()</span><br><span class="line"><span class="attr">valueOf</span>: ƒ <span class="title function_">valueOf</span>()</span><br><span class="line"><span class="title class_">Symbol</span>(<span class="title class_">Symbol</span>.<span class="property">iterator</span>): ƒ [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">[[<span class="title class_">Prototype</span>]]: <span class="title class_">Object</span></span><br><span class="line">[[<span class="title class_">PrimitiveValue</span>]]: <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>



<p>在输出信息的导数第二行中看到这样一条：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[[<span class="title class_">Prototype</span>]]: <span class="title class_">Object</span></span><br></pre></td></tr></table></figure>
<p>也就是在<code>a=&quot;aaa&quot;</code>中，a的类型为String，但String却属于Object。</p>
<p>这是为什么呢？这个String到底是不是对象呢？如果是对象，为什么会将String称为基本类型&#x2F;原始类型？如果不是对象，为什么能够调用它的方法呢？</p>
<h1 id="JS中的字符串是不是对象"><a href="#JS中的字符串是不是对象" class="headerlink" title="JS中的字符串是不是对象"></a>JS中的字符串是不是对象</h1><p>这个问题可以先参考下面这样一个帖子：<br><a href="https://www.zhihu.com/question/420346414?utm_id=0">《js中的字符串是对象吗？》</a></p>
<p>在第一个回答中：（以下为摘录）</p>
<blockquote>
<p><strong>为了便于操作基本类型值，ECMAScript 还提供了 3 个特殊的引用类型：Boolean、Number 和 String。这些类型与本章介绍的其他引用类型相似，但同时也具有与各自的基本类型相应的特殊行为。</strong></p>
<p><strong>实际上，每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象，从而让我们 能够调用一些方法来操作这些数据</strong>。来看下面的例子。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;some text&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = s1.<span class="title function_">substring</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个例子中的变量 s1 包含一个字符串，字符串当然是基本类型值。而下一行调用了 s1 的subString()方法，并将返回的结果保存在了 s2 中。<br>我们知道，基本类型值不是对象，因而从逻辑上讲它们不应该有方法（尽管如我们所愿，它们确实有方法）。</p>
<p>其实，为了让我们实现这种直观的操作，后台已经<a href="https://www.zhihu.com/search?q=%E8%87%AA%E5%8A%A8%E5%AE%8C%E6%88%90&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1464146126%7D">自动完成</a>了一系列的处理。<br>当第二行代码访问 s1 时，访问过程处于一种读取模式，也就是要从内存中读取这个字符串的值。</p>
<p>而在读取模式中访问字符串时，后台都会自动完成下列处理。<br>(1) 创建 String 类型的一个实例；<br>(2) 在实例上调用指定的方法；<br>(3) 销毁这个实例。</p>
<p>可以将以上三个步骤想象成是执行了下列 ECMAScript 代码：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;some text&quot;</span>); </span><br><span class="line"><span class="keyword">var</span> s2 = s1.<span class="title function_">substring</span>(<span class="number">2</span>);</span><br><span class="line"> s1 = <span class="literal">null</span>; </span><br></pre></td></tr></table></figure>
<blockquote>
<p>经过此番处理，基本的字符串值就变得跟对象一样了。而且，上面这三个步骤也分别适用于 Boolean 和 Number 类型对应的布尔值和数字值。</p>
<p><strong>引用类型与基本包装类型的主要区别就是对象的生存期。<br>使用 new 操作符创建的引用类型的实例， 在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一 行代码的执行瞬间，然后立即被销毁</strong>。</p>
<p>这意味着我们不能在运行时为基本类型值添加属性和方法。来看 下面的例子：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&quot;some text&quot;</span>; </span><br><span class="line">s1.<span class="property">color</span> = <span class="string">&quot;red&quot;</span>; </span><br><span class="line"><span class="title function_">alert</span>(s1.<span class="property">color</span>); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在此，第二行代码试图为字符串 s1 添加一个 color 属性。<br>但是，当第三行代码再次访问 s1 时， 其 color 属性不见了。</p>
<p>问题的原因就是第二行创建的 String 对象在执行第三行代码时已经被销毁了。<br>第三行代码又创建自己的 String 对象，而该对象没有 color 属性。<br>当然，可以显式地调用 Boolean、Number 和 String 来创建基本包装类型的对象。</p>
<p>不过，应该在 绝对必要的情况下再这样做，因为这种做法很容易让人分不清自己是在处理基本类型还是引用类型的 值。<br>对基本包装类型的实例调用 typeof 会返回”object”，而且所有基本包装类型的对象都会被转换为布尔值 true。 Object <a href="https://www.zhihu.com/search?q=%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1464146126%7D">构造函数</a>也会像<a href="https://www.zhihu.com/search?q=%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1464146126%7D">工厂方法</a>一样，根据传入值的类型返回相应基本包装类型的实例。</p>
<p>例如：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="string">&quot;some text&quot;</span>); </span><br><span class="line"><span class="title function_">alert</span>(obj <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">//true </span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>把字符串传给 Object 构造函数，就会创建 String 的实例；而传入<a href="https://www.zhihu.com/search?q=%E6%95%B0%E5%80%BC%E5%8F%82%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1464146126%7D">数值参数</a>会得到 Number 的实 例，传入<a href="https://www.zhihu.com/search?q=%E5%B8%83%E5%B0%94%E5%80%BC%E5%8F%82%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1464146126%7D">布尔值参数</a>就会得到 Boolean 的实例。<br>要注意的是，使用 new 调用基本包装类型的构造函数，与直接调用同名的<a href="https://www.zhihu.com/search?q=%E8%BD%AC%E5%9E%8B%E5%87%BD%E6%95%B0&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1464146126%7D">转型函数</a>是不一样的。 </p>
<p>例如：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="string">&quot;25&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> number = <span class="title class_">Number</span>(value); <span class="comment">//转型函数 </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> number); <span class="comment">//&quot;number&quot; </span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Number</span>(value); <span class="comment">//构造函数 </span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> obj); <span class="comment">//&quot;object&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在这个例子中，变量 number 中保存的是基本类型的值 25，而变量 <a href="https://www.zhihu.com/search?q=obj&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1464146126%7D">obj</a> 中保存的是 Number 的实 例。<br><strong>尽管我们不建议显式地创建基本包装类型的对象，但它们操作基本类型值的能力还是相当重要的。 而每个基本包装类型都提供了操作相应值的便捷方法。</strong></p>
<p>作者：Chess<br>链接：<a href="https://www.zhihu.com/question/420346414/answer/1464146126">https://www.zhihu.com/question/420346414/answer/1464146126</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。  </p>
</blockquote>
<hr>
<p>MDN中也有部分内容提到了这个特性：</p>
<blockquote>
<p>JavaScript data types and data structures<br>Programming languages all have built-in data structures, but these often differ from one language to another. This article attempts to list the built-in data structures available in JavaScript and what properties they have. These can be used to build other data structures.<br>The language overview offers a similar summary of the common data types, but with more comparisons to other languages.<br>Dynamic and weak typing<br>JavaScript is a dynamic language with dynamic types. Variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned (and re-assigned) values of all types:</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">42</span>; <span class="comment">// foo is now a number</span></span><br><span class="line">foo = <span class="string">&quot;bar&quot;</span>; <span class="comment">// foo is now a string</span></span><br><span class="line">foo = <span class="literal">true</span>; <span class="comment">// foo is now a boolean</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>JavaScript is also a weakly typed language, which means it allows implicit type conversion when an operation involves mismatched types, instead of throwing type errors.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">42</span>; <span class="comment">// foo is a number</span></span><br><span class="line"><span class="keyword">const</span> result = foo + <span class="string">&quot;1&quot;</span>; <span class="comment">// JavaScript coerces foo to a string, so it can be concatenated with the other operand</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 421</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>Implicit coercions is very convenient, but can be a potential footgun if developers didn’t intend to do the conversion, or intend to convert in the other direction (for example, string to number instead of number to string). For symbols and BigInts, JavaScript has intentionally disallowed certain implicit type conversions.</p>
<p>Primitive values<br>All types except <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects">Object</a> define <a href="https://developer.mozilla.org/en-US/docs/Glossary/Immutable">immutable</a> values represented directly at the lowest level of the language. We refer to values of these types as <em>primitive values</em>.<br>All primitive types, except <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null"><code>null</code></a>, can be tested by the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof"><code>typeof</code></a> operator. <code>typeof null</code> returns <code>&quot;object&quot;</code>, so one has to use <code>=== null</code> to test for <code>null</code>.<br>All primitive types, except <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null"><code>null</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>, have their corresponding object wrapper types, which provide useful methods for working with the primitive values. For example, the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a> object provides methods like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential"><code>toExponential()</code></a>. When a property is accessed on a primitive value, JavaScript automatically wraps the value into the corresponding wrapper object and accesses the property on the object instead. However, accessing a property on <code>null</code> or <code>undefined</code> throws a <code>TypeError</code> exception, which necessitates the introduction of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining">optional chaining</a> operator.</p>
</blockquote>
<table>
<thead>
<tr>
<th>Type</th>
<th><code>typeof</code> return value</th>
<th>Object wrapper</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#null_type">Null</a></td>
<td><code>&quot;object&quot;</code></td>
<td>N&#x2F;A</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type">Undefined</a></td>
<td><code>&quot;undefined&quot;</code></td>
<td>N&#x2F;A</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type">Boolean</a></td>
<td><code>&quot;boolean&quot;</code></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"><code>Boolean</code></a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type">Number</a></td>
<td><code>&quot;number&quot;</code></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#bigint_type">BigInt</a></td>
<td><code>&quot;bigint&quot;</code></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt"><code>BigInt</code></a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#string_type">String</a></td>
<td><code>&quot;string&quot;</code></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#symbol_type">Symbol</a></td>
<td><code>&quot;symbol&quot;</code></td>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a></td>
</tr>
</tbody></table>
<blockquote>
<p>The object wrapper classes’ reference pages contain more information about the methods and properties available for each type, as well as detailed descriptions for the semantics of the primitive types themselves.</p>
</blockquote>
<blockquote>
<p>动态和弱类型<br>JavaScript 是一种有着动态类型的动态语言。JavaScript 中的变量与任何特定值类型没有任何关联，并且任何变量都可以分配（重新分配）所有类型的值：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">42</span>; <span class="comment">// foo 现在是一个数值</span></span><br><span class="line">foo = <span class="string">&quot;bar&quot;</span>; <span class="comment">// foo 现在是一个字符串</span></span><br><span class="line">foo = <span class="literal">true</span>; <span class="comment">// foo 现在是一个布尔值</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>JavaScript 也是一个弱类型语言，这意味着当操作涉及不匹配的类型是否，它将允许隐式类型转换，而不是抛出一个错误。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">42</span>; <span class="comment">// foo is a number</span></span><br><span class="line"><span class="keyword">const</span> result = foo + <span class="string">&quot;1&quot;</span>; <span class="comment">// JavaScript coerces foo to a string, so it can be concatenated with the other operand</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 421</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>强制隐式转换是非常方便的，但是如果开发者不打算转换，或者打算向另一个方向转换（例如，字符串转数值而不是数值到字符串），则会存在潜在的隐患。对于 symbol 和 BigInt， JavaScript 总是不允许某些隐式类型转换。</p>
<p><strong>原始值</strong><br>除了 Object 以外，所有类型都定义了表示在语言最低层面的不可变值。我们将这些值称为_原始值_。<br>除了 <code>null</code>，所有原始类型都可以使用 <code>typeof</code>运算符测试。<code>typeof null</code> 返回 <code>&quot;object&quot;</code>，因此必须使用 <code>=== null</code> 来测试 <code>null</code>。<br>除了 <code>null</code> 和 <code>undefined</code>，所有原始类型都有它们相应的对象包装类型，这为处理原始值提供可用的方法。例如，<code>Number</code> 对象提供向 <code>toExponential()</code> 这样的方法。当在原始值上访问属性时，JavaScript 会自动将值包装到相应的包装对象中，并访问对象上的属性。然而，在 <code>null</code> 或 <code>undefined</code> 上访问属性时，会抛出 <code>TypeError</code> 异常，这需要采用可选链运算符。</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th><code>typeof</code> 返回值</th>
<th>对象包装器</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#null_%E7%B1%BB%E5%9E%8B">Null</a></td>
<td><code>&quot;object&quot;</code></td>
<td>N&#x2F;A</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#undefined_%E7%B1%BB%E5%9E%8B">Undefined</a></td>
<td><code>&quot;undefined&quot;</code></td>
<td>N&#x2F;A</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#boolean_%E7%B1%BB%E5%9E%8B">Boolean</a></td>
<td><code>&quot;boolean&quot;</code></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Boolean"><code>Boolean</code></a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#number_%E7%B1%BB%E5%9E%8B">Number</a></td>
<td><code>&quot;number&quot;</code></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number"><code>Number</code></a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#bigint_%E7%B1%BB%E5%9E%8B">BigInt</a></td>
<td><code>&quot;bigint&quot;</code></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt"><code>BigInt</code></a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#string_%E7%B1%BB%E5%9E%8B">String</a></td>
<td><code>&quot;string&quot;</code></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String"><code>String</code></a></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#symbol_%E7%B1%BB%E5%9E%8B">Symbol</a></td>
<td><code>&quot;symbol&quot;</code></td>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol"><code>Symbol</code></a></td>
</tr>
</tbody></table>
<blockquote>
<p>对象包装器类的参考页面包含关于每个类型可用方法和属性类型的更多用法，以及原始类型本身的详细描述。</p>
</blockquote>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>String，Number，Boolean类型不是对象，而是基本数据类型，但在读取这个基本类型的值的时候，JS引擎会将这些基础类型进行隐式类型转换，转换成它们相应的对象包装类型，而对象包装类型可以调用相关的属性和方法。</p>
<p>笔者的总结未必是准确的，了解详情还请仔细查看上文。</p>
<hr>
<h3 id="其他解释"><a href="#其他解释" class="headerlink" title="其他解释"></a>其他解释</h3><p>但W3C给出了一个与MDN完全不相关的回答。<br>笔者也无法判断W3C的解释是否合理或正确，但也将W3C的解释贴出来，如果有了解这方面的老师还请留下评论。</p>
<p>W3C的解释</p>
<blockquote>
<p><strong>所有程序设计语言最重要的特征之一是具有进行类型转换的能力。</strong><br><strong>ECMAScript 给开发者提供了大量简单的类型转换方法。</strong><br><strong>大部分类型具有进行简单转换的方法，还有几个全局方法可以用于更复杂的转换。无论哪种情况，在 ECMAScript 中，类型转换都是简短的一步操作。</strong><br><strong>转换成字符串</strong><br>ECMAScript 的 Boolean 值、数字和字符串的原始值的有趣之处在于它们是伪对象，这意味着它们实际上具有属性和方法。<br>例如，要获得字符串的长度，可以采用下面的代码：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(sColor.<span class="property">length</span>);	<span class="comment">//输出 &quot;3&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>尽管 “red” 是原始类型的字符串，它仍然具有属性 length，用于存放字符串的大小。<br>总而言之，3 种主要的原始类型 Boolean 值、数字和字符串都有 toString() 方法，可以把它们的值转换成字符串。<br>提示：您也许会问，“字符串还有 toString() 方法吗，这不是多余吗？”是的，的确如此，不过 ECMAScript 定义所有对象都有 toString() 方法，无论它是伪对象，还是真对象。因为 String 类型属于伪对象，所以它一定有 toString() 方法。<br>相关链接：<a href="https://www.w3school.com.cn/js/pro_js_typeconversion.asp">ECMAScript 类型转换</a><br><a href="https://www.w3school.com.cn/js/pro_js_typeconversion.asp">https://www.w3school.com.cn/js/pro_js_typeconversion.asp</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript对象相关笔记</title>
    <url>/2021/05/24/JavaScript%E5%AF%B9%E8%B1%A1%E7%9B%B8%E5%85%B3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h5 id="原生对象"><a href="#原生对象" class="headerlink" title="原生对象"></a>原生对象</h5><p><u><strong>ECMA-262</strong></u>把<strong>本地对象（native object）定义为 “ 独立于宿主环境的 ECMAScript 实现提供的对象”</strong></p>
<p>“ 本地对象 ” 包含哪些内容：</p>
<p>Object、Function、Array、String、Boolean、Number、 Date、RegExp、Error、EvalError、RangeError、ReferenceError、SyntaxError、TypeError、 URIError</p>
<p>由此可以看出，<strong>本地对象就是 ECMA-262 定义的类（引用类型）</strong></p>
<span id="more"></span>

<hr>
<h5 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h5><p>ECMA-262 把<strong>内置对象（ built-in object ）定义为“由 ECMAScript 实现提供的、独立于宿主环境的所有对象，在 ECMAScript 程序开始执行时出现”。</strong></p>
<p>这意味着开发者不必明 确实例化内置对象，它已被实例化了 </p>
<p>同样是“独立于宿主环境”。</p>
<p>根据定义我们似乎很难分清“内置对象”与“本地对象”的 区别。</p>
<p><strong>而ECMA-262 只定义了两个内置对象，即 Global 和 Math</strong>（ 它们也是本地对象， 根据定义，每个内置对象都是本地对象 )。<strong>如此就可以理解了。</strong></p>
<p>**内置对象是本地对象的一种 **</p>
<hr>
<h5 id="宿主对象"><a href="#宿主对象" class="headerlink" title="宿主对象"></a>宿主对象</h5><p>何为 “ 宿主对象 ” ？</p>
<p>主要在这个“宿主”的概念上，<strong>ECMAScript 中的 “ 宿主 ” 当然就是我 们网页的运行环境 ，即 “ 操作系统 ” 和 “ 浏览器 ”</strong></p>
<p><strong>所有非本地对象都是宿主对象（host object）</strong>，即由 ECMAScript 实现的宿主环境提供 的对象 。</p>
<p>所有的 BOM 和 DOM 都是宿主对象。因为其对于不同的 “ 宿主 ” 环境所展示的内容不同 。</p>
<p>其实说白了就是，<strong>ECMAScript 官方未定义的对象都属于宿主对象，因为其未定 义的对象大多数是自己通过 ECMAScript 程序创建的对象</strong></p>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><h5 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h5><p>JavaScript 中有八种数据类型。</p>
<p>有七种原始类型，因为它们的值只包含一种东西（字符串，数字或者其他）。</p>
<p>相反，对象则用来存储键值对和更复杂的实体。</p>
<p><strong>对象是具有一些特殊特性的关联数组。</strong></p>
<p>“普通对象（plain object）”，或者就叫对象。</p>
<p>JavaScript 中还有很多其他类型的对象：</p>
<ul>
<li><code>Array</code> 用于存储有序数据集合，</li>
<li><code>Date</code> 用于存储时间日期，</li>
<li><code>Error</code> 用于存储错误信息。</li>
<li>……等等。</li>
</ul>
<p>“Array 类型”或“Date 类型”，但其实它们并不是自身所属的类型，而是属于一个对象类型即 “object”。它们以不同的方式对 “object” 做了一些扩展。</p>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><h5 id="对象-object"><a href="#对象-object" class="headerlink" title="对象 (object)"></a>对象 (object)</h5><p>对象类型的成员。</p>
<p>注：对象是属性的集合，并有一个原型对象。原型可以是空值。</p>
<hr>
<h5 id="原生对象-1"><a href="#原生对象-1" class="headerlink" title="原生对象"></a>原生对象</h5><p> (native object)</p>
<p>ECMAScript 实现中，并非由宿主环境，而是完全由本规范定义其语义的对象。</p>
<p>注：标准的原生对象由本规范定义。一些原生对象是内置的，其他的可在 ECMAScript 程序执行过程中构建。</p>
<hr>
<h5 id="内置对象-1"><a href="#内置对象-1" class="headerlink" title="内置对象"></a>内置对象</h5><p>(built-in object)</p>
<p>由 ECMAScript 实现提供，独立于宿主环境的对象，ECMAScript 程序开始执行时就存在。</p>
<p>注：标准的内置对象由本规范定义，ECMAScript 实现可以指定和定义其他的。所有内置对象是原生对象。一个内置构造器 (built-in constructor) 是个内置对象，也是个构造器。</p>
<hr>
<h5 id="宿主对象-1"><a href="#宿主对象-1" class="headerlink" title="宿主对象"></a>宿主对象</h5><p> (host object)</p>
<p>由宿主环境提供的对象，用于完善 ECMAScript 执行环境。</p>
<p>注：任何对象，不是原生对象就是宿主对象。</p>
<hr>
<h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p><strong>Native Object</strong></p>
<p>JavaScript语言提供的不依赖于执行宿主的对象，其中一些是内建对象，如：Global、Math；一些是在脚本运行环境中创建来使用的，如：Array、Boolean、Date、Function、Number、Object、RegExp、Error。</p>
<hr>
<p><strong>Build-in Object</strong></p>
<p>JavaScript语言提供的不依赖于执行宿主的内建对象，如：Global、Math；内建对象都是Native Object。</p>
<hr>
<p><strong>Host Object</strong></p>
<p> JavaScript语言提供的任何依赖于宿主环境的对象，所有非Native Object的对象都是宿主对象，如：IE中的window，WScript中的wscript实例，任何用户创建的类。</p>
<hr>
<h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p><strong>JavaScript 标准内置对象或称全局的对象（global objects）</strong></p>
<p>不要和 <strong>全局对象（global object）</strong>混淆。</p>
<p>这里说的全局的对象是说<strong>在全局作用域里的对象</strong>，<strong>全局作用域包含了全局对象的属性，还有它可能继承来的属性。</strong></p>
<p><strong>JavaScript 标准内置对象的分类：</strong></p>
<p>\1. 值属性（Infinity、NaN、undefined、null 字面量、globalThis）这些全局属性返回一个简单值，而且这些值没有自己的属性和方法。</p>
<p>\2. 函数属性（eval()、uneval() 、isFinite()、isNaN()、parseFloat()、parseInt()、decodeURI()、decodeURIComponent()、encodeURI()、encodeURIComponent()、escape() 、unescape()）全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。</p>
<p>\3. 基本对象（Object、Function、Boolean、Symbol、Error、EvalError、InternalError、RangeError、ReferenceError、SyntaxError、TypeError、URIError）基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。</p>
<p>\4. 数字、数学和日期对象（Number、BigInt、Math、Date）用来表示数字、执行数学计算和日期的对象。</p>
<p>\5. 字符串和正则式对象（String、RegExp）用来表示和操作字符串的对象。</p>
<p>\6. 可索引的数组对象（Array、Int8Array、Uint8Array、Uint8ClampedArray、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array、Float64Array、BigInt64Array、BigUint64Array）这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。</p>
<p>\7. 使用键的集合对象（Map、Set、WeakMap、WeakSet）这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。</p>
<p>\8. 构化数据（ArrayBuffer、SharedArrayBuffer 、Atomics 、DataView、JSON）这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON （JavaScript Object Notation）编码的数据。</p>
<p>\9. 控制抽象对象（Promise、Generator、GeneratorFunction、AsyncFunction ）</p>
<p>\10. 反射（Reflect、Proxy）</p>
<p>\11. 国际化（Intl、Intl.Collator、Intl.DateTimeFormat、Intl.ListFormat、Intl.NumberFormat、Intl.PluralRules、Intl.RelativeTimeFormat、Intl.Locale）为了支持多语言处理而加入ECMAScript的对象。</p>
<p>\12. WebAssembly（WebAssembly、WebAssembly.Module、WebAssembly.Instance、WebAssembly.Memory、WebAssembly.Table、WebAssembly.CompileError、WebAssembly.LinkError、WebAssembly.RuntimeError）</p>
<p>\13. 其他（arguments）</p>
<h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p>编程语言中预先定义的函数。</p>
<p>具体：嵌入到主调函数中的函数称为内置函数，又称内嵌函数。 作用是提高程序的执行效率，大多编程语言都有自己的内置函数，如javascript内置函数等。 内置函数的存在极大的提升了程序员的效率和程序的阅读。</p>
<h2 id="部分网页"><a href="#部分网页" class="headerlink" title="部分网页 :"></a>部分网页 :</h2><p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects#%E6%A0%87%E5%87%86%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB">MDN-JavaScript标准内置对象</a></strong></p>
<p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Details_of_the_Object_Model">MDN-对象模型</a></strong></p>
<p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Working_with_Objects">MDN-对象</a></strong></p>
<p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Keyed_collections">MDN-带键的集合</a></strong></p>
<p><strong><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Global_object">MDN-全局对象</a></strong></p>
<p><strong><a href="https://read262.jedfox.com/ecmascript-standard-built-in-objects">ECMAScript Standard Built-in Objects</a></strong></p>
<p><strong><a href="https://www.tutorialspoint.com/javascript/javascript_builtin_functions.htm">JavaScript Built-in Functions</a></strong></p>
<p><strong><a href="https://velocidadescape.com/js/standard-built-in-objects-javascript/">Standard built-in objects in JavaScript</a></strong></p>
<p><strong><a href="https://devdocs.io/javascript/">JavaScript reference</a></strong></p>
<p><strong><a href="https://baldur.gitbook.io/js/javascript-objects/introducing-javascript-objects/standard-built-in-methods-to-work-with-arrays">Standard built-in methods to work with Arrays</a></strong></p>
<p><strong><a href="https://dev.to/elpepebenitez/built-in-methods-in-javascript-4bll">Built-in Methods in Javascript</a></strong></p>
<p><strong><a href="https://docs.microsoft.com/en-us/office/dev/scripts/develop/javascript-objects">Use built-in JavaScript objects in Office Scripts</a></strong></p>
<p><strong><a href="https://262.ecma-international.org/11.0/">ECMA-262, 11th edition, June 2020 ECMAScript® 2020 Language Specification</a></strong></p>
<blockquote>
<p><a href="https://blog.bitsrc.io/discovering-javascript-three-objects-new-developers-must-know-fade54355383">https://blog.bitsrc.io/discovering-javascript-three-objects-new-developers-must-know-fade54355383</a></p>
</blockquote>
<p><strong><a href="https://rules.sonarsource.com/javascript/RSPEC-2424">JavaScript static code analysis</a></strong></p>
<p><strong><a href="https://nodejs.org/api/globals.html">Node.js v16.6.1 documentation</a></strong></p>
<p><strong><a href="https://www.cnblogs.com/sufei-duoduo/p/9512560.html">标准对象分类Value Properties</a></strong></p>
<blockquote>
<p><a href="https://www.w3schools.com/js/js_object_definition.asp">https://www.w3schools.com/js/js_object_definition.asp</a></p>
</blockquote>
<blockquote>
<p><a href="https://medium.com/nerd-for-tech/understanding-objects-and-prototypes-in-javascript-d847baa50f9a">https://medium.com/nerd-for-tech/understanding-objects-and-prototypes-in-javascript-d847baa50f9a</a></p>
</blockquote>
<p><strong><a href="https://javascript.info/global-object">The Modern JavaScript Tutorial</a></strong></p>
<p><strong><a href="https://academind.com/tutorials/javascript-functions-are-objects/">JS Functions Are Objects</a></strong></p>
<p><strong><a href="https://ecmascript2020言語仕様.com/">ECMAScript2020言語仕様　私的日本語訳</a></strong></p>
<p><strong><a href="https://www.infoworld.com/article/2077150/using-javascript-s-built-in-objects.html">Using JavaScript’s built-in objects</a></strong></p>
<p><a href="https://www.ques10.com/p/29073/explain-built-in-objects-of-javascript/"><strong>Explain built-in objects of JavaScript.</strong></a></p>
<p><strong><a href="https://www.tutorialride.com/javascript/javascript-built-in-objects.htm">JavaScript Built-in Objects</a></strong></p>
<blockquote>
<p><a href="https://ithelp.ithome.com.tw/m/articles/10193146">https://ithelp.ithome.com.tw/m/articles/10193146</a></p>
</blockquote>
<p><strong><a href="https://way2tutorial.com/javascript/javascript-built-in-objects.php">JavaScript Built-in Objects</a></strong></p>
<p><strong><a href="https://docs.microsoft.com/en-us/previous-versions/iis/6.0-sdk/ms524716(v=vs.90)">ASP Built-in Objects</a></strong></p>
<p><strong><a href="https://stackoverflow.com/questions/45308671/what-is-a-built-in-object-in-javascript">What is a built in object in Javascript? </a></strong></p>
<p><strong><a href="https://docs.microfocus.com/SM/9.60/Codeless/Content/programming/javascript/wp/Built_in_objects_and_functions.htm">Built-in objects and functions</a></strong></p>
<p><strong><a href="https://www.brainkart.com/article/Built----In-Objects---JavaScript-(JS)_10246/">Built –In Objects - JavaScript (JS)</a></strong></p>
<p><strong><a href="https://www.htmlgoodies.com/javascript/using-built-in-javascript-code-with-javascript-objects/">Using Built-in JavaScript Code with JavaScript Objects</a></strong></p>
<p><strong><a href="https://eggjs.org/en/basics/objects.html">Frameork Built-in Objects</a></strong></p>
<blockquote>
<p><a href="https://www.quora.com/What-are-built-in-objects-in-python">https://www.quora.com/What-are-built-in-objects-in-python</a></p>
</blockquote>
<blockquote>
<p><a href="https://medium.com/nerd-for-tech/understanding-objects-and-prototypes-in-javascript-d847baa50f9a">https://medium.com/nerd-for-tech/understanding-objects-and-prototypes-in-javascript-d847baa50f9a</a></p>
</blockquote>
<p><strong><a href="https://www.startertutorials.com/ajwt/built-objects-javascript.html">Built in objects in javascript</a></strong></p>
<p><strong><a href="https://discuss.codecademy.com/t/faq-advanced-objects-built-in-object-methods/372315">FAQ: Advanced Objects - Built-in Object Methods</a></strong></p>
<p><strong><a href="https://rdrr.io/r/base/builtins.html">builtins: Returns the Names of All Built-in Objects</a></strong></p>
<p><strong><a href="https://stat.ethz.ch/R-manual/R-patched/library/base/html/builtins.html">Returns the Names of All Built-in Objects</a></strong></p>
<p><strong><a href="https://support.smartbear.com/testcomplete/docs/reference/program-objects/builtin/index.html">List of Built-In Routines</a></strong></p>
<blockquote>
<p><a href="http://google.com/search?sa=N&q=What+are+built-in+objects?&ved=2ahUKEwjGnMzGx5nyAhXDdd4KHajuDgEQzmd6BAgpEAU&biw=360&bih=640&dpr=3#ip=1">http://google.com/search?sa=N&amp;q=What+are+built-in+objects%3F&amp;ved=2ahUKEwjGnMzGx5nyAhXDdd4KHajuDgEQzmd6BAgpEAU&amp;biw=360&amp;bih=640&amp;dpr=3#ip=1</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>/2022/02/24/Java%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>TIOBE 编程语言排行榜</p>
<p>Hadoop  分布式系统基础架构</p>
<p><a href="https://hadoop.apache.org/">Apache Hadoop</a></p>
<p><a href="https://www.oracle.com/index.html">ORALE ( 甲骨文 )</a></p>
<span id="more"></span>

<h4 id="IDE-集成开发环境"><a href="#IDE-集成开发环境" class="headerlink" title="IDE(集成开发环境)"></a><a href="https://baike.baidu.com/item/%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/298524?fromtitle=IDE&fromid=8232086&fr=aladdin">IDE(集成开发环境)</a></h4><blockquote>
<p>MyElipse , Eclipse , IDEA</p>
<p>(MyEclipse 2017 stable)</p>
</blockquote>
<h5 id="MyElipse"><a href="#MyElipse" class="headerlink" title="MyElipse"></a>MyElipse</h5><h5 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a><a href="https://www.eclipse.org/downloads/">Eclipse</a></h5><h6 id="汉化过程"><a href="#汉化过程" class="headerlink" title="汉化过程 :"></a>汉化过程 :</h6><p>依次点击 : <code>help</code> , <code>Install New Software</code>, <code>Add</code> , <code>Location</code> </p>
<p>输入：<a href="https://download.eclipse.org/technology/babel/update-site/latest/">https://download.eclipse.org/technology/babel/update-site/latest/</a></p>
<p>选择<code>Babel Language Packs in Chinese (Simplified)</code> 后点击<code>next</code> , 成功后eclipse自动重启</p>
<h6 id="解除汉化过程"><a href="#解除汉化过程" class="headerlink" title="解除汉化过程 :"></a>解除汉化过程 :</h6><p>找到eclipse根目录 , 找到<code>eclipse.ini</code>文件右键编辑 , 在最后输入</p>
<p><code>-Duser.language=en</code>保存退出 </p>
<p>右键<code>eclipse.exe</code>发送到桌面快捷方式 , 右键选择属性 , 在目标最后输入<code> ln zh</code>点击确定</p>
<h5 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a><a href="https://www.jetbrains.com/idea/">IDEA</a></h5><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><h4 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h4><blockquote>
<p>目前版本JDK8</p>
<p>包含JRE和JVM</p>
<p>Java开发需下载完整JDK , 只运行Java只需下载JRE</p>
</blockquote>
<p><a href="https://baike.baidu.com/item/jdk/1011?fr=aladdin">JDK  Java语言的软件开发工具包</a></p>
<p><a href="https://baike.baidu.com/item/JRE/2902404?fr=aladdin">JRE  Java运行环境</a></p>
<p><a href="https://baike.baidu.com/item/JVM/2902369?fr=aladdin">JVM  Java虚拟机</a></p>
<p>Java SE(基础核心) : </p>
<ul>
<li>面向对象</li>
<li>API</li>
<li>JVM</li>
</ul>
<p>Java ME : </p>
<ul>
<li>移动设备</li>
<li>游戏</li>
<li>通信</li>
</ul>
<p>Java EE : </p>
<ul>
<li>JSP</li>
<li>EJB</li>
<li>服务</li>
</ul>
<p>JDK文件夹中部分文件 : </p>
<p>COPYRIGHT  版本;版权</p>
<p>LICENSE  许可证</p>
<p>release  发布版本</p>
<p>bin文件夹  : 包含JDK开发工具的可执行性文件</p>
<p>lib  类库</p>
<p>include  C语言头文件</p>
<p>src.zip  java源代码</p>
<h5 id="path配置过程"><a href="#path配置过程" class="headerlink" title="path配置过程"></a>path配置过程</h5><p>下载JDK后需配置path ( win10系统 )</p>
<p>复制JDK文件中<code>bin</code>的文件位置</p>
<p>依次打开 : 控制面板 , 系统 , 高级系统设置 , 高级 , 环境变量 , 选择系统变量中的<code>Path</code>点击编辑 , 将文件位置粘贴保存 , 并上移至第一行</p>
<p>参考文章 : <a href="https://thinkwon.blog.csdn.net/article/details/94353907">JDK安装与环境变量配置</a></p>
<h5 id="查看JDK是否配置成功"><a href="#查看JDK是否配置成功" class="headerlink" title="查看JDK是否配置成功"></a>查看JDK是否配置成功</h5><p>打开windows命令处理程序 ( win+R出入cmd )</p>
<p>输入 : </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>显示版本即为配置成功</p>
<h2 id="反编译工具"><a href="#反编译工具" class="headerlink" title="反编译工具"></a>反编译工具</h2><h4 id="jad命令"><a href="#jad命令" class="headerlink" title="jad命令"></a>jad命令</h4><p>例 : </p>
<p><code>Jad -s java Test.class</code></p>
<p><code>Jad -s java -8 Test.class</code>(含中文时)</p>
<h4 id="FrontEndPlus"><a href="#FrontEndPlus" class="headerlink" title="FrontEndPlus"></a>FrontEndPlus</h4><blockquote>
<p>图形化工具 , jad内核</p>
<p>需要设置 : Configuration  ,  Decompile Options , 选择convert Unicode strings into ANSI string (anti) , Update and Close</p>
</blockquote>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java对象和类</title>
    <url>/2022/03/04/Java%E5%AF%B9%E8%B1%A1%E5%92%8C%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="对象与类"><a href="#对象与类" class="headerlink" title="对象与类"></a>对象与类</h1><h2 id="面向对象程序设计概述"><a href="#面向对象程序设计概述" class="headerlink" title="面向对象程序设计概述"></a>面向对象程序设计概述</h2><p>传统的结构化程序设计通过设计一系列的过程（即算法）来求解问题。面向对象程序设计(object-oriented programming , OOP) 将数据放在第一位 , 然后再考虑操作数据的算法 , 更加适合解决规模较大的问题 .</p>
<span id="more"></span>

<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>由类构造（construct）对象的过程称为创建类的实例。<br>封装（encapsulation有时称为数据隐藏）是处理对象的一个重要概念。从形式上看，封装就是将数据和行为组合在一个包中，并对对象的使用者隐藏具体的实现方式。对象中的数据称为实例字段，操作数据的过程称为方法。</p>
<p>OOP可以通过扩展其他类来构建新类。在扩展一个已有的类时，这个扩展后的新类具有被扩展的类的全部属性和方法。通过扩展一个类来建立另外一个类的过程称为继承。</p>
<p>类包含的实例字段通常属于某个类类型 .</p>
<h4 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h4><ul>
<li>依赖(uses-a)</li>
<li>聚合(has-a)</li>
<li>继承(is-a)</li>
</ul>
<p>依赖：一个类的方法 使用或者操纵另一个类的对象<br>聚合：类A的对象包含类B的对象<br>继承：一个更特殊的类与一个更一般的类之间的关系</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对象中的数据称为实例字段 , 操作数据的过程称为方法 . 作为一个类的实例 , 特定对象都有一组特定的实例字段值 . 这些值的集合就是这个对象的当前状态 . </p>
<p>封装(数据隐藏  encapsulation)是处理对象的一个重要概念 </p>
<p>对象的状态：对着中保存着的描述当前状况的信息。对象的状态并不能完全描述一个对象，对象状态的改变必须通过调用方法实现。对象的状态影响它的行为。</p>
<p>所有的Java对象都是在堆中构造的 .</p>
<h2 id="预定义类"><a href="#预定义类" class="headerlink" title="预定义类"></a>预定义类</h2><h3 id="对象与对象变量"><a href="#对象与对象变量" class="headerlink" title="对象与对象变量"></a>对象与对象变量</h3><p>构造对象 : </p>
<p>使用构造器(或构造函数)构造新实例 : 构造器的名字应该与类名相同 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造一个Date对象需要在构造器前面加上 new 操作符 : </span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//可以将对象放在一个变量中</span></span><br><span class="line"><span class="comment">//表达式 new Date()构造了一个Date类型的对象,它的值是对新创建对象的一个引用,这个引用储存在变量deadLine中</span></span><br><span class="line"><span class="type">Date</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以将这个对象传递给一个方法</span></span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="comment">//也可以对刚创建的对象应用一个方法 </span></span><br><span class="line"><span class="comment">//Date类中有一个 toString 方法,返回日期的字符串描述</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>().toString();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>构造对象变量 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date deadLine;</span><br></pre></td></tr></table></figure>

<p>定义了一个对象变量 <code>deadLine</code>  , 它可以引用 <code>Date</code> 类型的对象 , 但变量 <code>deadLine</code> 不是一个对象 , 也没有引用任何对象 , 此时还不能在这个变量上使用任何 <code>Date</code> 方法 .</p>
<p>变量对象并没有实际包含一个对象 , 它只是引用一个对象 . 任何对象变量的值都是对储存在另外一个地方的某个对象的引用 .</p>
<p>可以显示地将对象变量设置为 <code>null</code> , 指示这个对象变量目前没有引用任何对象 .</p>
<p>必须首先初始化变量 <code>deadLine</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以引用一个新构造的对象</span></span><br><span class="line">deadLine = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="comment">//可以设置这个变量让它引用一个已有的对象 :</span></span><br><span class="line">deadLine = birthday;</span><br></pre></td></tr></table></figure>

<h3 id="更改器方法与访问器方法-待整理"><a href="#更改器方法与访问器方法-待整理" class="headerlink" title="更改器方法与访问器方法(待整理)"></a>更改器方法与访问器方法(待整理)</h3><p>更改器方法<br>访问器方法：访问器方法访问器方法 (字段访问器 : 只返回实例字段值)</p>
<h2 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h2><h3 id="Employee类"><a href="#Employee类" class="headerlink" title="Employee类"></a>Employee类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>&#123;</span><br><span class="line">    <span class="comment">//field1(字段)</span></span><br><span class="line">    <span class="comment">//fiedl2</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//constructor1(构造函数)</span></span><br><span class="line">    <span class="comment">//constructor2</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//method1(方法)</span></span><br><span class="line">    <span class="comment">//method2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="构造器-待整理"><a href="#构造器-待整理" class="headerlink" title="构造器(待整理)"></a>构造器(待整理)</h3><p>构造器总是结合 new 运算符来调用 . 不能对一个已经存在的对象调用构造器来达到重新设置实例字段的目的 .</p>
<h3 id="null引用-待整理"><a href="#null引用-待整理" class="headerlink" title="null引用(待整理)"></a>null引用(待整理)</h3><p>一个对象变量包含一个对象的引用 , 或者包含一个特殊值null , 后者表示没有引用任何对象 .</p>
<p>如果对null值应用一个方法 , 会产生一个  <code>NullPointerException</code> (空指针)异常 .</p>
<p>解决办法 : </p>
<ol>
<li><p>把null参数转换为一个适当的非null值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (n--<span class="literal">null</span>) name = <span class="string">&quot;unknown&quot;</span>;<span class="keyword">else</span> name = n;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拒绝null参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Employee(String n,double s, int year,int month,int day)</span><br><span class="line">&#123;</span><br><span class="line">Objects.requireNonNull(n,&quot;The name cannot be null&quot;);</span><br><span class="line">name=&quot;n&quot;;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="隐式参数与显示参数-待整理"><a href="#隐式参数与显示参数-待整理" class="headerlink" title="隐式参数与显示参数(待整理)"></a>隐式参数与显示参数(待整理)</h3><p>隐式参数又称为方法调用的目标或者接收者</p>
<h3 id="封装-待整理"><a href="#封装-待整理" class="headerlink" title="封装(待整理)"></a>封装(待整理)</h3><h3 id="私有方法-待整理"><a href="#私有方法-待整理" class="headerlink" title="私有方法(待整理)"></a>私有方法(待整理)</h3><p>public  : 任何类的任何方法都可以用这些方法</p>
<p>private  : 确保只有Employee类自身的方法能够访问这些实例字段 , 而其他类的方法不能够读写这些字段 .</p>
<h3 id="final实例字段-待整理"><a href="#final实例字段-待整理" class="headerlink" title="final实例字段(待整理)"></a>final实例字段(待整理)</h3><p>可以将实例字段定义为final . 这样的字段必须在构造对象时初始化</p>
<p>final 修饰符对于基本类型或者不可变类的字段尤其有用(如果类中的所有方法都不会改变其对象 , 这样的类就是不可变的类)</p>
<p>final 关键字只是表示储存在 evaluations 变量中的对象引用不会再指示另一个不同的<code>StringBuilder</code>对象</p>
<h2 id="静态字段与静态方法-待整理"><a href="#静态字段与静态方法-待整理" class="headerlink" title="静态字段与静态方法(待整理)"></a>静态字段与静态方法(待整理)</h2><h3 id="静态字段-类字段"><a href="#静态字段-类字段" class="headerlink" title="静态字段(类字段)"></a>静态字段(类字段)</h3><p>定义为 <code>static</code> 的字段 , 每个类只有一个</p>
<h3 id="非静态字段-待整理"><a href="#非静态字段-待整理" class="headerlink" title="非静态字段(待整理)"></a>非静态字段(待整理)</h3><p>每个对象都有自己的一个副本</p>
<h3 id="静态常量-待整理"><a href="#静态常量-待整理" class="headerlink" title="静态常量(待整理)"></a>静态常量(待整理)</h3><h3 id="静态方法-待整理"><a href="#静态方法-待整理" class="headerlink" title="静态方法(待整理)"></a>静态方法(待整理)</h3><p>不在对象上执行的方法 , 没有隐式参数 , 没有this参数的方法</p>
<h3 id="工厂方法-待整理"><a href="#工厂方法-待整理" class="headerlink" title="工厂方法(待整理)"></a>工厂方法(待整理)</h3><p>静态工厂方法构造对象</p>
<h3 id="main-待整理"><a href="#main-待整理" class="headerlink" title="main(待整理)"></a>main(待整理)</h3><h2 id="方法参数-待整理"><a href="#方法参数-待整理" class="headerlink" title="方法参数(待整理)"></a>方法参数(待整理)</h2><h2 id="对象构造"><a href="#对象构造" class="headerlink" title="对象构造"></a>对象构造</h2><h3 id="重载-待整理"><a href="#重载-待整理" class="headerlink" title="重载(待整理)"></a>重载(待整理)</h3><p>多个方法有不同的名字 , 不同的参数 , 便出现了重载 . 编译器必须挑选出具体的调用哪个方法 . 它用各个方法首部中的参数类型与特定方法调用中所使用的值类型进行匹配 , 来选出正确的方法 . </p>
<p>查找匹配的过程被称为重载解析 .</p>
<h3 id="显式字段初始化-待整理"><a href="#显式字段初始化-待整理" class="headerlink" title="显式字段初始化(待整理)"></a>显式字段初始化(待整理)</h3><h3 id="默认字段初始化-待整理"><a href="#默认字段初始化-待整理" class="headerlink" title="默认字段初始化(待整理)"></a>默认字段初始化(待整理)</h3><p>如果在构造器中中没有显式地为字段设置初值 , 会被自动地赋为默认值 : 数值为 0 , 布尔值为 false , 对象引用为 null </p>
<h3 id="初始化块-待整理"><a href="#初始化块-待整理" class="headerlink" title="初始化块(待整理)"></a>初始化块(待整理)</h3><h3 id="无参数的构造器-待整理"><a href="#无参数的构造器-待整理" class="headerlink" title="无参数的构造器(待整理)"></a>无参数的构造器(待整理)</h3><p>由无参数的构造器创建对象时 , 对象的状态会设置为适当的默认值 .</p>
<h3 id="有参数的构造器-待整理"><a href="#有参数的构造器-待整理" class="headerlink" title="有参数的构造器(待整理)"></a>有参数的构造器(待整理)</h3><h3 id="调用另一个构造器-this关键字-待整理"><a href="#调用另一个构造器-this关键字-待整理" class="headerlink" title="调用另一个构造器(this关键字)(待整理)"></a>调用另一个构造器(this关键字)(待整理)</h3><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="包命名"><a href="#包命名" class="headerlink" title="包命名"></a>包命名</h3><p>使用包的主要原因是确保类名的唯一性</p>
<h3 id="类的导入"><a href="#类的导入" class="headerlink" title="类的导入"></a>类的导入</h3><p>一个类可以使用所属包中的所有类 , 以及其他包中的公共类 .</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.使用完全限定名</span></span><br><span class="line">java.time.<span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> java.time.LocalDate.new();</span><br><span class="line"><span class="comment">//2.使用 import 语句导入一个特定的类或整个包</span></span><br><span class="line"><span class="comment">//只能使用*导入一个包</span></span><br><span class="line"><span class="keyword">import</span> java.time.*;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br></pre></td></tr></table></figure>



<h3 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h3><p>有一种 import 语句允许导入静态方法和静态字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例如在源文件顶部添加一条指令 :</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.*;</span><br><span class="line"><span class="comment">//就可以使用System类的静态方法和静态字段而不必加类名前缀</span></span><br><span class="line">out.println(<span class="string">&quot;Goodbye,World!&quot;</span>);</span><br><span class="line">exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//还可以导入特定的方法或字段</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.System.out;</span><br></pre></td></tr></table></figure>



<h3 id="包访问"><a href="#包访问" class="headerlink" title="包访问"></a>包访问</h3><p>标记为 public 的部分可以由任意类使用 , 标记为 private 的部分只能由定义他们的类使用 . 如果没有指定 public 和 private , 这个部分(类,方法或变量) 可以被同一个包中的所有方法访问 .</p>
<h2 id="JAR文件-待整理"><a href="#JAR文件-待整理" class="headerlink" title="JAR文件(待整理)"></a>JAR文件(待整理)</h2><h2 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h2><p><code>javadoc</code>  由源文件生成一个HTML文档 , 在源代码中加以特殊界定符 <code>/**</code> 开始的注释</p>
<p>每个 <code>/**...*/</code> 文档注释包含标记以及之后紧跟着的自由格式文本 . 自由格式文本的第一句应该是一个概要性的句子</p>
<p>标记以 <code>@</code> 开始</p>
<h3 id="类注释"><a href="#类注释" class="headerlink" title="类注释"></a>类注释</h3><p>类注释必须放在 import 语句之后 , 类定义之前</p>
<h3 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h3><p>方法注释必须放在所描述的方法之前</p>
<p>除了通用标记外 , 还可以使用 :</p>
<p>这个标记将给当前方法的 “ parameters “ (参数) 部分添加一个条目 . 这个描述可以占很多行 , 并且可以使用HTML标记 . 一个方法的所有的 <code>@param</code> 标记必须放在一起</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@param</span> variable description</span><br></pre></td></tr></table></figure>

<h3 id="字段注释-待整理"><a href="#字段注释-待整理" class="headerlink" title="字段注释(待整理)"></a>字段注释(待整理)</h3><h3 id="通用注释"><a href="#通用注释" class="headerlink" title="通用注释"></a>通用注释</h3><h3 id="包注释"><a href="#包注释" class="headerlink" title="包注释"></a>包注释</h3><h3 id="注释抽取"><a href="#注释抽取" class="headerlink" title="注释抽取"></a>注释抽取</h3>]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础语法</title>
    <url>/2022/03/03/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><blockquote>
<p><strong>软件对象也由状态和相关行为组成。</strong></p>
<p><strong>对象将其状态存储在字段（某些编程语言中的变量）中，并通过方法（某些编程语言中的函数）公开其行为。</strong></p>
<p>字段<code>cadence</code>、<code>speed</code>和<code>gear</code>表示对象的状态，方法（<code>changeCadence</code>、<code>changeGear</code>等<code>speedUp</code>）定义其与外部世界的交互</p>
<p>方法对对象的内部状态进行操作，并作为对象到对象通信的主要机制。隐藏内部状态并要求通过对象的方法执行所有交互被称为<em>数据封装</em>——面向对象编程的基本原则。</p>
<p>将代码捆绑到单个软件对象中提供了许多好处，包括：</p>
<ol>
<li>模块化：一个对象的源代码可以独立于其他对象的源代码编写和维护。一旦创建，对象可以很容易地在系统内部传递。</li>
<li>信息隐藏：通过仅与对象的方法交互，其内部实现的细节对外界保持隐藏。</li>
<li>代码重用：如果一个对象已经存在（可能由另一个软件开发人员编写），您可以在您的程序中使用该对象。这允许专家实现&#x2F;测试&#x2F;调试复杂的、特定于任务的对象，然后您可以信任这些对象在您自己的代码中运行。</li>
<li>可插入性和易于调试：如果某个特定对象出现问题，您可以简单地将其从应用程序中删除，然后插入一个不同的对象作为替代。这类似于解决现实世界中的机械问题。如果螺栓断裂，则更换<em>它</em>，而不是整台机器。</li>
</ol>
</blockquote>
<span id="more"></span>

<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><blockquote>
<p>在 Java 编程语言中，每个类都可以有一个直接的超类，并且每个超类都可以有无限数量的<em>子类</em></p>
</blockquote>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><blockquote>
<p>对象通过它们公开的方法来定义它们与外部世界的交互</p>
<p>方法形成对象与外界的<em>接口</em></p>
<p>在其最常见的形式中 , 接口是一组具有空主体的相关方法</p>
<p>实现一个接口可以让一个类对它承诺提供的行为更加正式。接口在类和外部世界之间形成了一个契约，并且这个契约在编译时由编译器强制执行。如果您的类声称实现了一个接口，则该接口定义的所有方法都必须出现在其源代码中，然后该类才能成功编译。</p>
<p>(要实际编译<code>ACMEBicycle</code>该类，您需要将<code>public</code>关键字添加到已实现接口方法的开头。)</p>
</blockquote>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><blockquote>
<p>包是组织一组相关类和接口的命名空间</p>
<p>Java 平台提供了一个庞大的类库（一组包），适合在您自己的应用程序中使用。这个库被称为“应用程序编程接口”，简称“API”。它的包代表最常与通用编程相关的任务。</p>
</blockquote>
<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><blockquote>
<p>给包,类,方法,变量起名字的符号</p>
<p>标识符由字母、数字、下划线、美元符号组成</p>
<p>包名：全部小写，多级包用.隔开。<br>类、接口：一个单词首字母大写，多个单词每个单词的首字母大写。<br>方法和变量：一个单词首字母小写，多个单词从第二个单词开始每个单词的首字母大写<br>常量：如果是一个单词,所有字母大写，如果是多个单词,所有的单词大写,用下划线区分每个单词<br>项目名：全部用小写字母，多个单词之间用横杆-分割</p>
</blockquote>
<h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>private<br>访问控制修饰符，在同一类内可见<br>protected<br>访问控制侬饰符，对同一包内的类和所有子类可见<br>public<br>访问控制修饰符，对所有类可见</p>
<h3 id="类、方法和变量修饰符"><a href="#类、方法和变量修饰符" class="headerlink" title="类、方法和变量修饰符"></a>类、方法和变量修饰符</h3><p>abstract<br>表明类或者成员方法具有抽象展性<br>class<br>声明一个类<br>enum<br>枚举(在J2SE 5.0中添加)<br>extends<br>表明一个类型是另一个类型的子类型<br>final<br>用来说明最终属性<br>implements<br>表明一个类实现接口<br>interface<br>接口<br>native<br>原生方法(非Java实现)<br>new<br>用来创建新实例对象<br>static<br>表明具有静态同性<br>strictfp<br>用于很制浮点计其的精度和舍入(在J2SE 1.2中添加)<br>synchronized<br>表明一段代码需要同步执行<br>transient<br>声明不用序列化的成员域<br>volatile<br>表明两个或音多个变量必须同步地发生变化</p>
<h3 id="程序控制语句"><a href="#程序控制语句" class="headerlink" title="程序控制语句"></a>程序控制语句</h3><p>break<br>用于结束当前循环体中的执行<br>case<br>用在switch语句之中,表示其中的一个分支<br>continue<br>用于在当前循环体结束时恢复程序执行<br>default<br>默认，例如，用在switch语句中，表明一个默认的分支<br>do<br>用在do-while循环结构中<br>else<br>用在条件语句中，表明当条件不成立时的分支<br>for<br>一种循环结构的引导词<br>if<br>条件语句的引导词<br>instanceof<br>用来测试一个对兔是管是指定类型的实例对象</p>
<p>return<br>用于完成方法的执行。返回给调用者一个方法定义返回值<br>switch<br>分支语句结构的引导词<br>while<br>用于创建一个while循环</p>
<h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>assert<br>断言，用来进行程序调试(在J2SE14中添加)<br>catch<br>用在异常处理中，用来捕捉异常<br>finally<br>用来声明处理异常中肯定会被执行到的语句块<br>throw<br>抛出一个异常<br>throws<br>在方法声明中用于搭定在方法中未处理哪些异常</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>try<br>定义具有异常处理的语句块</p>
<p>包相关</p>
<p>import<br>表明引入要访问搭定的类或包<br>package<br>包</p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>boolean<br>基本数据类型之一，布尔类型<br>byte<br>基本数据类型之一，字节类型<br>char<br>基本数据类型之一，字符类型<br>double<br>基本数据类型之一，双精度浮点数类型<br>float<br>基本数据类型之一，单精度浮点数类型<br>int<br>基本数据类型之一，整数类型<br>long<br>基本数据类型之一，长整数类型<br>short<br>基本数据类型之一.短整数类型</p>
<h3 id="变量引用"><a href="#变量引用" class="headerlink" title="变量引用"></a>变量引用</h3><p>super<br>当前对象的父类型的引用或音父类型的构造方法<br>this<br>指向当前实例对象的引用<br>void<br>用于声明方法不返回任何值</p>
<h3 id="保留关键字"><a href="#保留关键字" class="headerlink" title="保留关键字"></a>保留关键字</h3><p>goto<br>保留关键享，没有具体含义<br>const<br>保留关键享，没有具体含义</p>
<h6 id="换行输出"><a href="#换行输出" class="headerlink" title="换行输出 :"></a>换行输出 :</h6><p><code>System.out.println(&quot;Hello World&quot;);</code>或<code>System.out.print(&quot;Hello\nWord&quot;)</code></p>
<p><code>System.out.print(&quot;Hello\tWord&quot;)</code></p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *多</span></span><br><span class="line"><span class="comment"> *行</span></span><br><span class="line"><span class="comment"> *注</span></span><br><span class="line"><span class="comment"> *释</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**JavaDoc注释*/</span></span><br></pre></td></tr></table></figure>



<h2 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h2><h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><ul>
<li><code>; </code>分号 用来终止一个语句</li>
<li><code>&#123;&#125; </code>花括号、大括号 用来包括自动初始化的数组的值，也用来定义程序块、类、方法以及局部范围</li>
<li><code>[]</code>方括号、中括号 用来声明数组的类型，也用来表示撤消对数组值的引用</li>
<li><code>,</code> 逗号 在变量声明中，区分变量说明的各个变量。在for控制语句中，用来将圆括号内的语句连接起来</li>
<li><code>.</code> 原点 用来将软件包的名字与它的子包或类分隔。也用来将引用变量与变量或方法分隔</li>
<li><code>()</code> 圆括号 在定义和调用方法时用来容纳参数表。在控制语句或强制类型转换组成的表达式中用来表示执行或计算的优先权</li>
</ul>
<h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><blockquote>
</blockquote>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><blockquote>
<p>除了赋值运算符之外的所有二元运算符都是从左到右计算的</p>
<p>赋值运算符从右到左求值</p>
</blockquote>
<h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><p><code>+</code>  <code>-</code>  <code>*</code>  <code>/</code>  <code>%</code>  <code>++</code>  <code>--</code>  </p>
<ul>
<li><p>1.<code>/ </code>左右两端的类型需要一致</p>
</li>
<li><p>2.<code>%</code>最后的符号和被模数相同</p>
</li>
<li><p>3.前<code>++</code>；先+1，后运算</p>
<p>​	后++；先运算 , 后+1</p>
</li>
<li><p>4、<code>+</code>：当String字符串与其他数据类型只能做连接运算 , 并且结果为String类型</p>
</li>
</ul>
<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p><code>==</code>  <code>!=</code>  <code>&lt;</code>  <code>&gt;</code>  <code>&lt;=</code>  <code>&gt;=</code>  <code>instanceof</code></p>
<p>运算结果都是Boolean类型</p>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p><code>=</code>  <code>+=</code>  <code>-=</code>  <code>*=</code>  <code>/=</code>  <code>%=</code></p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p><code>&amp;</code>  <code>|</code>  <code>^</code>  <code>!</code>  <code>&amp;&amp;</code>  <code>||</code></p>
<p><code>&amp;</code> 逻辑与</p>
<p> <code>|</code> 逻辑或</p>
<p> <code>^</code> 逻辑异或</p>
<p> <code>!</code>  逻辑非</p>
<p> <code>&amp;&amp;</code> 短路与</p>
<p> <code>||</code> 短路或</p>
<ul>
<li><code>&amp;</code>：左边无论真假，右边都会进行运算；</li>
<li><code>&amp;&amp;</code>：如果左边为假，则右边不进行运算；</li>
<li><code>| </code>与 <code>||</code> 的区别同上；在使用的时候建议使用<code>&amp;&amp;</code>和<code>||</code></li>
<li><code>^</code>与或<code>|</code>的不同之处是：当左右都为true时，结果为false。</li>
</ul>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p><code>&lt;&lt;</code></p>
<p><code>&gt;&gt;</code></p>
<p><code>&lt;&lt;&lt;</code></p>
<p><code>&amp;</code></p>
<p><code>|</code></p>
<p><code>^</code></p>
<p><code>~</code></p>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p><code>(条件表达式)?表达式1:表达式2;</code></p>
<blockquote>
<p><em>条件运算符</em></p>
<p>条件表达式为true时,运算后的结果是表达式1<br>条件表达式为false时,运算后的结果是表达式2</p>
<ul>
<li>1、表达式1与表达式2的类型必须一致；</li>
<li>2、使用三元运算符的地方一定可以使用if…else代替，反之不一定成立；</li>
</ul>
</blockquote>
<p>例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(Sting[] args)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> b=<span class="number">2</span>;</span><br><span class="line">	<span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> a&lt;b?(<span class="string">&quot;a大&quot;</span>):(<span class="string">&quot;b大&quot;</span>);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="与equals-的区别"><a href="#与equals-的区别" class="headerlink" title="==与equals() 的区别"></a><code>==</code>与<code>equals()</code> 的区别</h3><p><a href="https://blog.csdn.net/weixin_34357962/article/details/85652196?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164660786116781683956704%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164660786116781683956704&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-85652196.pc_search_result_control_group&utm_term=equals&spm=1018.2226.3001.4187">Java语法—-Java中equals和&#x3D;&#x3D;的区别</a></p>
<blockquote>
<p>结果为布尔类型</p>
</blockquote>
<p>例 : </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sex=<span class="string">&quot;男&quot;</span>;</span><br><span class="line">sex.equals(<span class="string">&quot;男&quot;</span>);</span><br><span class="line"><span class="comment">//此种情况变量sex必须赋值</span></span><br></pre></td></tr></table></figure>

<p>或 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;男&quot;</span>.equals(sex);</span><br></pre></td></tr></table></figure>







<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><blockquote>
<p>支持一些特殊的转义序列<code>char</code>和<code>String</code>文字：</p>
<p><code>String.contains()</code>方法不需要转义</p>
</blockquote>
<p><code>\a</code>(响铃)    <code>\b</code>( 退格） <code>\f</code>(换页)   <code>\n</code>(换行)   <code>\r</code>（回车） <code>\t</code>(制表符)<code>\v</code> (垂直制表 )    <code>\\</code>(反斜杠)   <code>\&#39;</code>(单引号)   <code>\&quot;</code>(双引号)    <code>\0</code> (空字符)    <code>\ddd</code> (1到3位八进制所代表的任意字符)   <code>\xhh</code> (1到2位十六进制所代表的任意字符)</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Java 编程语言定义了以下类型的变量：</p>
<ul>
<li><strong>实例变量（非静态字段）</strong>从技术上讲，对象将其各自的状态存储在“非静态字段”中，即没有<code>static</code>关键字声明的字段。非静态字段也称为<em>实例变量</em>，因为它们的值对于类的每个<em>实例</em>（换句话说，对于每个对象）都是唯一的</li>
<li><strong>类变量（静态字段）</strong>类<em>变量</em><code>static</code>是使用修饰符声明的任何字段；这告诉编译器存在这个变量的一个副本，不管这个类被实例化了多少次。定义特定类型自行车的齿轮数量的字段可以标记为<code>static</code> , 因为从概念上讲，相同数量的齿轮将适用于所有实例。该代码<code>static int numGears = 6;</code>将创建这样一个静态字段。此外，可以添加关键字<code>final</code>来表示齿轮的数量永远不会改变。</li>
<li><strong>局部变量</strong>与对象在字段中存储其状态的方式类似，方法通常会将其临时状态存储在<em>局部变量</em>中。声明局部变量的语法类似于声明字段（例如，<code>int count = 0;</code>）。没有特殊关键字将变量指定为局部变量；该决定完全来自声明变量的位置——位于方法的左大括号和右大括号之间。因此，局部变量仅对声明它们的方法可见；课堂上的其他人无法访问它们。</li>
<li><strong>参数</strong>您已经在“Hello World!”的<code>Bicycle</code>类和方法中看到了参数示例。<code>main</code>应用。回想一下，该<code>main</code>方法的签名是<code>public static void main(String[] args)</code>. 这里，<code>args</code>变量是这个方法的参数。要记住的重要一点是，参数总是被归类为“变量”而不是“字段”。这也适用于您将在本教程后面了解的其他参数接受构造（例如构造函数和异常处理程序）。</li>
</ul>
<p>成员变量( 非静态字段即没有static关键字声明的字段 , 也叫作实例变量&#x2F;对象变量 , 定义在类中 , 属于对象 , 只能对象调用(类的实例调用 ? ) , 堆内存 )</p>
<p>​		静态成员变量(也叫类变量 , 有static关键字声明 , 属于成员变量的一种 ,  可以直接使用类名调用 , 可以对象调用 ,  共享内存)</p>
<p>局部变量(在方法体中定义 , 栈内存 , 生命周期只存在在方法中 , 方法结束后就会回收)</p>
<p>Java没有全局变量 , 但可以用静态成员变量实现全局变量效果</p>
<h3 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h3><blockquote>
<p>变量名区分大小写。</p>
<p>变量的名称可以是任何合法的标识符——一个长度不限的Unicode字母和数字序列，以字母、美元符号<code>$</code>或下划线字符<code>_</code>开头。惯例是变量名总是以字母开头，而不是<code>$</code>或<code>_</code>。</p>
<p>美元符号字符根本就不会被使用。在某些情况下，自动生成的名称将包含美元符号，但变量名称应该始终避免使用它。对于下划线字符也有类似的约定</p>
<p>虽然从技术上讲，变量名以<code>_</code>开头是合法的，但这种做法是不鼓励的。</p>
<p>空格是不允许的。</p>
<p>后续字符可以是字母、数字、美元符号或下划线字符。为变量选择名称时，请使用完整的单词而不是隐晦的缩写。</p>
<p>在许多情况下，它还会使您的代码自我记录</p>
<p>名称不能是关键字或保留字</p>
<p>如果您选择的名称仅包含一个单词，则将该单词拼写为所有小写字母。如果它包含多个单词，则将每个后续单词的第一个字母大写。</p>
<p>如果变量存储一个常量值，例如<code>static final int NUM_GEARS = 6</code>，则约定会略有变化，将每个字母大写并用下划线分隔后续单词。下划线字符从不在其他地方使用。</p>
</blockquote>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><blockquote>
<p>常量名通常大写</p>
<p>不同字符使用下划线分隔</p>
<p>只能被赋值一次 , 通常定义时即对其初始化</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure>



<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><blockquote>
<p>原始类型由语言预定义并由保留关键字命名</p>
<p>原始值不与其他原始值共享状态</p>
<p>已声明但未初始化的字段将由编译器设置为合理的默认值。一般而言，此默认值将为零或<code>null</code>，具体取决于数据类型</p>
<p>局部变量略有不同；编译器永远不会为未初始化的局部变量分配默认值。如果无法在声明它的地方初始化局部变量，请确保在尝试使用它之前为其分配一个值。访问未初始化的局部变量将导致编译时错误。</p>
<p>如果整型字面值以字母<code>L</code>或<code>l</code>结尾，则为长型;否则为<code>int</code>类型。建议使用大写字母<code>L</code>，因为小写字母<code>l</code>与数字<code>1</code>很难区分</p>
<p>如果浮点字面值以字母<code>F</code>或<code>f</code>结尾，则为<code>float</code>类型 ; 否则，它的类型是<code>double</code>，它可以选择以字母<code>D</code>或<code>d</code>结尾</p>
<p>字符和字符串文字 : </p>
<p>文字类型<code>char</code>，<code>String</code>可以包含任何 Unicode (UTF-16) 字符。也可以使用“Unicode 转义”，始终对文字使用“单引号”，对<code>char</code>文字使用“双引号” <code>String</code>。Unicode 转义序列可以在程序的其他地方使用（例如在字段名称中），而不仅仅是在<code>char</code>或<code>String</code>文字中。</p>
<p><code>null</code>文字可以用作任何引用类型的值。<code>null</code>可以分配给任何变量，除了原始类型的变量。<code>null</code>除了测试它的存在之外，几乎无能为力。因此，<code>null</code>经常在程序中用作标记，表示某些对象不可用。</p>
<p>有一种特殊的字面量，称为<em>类字面</em>量，由类型名称和附加 “ 组成<code>.class</code>；例如，<code>String.class</code>. 这指的<code>Class</code>是表示类型本身的（类型的）对象。</p>
<p>在 Java SE 7 及更高版本中，任意数量的下划线字符  <code>_</code>)可以出现在数字文字中数字之间的任何位置。能够分隔数字文字中的数字组，提高代码的可读性。</p>
</blockquote>
<h4 id="原始数据类型Primitive-Data"><a href="#原始数据类型Primitive-Data" class="headerlink" title="原始数据类型Primitive Data"></a>原始数据类型Primitive Data</h4><blockquote>
<p><code>double</code>此数据类型绝不应用于精确值，例如货币。</p>
</blockquote>
<ul>
<li>数值型<ul>
<li>字节型(byte)</li>
<li>整数类型(short,int,long)</li>
<li>浮点类型(float,double)</li>
</ul>
</li>
<li>字符型(char)</li>
<li>布尔型(boolean)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="comment">//String  双引号</span></span><br><span class="line"><span class="type">char</span> <span class="variable">sex</span> <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line"><span class="comment">//char  单引号</span></span><br></pre></td></tr></table></figure>



<h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul>
<li>类(class)</li>
<li>接口(interface)</li>
<li>数组([])</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String.format(<span class="string">&quot;%.2f&quot;</span>,f1);</span><br></pre></td></tr></table></figure>



<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote>
<p><em>数组</em>是一个容器对象，它包含固定数量的单一类型的值。数组的长度是在创建数组时确定的。创建后，它的长度是固定的。</p>
<p>数组中的每一项都称为一个<em>元素</em>，每个元素都通过其数字<em>索引</em>访问</p>
</blockquote>
<blockquote>
<p>标识符</p>
<p>数组元素</p>
<p>元素下标 : 从0开始</p>
<p>元素类型</p>
</blockquote>
<h2 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><blockquote>
<p>条件为布尔类型</p>
</blockquote>
<h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*if(条件)&#123;</span></span><br><span class="line"><span class="comment"> *执行代码块</span></span><br><span class="line"><span class="comment"> *&#125;*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(条件)&#123;</span></span><br><span class="line"><span class="comment">	代码块1</span></span><br><span class="line"><span class="comment">&#125;else&#123;</span></span><br><span class="line"><span class="comment">	代码块2</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<h4 id="if-else-if"><a href="#if-else-if" class="headerlink" title="if-else-if"></a>if-else-if</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">if(条件)&#123;</span></span><br><span class="line"><span class="comment">	代码块1</span></span><br><span class="line"><span class="comment">&#125;else if(条件2)&#123;</span></span><br><span class="line"><span class="comment">	代码块2</span></span><br><span class="line"><span class="comment">&#125;else if(条件3)&#123;</span></span><br><span class="line"><span class="comment">	代码块3</span></span><br><span class="line"><span class="comment">&#125;else &#123;</span></span><br><span class="line"><span class="comment">代码块4</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>





<h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><blockquote>
<p>与<code>if</code>和<code>if-else</code>语句不同，<code>switch</code>语句可以有许多可能的执行路径。</p>
<p>switch适用于<code>byte</code>、<code>short</code>、<code>char</code>和<code>int</code>基元数据类型。还适用于枚举类型、<code>String</code>类和一些封装某些基本类型的特殊类 : <code>Character</code>、<code>Byte</code>、<code>Short</code>和<code>Integer</code></p>
<p>语句的主体<code>switch</code>称为<code>switch 块</code>。块中的语句<code>switch</code>可以用一个或多个<code>case</code>或<code>default</code>标签来标记。该<code>switch</code>语句计算其表达式，然后执行匹配<code>case</code>标签后面的所有语句。</p>
<p><code>switch</code>语句仅基于单个整数、枚举值或<code>String</code>对象测试表达式</p>
<p>每个<code>break</code>语句都终止封闭<code>switch</code>语句</p>
</blockquote>
<h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><blockquote>
<p>迭代一系列值</p>
<p>初始化表达式初始化循环;它在循环开始时执行一次</p>
<p>当终止表达式的计算结果为false时，循环终止</p>
<p>递增表达式在每次循环迭代后被调用;这个表达式可以对一个值递增或递减</p>
</blockquote>
<h5 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h5><blockquote>
<p>or each <strong>element</strong> in <strong>arrayName</strong> do {…}</p>
<p>for(数据类型 变量名 :遍历的目标){ 数据类型 变量名 :声明一个变量用来接收遍历目标遍历后的元素}</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(ElementType element: arrayName)&#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i: num)&#123;</span><br><span class="line">    System.out.print(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><blockquote>
<p>while语句计算表达式，表达式必须返回一个布尔值。</p>
</blockquote>
<h4 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h4><blockquote>
<p><code>do-while</code>和之间的区别在于<code>while</code>它<code>do-while</code>在循环底部而不是顶部评估其表达式。因此，块内的语句<code>do</code>总是至少执行一次</p>
</blockquote>
<h2 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h2><blockquote>
<p><em>表达式</em>是由变量、运算符和方法调用组成的构造，这些构造根据语言的语法构造，计算结果为单个值。</p>
<p>表达式返回值的数据类型取决于表达式中使用的元素。</p>
<p>表达式也可以返回其他类型的值，例如<code>boolean</code>or <code>String</code>。</p>
<p>只要表达式的一部分所需的数据类型与另一部分的数据类型匹配，Java 编程语言就允许您从各种较小的表达式构造复合表达式。</p>
<p>一条<em>语句</em>构成一个完整的执行单元。<code>;</code>通过以分号 ( )结束表达式，可以将以下类型的表达式组成语句。</p>
<ul>
<li>赋值表达式</li>
<li>任何使用<code>++</code>或<code>--</code></li>
<li>方法调用</li>
<li>对象创建表达式</li>
</ul>
<p>这样的语句称为<em>表达式语句</em>。</p>
<p>还有另外两种语句：声明语句和控制流语句 : 声明语句声明一个变量 , <em>控制流语句</em>控制语句执行的顺序</p>
<p><em>块</em>是一组位于平衡大括号之间的零个或多个语句，可以在任何允许使用单个语句的地方使用</p>
</blockquote>
<h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote>
<p>同一个引用类型使用不同的实例而执行不同操作</p>
</blockquote>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Kirara画廊</title>
    <url>/2023/08/29/Kirara%E7%94%BB%E5%BB%8A/</url>
    <content><![CDATA[<p>有关绮良的同人作品画廊</p>
<span id="more"></span>



<img src="/2023/08/29/Kirara%E7%94%BB%E5%BB%8A/kirara.png" class="" title="[绮良]">

<img src="/2023/08/29/Kirara%E7%94%BB%E5%BB%8A/touxiang2.png" class="" title="[绮良]">

<img src="/2023/08/29/Kirara%E7%94%BB%E5%BB%8A/lihui.png" class="" title="[绮良]">

<img src="/2023/08/29/Kirara%E7%94%BB%E5%BB%8A/san.png" class="" title="[绮良]">

<img src="/2023/08/29/Kirara%E7%94%BB%E5%BB%8A/xinnian.png" class="" title="[绮良]">

<img src="/2023/08/29/Kirara%E7%94%BB%E5%BB%8A/touxiang.png" class="" title="[绮良]">



]]></content>
  </entry>
  <entry>
    <title>Ubuntu服务器搭建Wordpress个人博客过程</title>
    <url>/2021/06/24/Ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAWordpress%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>目录：</p>
<p>BT-Panel应用镜像系统建站</p>
<p>Ubutu系统镜像建站</p>
<h1 id="BT-Panel应用镜像"><a href="#BT-Panel应用镜像" class="headerlink" title="BT-Panel应用镜像"></a>BT-Panel应用镜像</h1><h4 id="参考教程："><a href="#参考教程：" class="headerlink" title="参考教程："></a>参考教程：</h4><p>B站视频教程视频链接：<br>10分钟拥有真正意义上属于自己的网站！网站搭建！：<a href="https://www.bilibili.com/video/BV1D7411B7Yf?t=493">https://www.bilibili.com/video/BV1D7411B7Yf?t=493</a></p>
<p><strong>( 没有完全按照视频教程，其中一些更改请参照视频和文章内容对比 )</strong></p>
<p>指导老师：Tokameine：<a href="https://tokameine.top/">https://tokameine.top/</a></p>
<p>﻿<span id="more"></span></p>
<h4 id="准备过程"><a href="#准备过程" class="headerlink" title="准备过程 :"></a>准备过程 :</h4><h5 id="域名"><a href="#域名" class="headerlink" title="域名 :"></a><strong>域名</strong> :</h5><p>在阿里云购买域名后解析</p>
<h5 id="服务器"><a href="#服务器" class="headerlink" title="服务器 :"></a><strong>服务器</strong> :</h5><p>阿里云轻量应用服务器</p>
<h5 id="应用镜像-BT-Panel"><a href="#应用镜像-BT-Panel" class="headerlink" title="应用镜像 : BT-Panel"></a><strong>应用镜像 : BT-Panel</strong></h5><p>其他根据个人需求选择</p>
<p>之后 绑定域名</p>
<p>【香港服务器不需要备案可直接使用，但会存在网络不稳定等许多问题影响运行。】</p>
<p>【国内服务器需要15天左右的备案时间。】</p>
<h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a><strong>防火墙</strong></h4><p>添加规则 : 开放端口</p>
<blockquote>
<p>HTTP TCP <strong>80</strong><br>自定义 TCP <strong>8888</strong></p>
</blockquote>
<h4 id="宝塔面板官网"><a href="#宝塔面板官网" class="headerlink" title="宝塔面板官网 :"></a>宝塔面板官网 :</h4><p><a href="https://www.bt.cn/">宝塔面板</a></p>
<hr>
<p>﻿</p>
<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤 :"></a>具体步骤 :</h4><p>根据阿里云的提示在轻量应用束缚器管理控制台 , 找到服务器<br>找到应用详情</p>
<p>﻿</p>
<p>﻿</p>
<p>从<strong>宝塔面板信息</strong>中点击链接 , 跳转至宝塔登录页面 , 输入用户名</p>
<p><strong>( 默认用户名为admin，一定要更改 )</strong></p>
<p>复制命令 , 点击<strong>远程链接</strong> , 粘贴命令后回车可查看宝塔账户密码</p>
<p>将密码粘贴至宝塔面板登录</p>
<hr>
<p>进入宝塔面板首页后更改用户名 &#x2F; 注册账号</p>
<p>进入<strong>软件商店</strong>下载 :</p>
<blockquote>
<p><strong>Apache</strong> 2.4.48</p>
<p><strong>MySQL</strong> 5.5.62</p>
<p><strong>PHP-7.2（推荐使用）</strong></p>
<p><strong>Pure-Ftpd</strong> 1.0.49</p>
<p><strong>如果需要下载 phpMyAdmin , 先下载PHP-7.2以上的版本</strong></p>
</blockquote>
<p>下载完成后设置为首页显示</p>
<p>( 正常运行显示后如下图 : )</p>
<p>可直接在应用商店选择一键部署Wordpress</p>
<p>﻿</p>
<h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h1><p>因为太懒了（因为之前的使用宝塔部署想要保留wordpreaa数据）还是选择用宝塔</p>
<p>宝塔官网下载：<a href="https://www.bt.cn/new/download.html">https://www.bt.cn/new/download.html</a></p>
<p>选择在线安装</p>
<p>选择只安装宝塔</p>
<p>安装成功后进入，只下载宝塔</p>
<p>﻿</p>
<p>之后下载</p>
<p><strong>Apache</strong> 2.4.48<br><strong>MySQL</strong> 5.5.62<br><strong>PHP-7.2（推荐使用）</strong><br><strong>Pure-Ftpd</strong> 1.0.49</p>
<p>使用wordpress的一键部署</p>
<p>成功后登陆wordpress</p>
<p>﻿</p>
<p>Sakurairo主题下载地址：<a href="https://github.com/mirai-mamori/Sakurairo">https://github.com/mirai-mamori/Sakurairo</a></p>
<p>安装主题</p>
<ul>
<li>文章</li>
<li>区块</li>
</ul>
<h2 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h2><p>这是文字内容的基本要素，请以此为基础开始撰写。</p>
<h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>文本</p>
<p>背景</p>
<h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><p>字号尺寸默认13203642</p>
<h2 id="高级"><a href="#高级" class="headerlink" title="高级"></a>高级</h2><p>打开发布面板</p>
<ul>
<li>文章</li>
<li>段落</li>
</ul>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Wordpress</tag>
        <tag>Ubuntu</tag>
        <tag>BT-Panel</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu22.04安装MySQL</title>
    <url>/2023/05/06/Ubuntu22-04%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<h4 id="1、安装服务器端"><a href="#1、安装服务器端" class="headerlink" title="1、安装服务器端"></a>1、安装服务器端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install mysql-server</span><br></pre></td></tr></table></figure>

<h4 id="2、安装客户端"><a href="#2、安装客户端" class="headerlink" title="2、安装客户端"></a>2、安装客户端</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install mysql-client</span><br></pre></td></tr></table></figure>

<h4 id="3、安装-mysql-相关库"><a href="#3、安装-mysql-相关库" class="headerlink" title="3、安装 mysql 相关库"></a>3、安装 mysql 相关库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="4、安装成功后查看-MySQL-版本"><a href="#4、安装成功后查看-MySQL-版本" class="headerlink" title="4、安装成功后查看 MySQL 版本"></a>4、安装成功后查看 MySQL 版本</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure>

<img src="/2023/05/06/Ubuntu22-04%E5%AE%89%E8%A3%85MySQL/ubuntu22installmysql1.png" class="" title="[查看MySQL版本]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Ubuntu22-04安装MySQL\ubuntu22installmysql1.png" alt="查看MySQL版本"></p>
<h4 id="5、修改-mysqld-cnf-配置文件"><a href="#5、修改-mysqld-cnf-配置文件" class="headerlink" title="5、修改 mysqld.cnf 配置文件"></a>5、修改 mysqld.cnf 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p> （1）在 [mysqld] 最后一行加入：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># skip-grant-tables　　　　&lt;-- add # here</span></span><br></pre></td></tr></table></figure>

<p> （2）然后点击 ESC ，输入 ‘ ：wq ’ 进行保存和退出；如下图所示；</p>
<p> <strong>注：如果不修改 mysqld.cnf 配置文件，修改完 MySQL 的用户名和密码后，在进入 MySQL 时可能会有如下错误，即语法错误拒绝被访问：</strong></p>
<img src="/2023/05/06/Ubuntu22-04%E5%AE%89%E8%A3%85MySQL/ubuntu22installmysqlvi2.png" class="" title="[修改配置文件]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Ubuntu22-04安装MySQL\ubuntu22installmysqlvi2.png" alt="修改配置文件"></p>
<h4 id="6、查看默认安装的-MySQL-的用户名和密码"><a href="#6、查看默认安装的-MySQL-的用户名和密码" class="headerlink" title="6、查看默认安装的 MySQL 的用户名和密码"></a>6、查看默认安装的 MySQL 的用户名和密码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cat</span> /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>

<img src="/2023/05/06/Ubuntu22-04%E5%AE%89%E8%A3%85MySQL/ubuntu22installmysql1cnf.png" class="" title="[修改配置文件]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Ubuntu22-04安装MySQL\ubuntu22installmysql1cnf.png" alt="修改配置文件"></p>
<h4 id="7、登录-MySQL-；"><a href="#7、登录-MySQL-；" class="headerlink" title="7、登录 MySQL ；"></a>7、登录 MySQL ；</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">mysql -u debian-sys-maint -p    # 换行后输入上述查到的密码</span><br></pre></td></tr></table></figure>

<img src="/2023/05/06/Ubuntu22-04%E5%AE%89%E8%A3%85MySQL/ubuntu22installmysqlu1.png" class="" title="[查看默认安装的用户名和密码]">

<img src="ubuntu22installmysqlu1.png" alt="查看默认安装的用户名和密码">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Ubuntu22-04安装MySQL\ubuntu22installmysqlu1.png" alt="查看默认安装的用户名和密码"></p>
<h4 id="8、进入-MySQL-；"><a href="#8、进入-MySQL-；" class="headerlink" title="8、进入 MySQL ；"></a>8、进入 MySQL ；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure>

<h4 id="9、刷新权限；"><a href="#9、刷新权限；" class="headerlink" title="9、刷新权限；"></a>9、刷新权限；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h4 id="10、修改用户名和密码；"><a href="#10、修改用户名和密码；" class="headerlink" title="10、修改用户名和密码；"></a>10、修改用户名和密码；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED WITH caching_sha2_password BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="11、刷新权限；"><a href="#11、刷新权限；" class="headerlink" title="11、刷新权限；"></a>11、刷新权限；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h4 id="12、退出；"><a href="#12、退出；" class="headerlink" title="12、退出；"></a>12、退出；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">quit;</span><br></pre></td></tr></table></figure>

<h4 id="13、重启-MySQL-；"><a href="#13、重启-MySQL-；" class="headerlink" title="13、重启 MySQL ；"></a>13、重启 MySQL ；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<h4 id="14、进入-MySQL-；"><a href="#14、进入-MySQL-；" class="headerlink" title="14、进入 MySQL ；"></a>14、进入 MySQL ；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p    <span class="comment"># 回车后输入自己修改后的密码即可</span></span><br></pre></td></tr></table></figure>

<h4 id="若以上过程没有效果，进行以下步骤："><a href="#若以上过程没有效果，进行以下步骤：" class="headerlink" title="若以上过程没有效果，进行以下步骤："></a>若以上过程没有效果，进行以下步骤：</h4><h4 id="15、修改-mysqld-cnf-配置文件"><a href="#15、修改-mysqld-cnf-配置文件" class="headerlink" title="15、修改 mysqld.cnf 配置文件"></a>15、修改 mysqld.cnf 配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure>

<img src="/2023/05/06/Ubuntu22-04%E5%AE%89%E8%A3%85MySQL/ubuntu22installmysqlroot.png" class="" title="[修改cnf文件]">

<p><img src="D:\Morlvoid\Morlvoid.github.io\source_posts\Ubuntu22-04安装MySQL\ubuntu22installmysqlroot.png" alt="修改cnf文件"></p>
<h4 id="16、保存退出"><a href="#16、保存退出" class="headerlink" title="16、保存退出"></a>16、保存退出</h4><p>键入<code>i</code> 进入，修改user和password<br>键入<code>Esc</code>，输入<code>:wq</code> 保存退出。退出vi后刷新权限退出MySQL，重启</p>
<h4 id="17、刷新权限；"><a href="#17、刷新权限；" class="headerlink" title="17、刷新权限；"></a>17、刷新权限；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h4 id="18、退出；"><a href="#18、退出；" class="headerlink" title="18、退出；"></a>18、退出；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">quit;</span><br></pre></td></tr></table></figure>

<h4 id="19、重启-MySQL-；"><a href="#19、重启-MySQL-；" class="headerlink" title="19、重启 MySQL ；"></a>19、重启 MySQL ；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>

<h4 id="20、进入-MySQL-；"><a href="#20、进入-MySQL-；" class="headerlink" title="20、进入 MySQL ；"></a>20、进入 MySQL ；</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p    <span class="comment"># 回车后输入自己修改后的密码即可</span></span><br></pre></td></tr></table></figure>

<h4 id="修改成功"><a href="#修改成功" class="headerlink" title="修改成功"></a>修改成功</h4><h3 id="MySQL中help手册翻译"><a href="#MySQL中help手册翻译" class="headerlink" title="MySQL中help手册翻译"></a>MySQL中help手册翻译</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">List of all MySQL commands:</span><br><span class="line">Note that all text commands must be first on line and end with <span class="string">&#x27;;&#x27;</span></span><br><span class="line">?         (\?) Synonym <span class="keyword">for</span> `<span class="built_in">help</span><span class="string">&#x27;.</span></span><br><span class="line"><span class="string">clear     (\c) Clear the current input statement.</span></span><br><span class="line"><span class="string">connect   (\r) Reconnect to the server. Optional arguments are db and host.</span></span><br><span class="line"><span class="string">delimiter (\d) Set statement delimiter.</span></span><br><span class="line"><span class="string">edit      (\e) Edit command with $EDITOR.</span></span><br><span class="line"><span class="string">ego       (\G) Send command to mysql server, display result vertically.</span></span><br><span class="line"><span class="string">exit      (\q) Exit mysql. Same as quit.</span></span><br><span class="line"><span class="string">go        (\g) Send command to mysql server.</span></span><br><span class="line"><span class="string">help      (\h) Display this help.</span></span><br><span class="line"><span class="string">nopager   (\n) Disable pager, print to stdout.</span></span><br><span class="line"><span class="string">notee     (\t) Don&#x27;</span>t write into outfile.</span><br><span class="line">pager     (\P) Set PAGER [to_pager]. Print the query results via PAGER.</span><br><span class="line"><span class="built_in">print</span>     (\p) Print current <span class="built_in">command</span>.</span><br><span class="line">prompt    (\R) Change your mysql prompt.</span><br><span class="line">quit      (\q) Quit mysql.</span><br><span class="line"><span class="built_in">rehash</span>    (\#) Rebuild completion <span class="built_in">hash</span>.</span><br><span class="line"><span class="built_in">source</span>    (\.) Execute an SQL script file. Takes a file name as an argument.</span><br><span class="line">status    (\s) Get status information from the server.</span><br><span class="line">system    (\!) Execute a system shell <span class="built_in">command</span>.</span><br><span class="line"><span class="built_in">tee</span>       (\T) Set outfile [to_outfile]. Append everything into given outfile.</span><br><span class="line">use       (\u) Use another database. Takes database name as argument.</span><br><span class="line">charset   (\C) Switch to another charset. Might be needed <span class="keyword">for</span> processing binlog with multi-byte charsets.</span><br><span class="line">warnings  (\W) Show warnings after every statement.</span><br><span class="line">nowarning (\w) Don<span class="string">&#x27;t show warnings after every statement.</span></span><br><span class="line"><span class="string">resetconnection(\x) Clean session context.</span></span><br><span class="line"><span class="string">query_attributes Sets string parameters (name1 value1 name2 value2 ...) for the next query to pick up.</span></span><br><span class="line"><span class="string">ssl_session_data_print Serializes the current SSL session data to stdout or file</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">所有MySQL命令的列表：</span><br><span class="line">请注意，所有文本命令都必须位于第一行，并以“；”结尾</span><br><span class="line">?         （\？）“帮助”的同义词。</span><br><span class="line">clear（\c）清除当前输入语句。</span><br><span class="line">connect（\r）重新连接到服务器。可选参数为db和host。</span><br><span class="line">delimiter（\d）设置语句分隔符。</span><br><span class="line">edit（\e）使用<span class="variable">$EDITOR</span>编辑命令。</span><br><span class="line">ego（\G）向mysql服务器发送命令，垂直显示结果。</span><br><span class="line"><span class="built_in">exit</span>（\q）退出mysql。与退出相同。</span><br><span class="line">go（\g）将命令发送到mysql服务器。</span><br><span class="line"><span class="built_in">help</span>（\h）显示此帮助。</span><br><span class="line">nopage（\n）禁用寻呼机，打印到标准输出。</span><br><span class="line">notee（\t）不要写入outfile。</span><br><span class="line">寻呼机（\P）设置pager[到页面]。通过PAGER打印查询结果。</span><br><span class="line"><span class="built_in">print</span>（\p）打印当前命令。</span><br><span class="line">prompt（\R）更改您的mysql提示符。</span><br><span class="line">quit（\q）退出mysql。</span><br><span class="line"><span class="built_in">rehash</span>（\#）重新生成完成哈希。</span><br><span class="line"><span class="built_in">source</span>（\.）执行SQL脚本文件。将文件名作为参数。</span><br><span class="line">status（\s）从服务器获取状态信息。</span><br><span class="line">system（\！）执行系统shell命令。</span><br><span class="line"><span class="built_in">tee</span>（\T）设置输出文件[to_outfile]。将所有内容附加到给定的外文件中。</span><br><span class="line">use（\u）使用另一个数据库。将数据库名称作为参数。</span><br><span class="line">charset（\C）切换到另一个字符集。可能需要处理具有多字节字符集的binlog。</span><br><span class="line">warnings（\W）在每条语句后显示警告。</span><br><span class="line">nowarning（\w）不要在每条语句后都显示警告。</span><br><span class="line">resetconnection（\x）清除会话上下文。</span><br><span class="line">query_attributes为下一个要提取的查询设置字符串参数（名称1值1名称2值2…）。</span><br><span class="line">ssl_session_data_print将当前ssl会话数据序列化到stdout或文件</span><br></pre></td></tr></table></figure>


<h3 id="其他命令："><a href="#其他命令：" class="headerlink" title="其他命令："></a>其他命令：</h3><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update   </span><br></pre></td></tr></table></figure>

<h4 id="免密码进入mysql："><a href="#免密码进入mysql：" class="headerlink" title="免密码进入mysql："></a>免密码进入mysql：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> mysql -uroot</span><br></pre></td></tr></table></figure>



<p>参考教程：</p>
<p><a href="http://t.csdn.cn/x34S">Ubuntu 20.04 + mysql 8.0.27 用户名和密码修改</a></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Ubuntu22.04</tag>
        <tag>Ubuntu22.04安装MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Unexpectedly discovered galaxy clusters resembling bluewhales in shape</title>
    <url>/2020/08/11/Unexpectedly-discovered-galaxy-clusters-resembling-bluewhales-in-shape/</url>
    <content><![CDATA[<p>作者：（Mor）Mor·Mirror·Blank</p>
<p>MUVVSA今日发布了新文章：《Unexpectedly discovered galaxy clusters resembling blue whales in shape》，对该文章做以下解读：</p>
<h1 id="目录："><a href="#目录：" class="headerlink" title="目录："></a>目录：</h1><p>名词解读<br>JING-17星系团的特点<br>文章主体部分中文翻译<br>    题目<br>    正文<br>文章侧边栏部分中文翻译</p>
<span id="more"></span>

<h1 id="名词解读"><a href="#名词解读" class="headerlink" title="名词解读"></a>名词解读</h1><p>MUVVSA全名：Mor Unify Virtually Vision Space Administration<br>(Mor统一虚拟幻象太空管理局)<br>（类似NASA、CNSA航天局）</p>
<p>MookaMiTeX-ray Observatory  ：MookaMiTeX-ray 天文摄像台</p>
<h1 id="JING-17星系团的特点："><a href="#JING-17星系团的特点：" class="headerlink" title="JING-17星系团的特点："></a>JING-17星系团的特点：</h1><p>1.特殊的能量，无法解析<br>2.粒子波动，无法解析<br>3.星系团在不断扩张<br>4.星系团在移动<br>5.星系团疑似会吞噬附近10光年内的天体<br>6.星系团与蓝鲸高度像似</p>
<p>做出以下猜测：或许JING-17是一个有生命的小型星系团，星系团内包含诸多天体，JING-17是一只小型生命宇宙，不断“游动”与“觅食”，将附近的天体作为自己的食物来源。</p>
<p>暂且将它归类为：移动生命宇宙。</p>
<h1 id="文章主体部分中文翻译"><a href="#文章主体部分中文翻译" class="headerlink" title="文章主体部分中文翻译"></a>文章主体部分中文翻译</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>意外发现了形状酷似蓝鲸的星系团</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>如标题所说，发现了具有特定重要特征的星系团。</p>
<p>由MUVVSA的MookaMiTeX射线天文台观测到异常能量团，该能量团附近有无法确认的粒子波动。由于该星系团与其他星系团极为不同，VU天文望远镜也无法拍摄，下图由著名画家凯特·艾米·奇拉在相关检测数据和科学家的描述下绘制的概念蓝图。</p>
<p>该星系团形状与蓝鲸极为相似，距前后七日的观测对比，星系团直径每七日扩大约为10cm，初步推测该星系团将会不断扩张。同时该星系团位置也有所变化。暂时无法观测该星系团的年龄与星系团边界距离地球的实际距离。更详细的相关研究结果已发布多篇论文。</p>
<p>由于星系团是宇宙中最大的结构之一，随着时间的推移，它会与其他星系团或星系团合并，从而导致星系团气体的不对称或尖锐特征等干扰。科学家们并不确保JING-17这个星系团是否会对太阳系乃至地球造成影响，因为随着它们的大小增加，它们通常仍在经历与其他星系团或星系群合并的混乱。</p>
<p>这是今年预测到的第17个庞大神秘的星系团，编号17。根据著名画家画家凯特·艾米·奇拉的提议，该星系团暂时命名为：JING-17。</p>
<p>奇怪的是，该星系团所处的位置相当孤立，附近10光年内没有其他星系团与天体。结合关于该星系团能够移动的推测，这恐怕意味着该星系团将“吞噬”它所经过的天体。</p>
<p>在观测者莫尔·镜·空白所写的报告中，莫尔大胆针对该星系团相关信息做出了令人难以接受的猜测，具体引用如下：<br>根据现在推测的有关JING-17星系团的特点：<br>1.特殊的能量，无法解析<br>2.粒子波动，无法解析<br>3.星系团在不断扩张<br>4.星系团在移动<br>5.星系团疑似会吞噬附近10光年内的天体<br>6.星系团与蓝鲸高度像似<br>做出以下猜测：或许JING-17是一个有生命的小型星系团，星系团内包含诸多天体，JING-17是一只小型生命宇宙，不断“游动”与“觅食”，将附近的天体作为自己的食物来源。暂且将它归类为：移动生命宇宙。</p>
<p>莫尔认为，宇宙中存在小型生命宇宙并非不可能，她将会在未来一段时间持续关注该星系团来印证这个猜想。</p>
<p>想了解更多的信息，请阅读：</p>
<p><a href="https://www.muvvsa.mor/jing17">https://www.muvvsa.mor/jing17</a></p>
<h1 id="文章侧边栏部分中文翻译"><a href="#文章侧边栏部分中文翻译" class="headerlink" title="文章侧边栏部分中文翻译"></a>文章侧边栏部分中文翻译</h1><p>(其实都是凑字数的)<br>所有其他的小世界观都发生在这个移动的宇宙中。<br>世界观故事的起点也在这里。<br>除了世界观的作者Mor，没有人知道这个宇宙是如何形成的，具体内容现在还不能剧透。<br>目前，科学家们只发现了这个宇宙。如果你想看后续，记得关注Mor（？）<br>为了写一个世界观，我写了一个网站。世界观的名字叫“JING-17”。<br>我胡编乱造了一份报告。<br>欢迎来看这个世界观，虽然你可能看不懂全英文。<br>这些英语都是机器翻译的，所以可能很好笑。<br>我还在要努力凑字数。<br>如果你对这个世界观有兴趣，你可以随时小窗我讨论。<br>这个网站是用代码写的，我可以随时更改内容（其实已经完全不想改了）。<br>世界观的中文名称是“鲸歌”。好了，终于凑够字数了。请看右边的内容。</p>
<p>（写个世界观主线好累啊（不你）</p>
<img src="/2020/08/11/Unexpectedly-discovered-galaxy-clusters-resembling-bluewhales-in-shape/shijieguan.png" class="" title="[游鲸]">]]></content>
      <categories>
        <category>OC</category>
      </categories>
      <tags>
        <tag>Jing17</tag>
        <tag>世界观</tag>
        <tag>游鲸</tag>
        <tag>OC</tag>
      </tags>
  </entry>
  <entry>
    <title>cropper剪裁插件的用法</title>
    <url>/2021/05/26/cropper%E5%89%AA%E8%A3%81%E6%8F%92%E4%BB%B6%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>加载的文件</p>
<span id="more"></span>

<p>必须按照顺序加载三个js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../assets/lib/cropper/cropper.css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../assets/lib/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../assets/lib/cropper/Cropper.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../assets/lib/cropper/jquery-cropper.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>初始化剪裁插件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> $image = $(<span class="string">&#x27;#image&#x27;</span>); <span class="comment">// 找到一张图片（默认显示的那张图片）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置项</span></span><br><span class="line"><span class="keyword">let</span> option = &#123;</span><br><span class="line">  <span class="comment">// 参考下面的 [参数] 部分</span></span><br><span class="line">  <span class="comment">// 比如：aspectRatio 表示剪裁比例</span></span><br><span class="line">  <span class="attr">aspectRatio</span>: <span class="number">400</span> / <span class="number">280</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">$image.<span class="title function_">cropper</span>(option);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方法的使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$image.<span class="title function_">cropper</span>(<span class="string">&#x27;方法名&#x27;</span>, 方法的参数);</span><br><span class="line"></span><br><span class="line">比如，有一个 replace 方法：<span class="title function_">replace</span>(url)</span><br><span class="line"></span><br><span class="line">$image.<span class="title function_">cropper</span>(<span class="string">&#x27;replace&#x27;</span>, url);</span><br><span class="line"></span><br><span class="line">比如，剪裁得到canvas，原方法是这样说明的：<span class="title function_">getCroppedCanvas</span>(&#123; <span class="attr">width</span>: <span class="number">30</span>, <span class="attr">height</span>: <span class="number">10</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> canvas = $image.<span class="title function_">cropper</span>(<span class="string">&#x27;getCroppedCanvas&#x27;</span>, &#123; <span class="attr">width</span>: <span class="number">30</span>, <span class="attr">height</span>: <span class="number">10</span> &#125;);</span><br></pre></td></tr></table></figure>

<p>把canvas转成我们想要的格式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 剪裁之后，会得到一个canvas</span></span><br><span class="line"><span class="comment">// 能够把 canvas 转成 base64 格式；转成 文件对象 格式，只能转成这两种格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转成 base64格式</span></span><br><span class="line"><span class="keyword">let</span> base64 = canvas.<span class="title function_">toDataURL</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转成 文件对象 格式</span></span><br><span class="line">canvas.<span class="title function_">toBlob</span>(<span class="keyword">function</span> (<span class="params">blob</span>) &#123;</span><br><span class="line">  <span class="comment">// blob是二进制大对象格式，把它 append 到 FormData 中，会变为文件对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>你可以通过$().cropper(options)方法来设置参数。如果你想改变全局默认参数，可以使用$.fn.cropper.setDefaults(options)方法。</li>
<li>aspectRatio：类型：Number，默认值NaN。设置剪裁容器的比例。</li>
<li>crop：类型：Function，默认值null。当改变剪裁容器或图片时的事件函数。</li>
<li>preview：类型：String(jQuery选择器)，默认值’’。添加额外的元素（容器）的预览。注意：</li>
<li>最大宽度是剪裁容器的初始化宽度</li>
<li>最大高度是剪裁容器的初始化高度</li>
<li>如果你设置了aspectRatio参数，确保预览容器具有相同的比例</li>
<li>strict：类型：Boolean，默认值true。在strict模式中，canvas不能小于容器，剪裁容器不能再canvas之外。</li>
<li>responsive：类型：Boolean，默认值true。是否在窗口尺寸改变的时候重置cropper。</li>
<li>checkImageOrigin：类型：Boolean，默认值true。默认情况下，插件会检测图片的源，如果是跨域图片，图片元素会被添加crossOrigin class，并会为图片的url添加一个时间戳来使getCroppedCanvas变为可用。添加时间戳会使图片重新加载，以使跨域图片能够使用getCroppedCanvas。在图片上添加crossOrigin class会阻止在图片url上添加时间戳，及图片的重新加载。</li>
<li>background：类型：Boolean，默认值true。是否在容器上显示网格背景。</li>
<li>modal：类型：Boolean，默认值true。是否在剪裁框上显示黑色的模态窗口。</li>
<li>guides：类型：Boolean，默认值true。是否在剪裁框上显示虚线。</li>
<li>highlight：类型：Boolean，默认值true。是否在剪裁框上显示白色的模态窗口。</li>
<li>autoCrop：类型：Boolean，默认值true。是否在初始化时允许自动剪裁图片。</li>
<li>autoCropArea：类型：Number，默认值0.8（图片的80%）。0-1之间的数值，定义自动剪裁区域的大小。</li>
<li>dragCrop：类型：Boolean，默认值true。是否允许移除当前的剪裁框，并通过拖动来新建一个剪裁框区域。</li>
<li>movable：类型：Boolean，默认值true。是否允许移动剪裁框。</li>
<li>resizable：类型：Boolean，默认值true。是否允许改变剪裁框的大小。</li>
<li>zoomable：类型：Boolean，默认值true。是否允许放大缩小图片。</li>
<li>mouseWheelZoom：类型：Boolean，默认值true。是否允许通过鼠标滚轮来缩放图片。</li>
<li>touchDragZoom：类型：Boolean，默认值true。是否允许通过触摸移动来缩放图片。</li>
<li>rotatable：类型：Boolean，默认值true。是否允许旋转图片。</li>
<li>minContainerWidth：类型：Number，默认值200。容器的最小宽度。</li>
<li>minContainerHeight：类型：Number，默认值100。容器的最小高度。</li>
<li>minCanvasWidth：类型：Number，默认值0。canvas 的最小宽度（image wrapper）。</li>
<li>minCanvasHeight：类型：Number，默认值0。canvas 的最小高度（image wrapper）。</li>
<li>build：类型：Function，默认值null。build.cropper事件的简写方式。</li>
<li>built：类型：Function，默认值null。built.cropper事件的简写方式。</li>
<li>dragstart：类型：Function，默认值null。dragstart.cropper事件的简写方式。</li>
<li>dragmove：类型：Function，默认值null。dragmove.cropper事件的简写方式。</li>
<li>dragend：类型：Function，默认值null。dragend.cropper事件的简写方式。</li>
<li>zoomin：类型：Function，默认值null。zoomin.cropper事件的简写方式。</li>
<li>zoomout：类型：Function，默认值null。zoomout.cropper事件的简写方式。</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>因为图片是异步加载的，所以你需要在built之后才能调用下面的方法，setAspectRatio、replace和destroy方法例外。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$().cropper(&#123;`` ``built: ``function` `() &#123;``  ``$().cropper(``&#x27;method&#x27;``, argument1, , argument2, ..., argumentN)`` ``&#125;``&#125;</span><br></pre></td></tr></table></figure>

<p><strong>move(offsetX, offsetY)：</strong></p>
<ul>
<li>offsetX：类型：Number，水平方向上移动的大小，单位像素。</li>
<li>offsetY：类型：Number，垂直方向上移动的大小，单位像素。</li>
</ul>
<p>移动一幅图片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$().cropper(``&#x27;move&#x27;``, 1, 0)``$().cropper(``&#x27;move&#x27;``, 0, -1)</span><br></pre></td></tr></table></figure>

<p><strong>zoom(ratio)：</strong></p>
<p>ratio：</p>
<p>类型：Number</p>
<ul>
<li>Zoom in：需要一个正数（ratio &gt; 0）</li>
<li>Zoom out：需要一个负数（ratio &lt; 0）</li>
</ul>
<p>缩放一幅图片：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$().cropper(``&#x27;zoom&#x27;``, 0.1)``$().cropper(``&#x27;zoom&#x27;``, -0.1)</span><br></pre></td></tr></table></figure>

<p><strong>rotate(degree)：</strong></p>
<p>ratio：</p>
<p>类型：Number</p>
<ul>
<li>Rotate right：需要一个正数（degree &gt; 0）</li>
<li>Rotate left：需要一个负数（degree &lt; 0）</li>
</ul>
<p>旋转一幅图片，需要CSS3 Transforms3d的支持（IE10+）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$().cropper(``&#x27;rotate&#x27;``, 90)``$().cropper(``&#x27;rotate&#x27;``, -90</span><br></pre></td></tr></table></figure>

<p><strong>enable()：</strong>使cropper可用。</p>
<p><strong>disable()：</strong>冻结cropper。</p>
<p><strong>reset()：</strong>重置剪裁区域的图片到初始状态。</p>
<p><strong>clear()：</strong>清空剪裁区域。</p>
<p><strong>replace(url)：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url：``替换图片的URL重建cropper。``类型：String``一个新的图片URL</span><br></pre></td></tr></table></figure>

<p><strong>getData()：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值：``类型：Object``属性：``x：剪裁区域左侧的偏移。``y：剪裁区域距上部的偏移。``width：剪裁区域的宽度。``height：剪裁区域的高度。``rotate：图片的旋转角度。``请参考实例效果</span><br></pre></td></tr></table></figure>

<p><strong>getContainerData()：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值：``类型：Object``属性：``width：容器的当前宽度。``height：容器的当前高度。``输出容器尺寸数据。</span><br></pre></td></tr></table></figure>

<p><strong>getImageData()：</strong></p>
<p>返回值：</p>
<p>类型：Object</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">属性：``left：图片的左侧偏移。``top：图片的上部偏移。``width：图片的宽度。``height：图片的高度。``输出图片的位置和尺寸大小。</span><br></pre></td></tr></table></figure>

<p><strong>getCanvasData()：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值：``类型：Object``属性：``left：canvas的左侧偏移。``top：canvas的上部偏移。``width：canvas的宽度。``height：canvas的高度。``输出canvas（图片容器）的位置和尺寸大小。</span><br></pre></td></tr></table></figure>

<p><strong>setCanvasData(data)：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值：``类型：Object``属性：``left：canvas的距离左侧新的偏移。``top：canvas的距离上部新的偏移。``width：canvas新的宽度。``height：canvas新的高度。``改变canvas（图片容器）的位置和尺寸大小。</span><br></pre></td></tr></table></figure>

<p><strong>getCropBoxData()：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值：``类型：Object``属性：``left：剪裁区域距离左侧的偏移。``top：剪裁区域距离上部的偏移。``width：剪裁区域的宽度。``height：剪裁区域的高度。``输出剪裁区域的位置和尺寸大小。</span><br></pre></td></tr></table></figure>

<p><strong>setCropBoxData(data)：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值：``类型：Object``属性：``left：剪裁区域距离左侧新的偏移。``top：剪裁区域距离上部新的偏移。``width：剪裁区域新的宽度。``height：剪裁区域新的高度。``改变剪裁区域的位置和尺寸大小。</span><br></pre></td></tr></table></figure>

<p><strong>getCroppedCanvas([options])：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数（默认值）：``类型：Object``属性：``width：输出的canvas目标宽度。``height：输出的canvas目标高度。``fillColor：canvas中填充的颜色。``返回值：``类型：HTMLCanvasElement``一个画有剪裁图片的canvas。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/08/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>YAML学习笔记</title>
    <url>/2023/06/19/YAML%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="什么是-YAML？"><a href="#什么是-YAML？" class="headerlink" title="什么是 YAML？"></a>什么是 YAML？</h1><p><a href="https://yaml.org/">yaml官网</a></p>
<blockquote>
<p>YAML: YAML Ain’t Markup Language™<br>What It Is:<br>YAML is a human-friendly data serialization<br>language for all programming languages.<br>It uses Unicode <a href="https://yaml.org/spec/1.2.2/#character-set">printable</a> characters, <a href="https://yaml.org/spec/1.2.2/#indicator-characters">some</a> of which provide structural information and the rest containing the data itself.<br>There are many kinds of <a href="https://yaml.org/spec/1.2.2/#dump">data structures</a>, but they can all be adequately <a href="https://yaml.org/spec/1.2.2/#representation-graph">represented</a> with three basic primitives: <a href="https://yaml.org/spec/1.2.2/#mapping">mappings</a> (hashes&#x2F;dictionaries), <a href="https://yaml.org/spec/1.2.2/#sequence">sequences</a> (arrays&#x2F;lists) and <a href="https://yaml.org/spec/1.2.2/#scalars">scalars</a> (strings&#x2F;numbers).<br>YAML was specifically created to work well for common use cases such as: configuration files, log files, interprocess messaging, cross-language data sharing, object persistence and debugging of complex data structures.</p>
</blockquote>
<span id="more"></span>

<blockquote>
<p>YAML：YAML Ain’t Markup Language™<br>它是什么：<br>YAML是一种人性化的数据序列化语言，适用于所有编程语言。<br>它使用Unicode <a href="https://yaml.org/spec/1.2.2/#character-set">可打印</a> 的字符，其中一些提供结构信息，其余包含数据本身。<br>有许多种数据结构，但它们都可以用三个基本原语充分<a href="https://yaml.org/spec/1.2.2/#representation-graph">表示</a>：映射（哈希&#x2F;字典）、序列（数组&#x2F;列表）和标量（字符串&#x2F;数字）。<br>YAML是专门为常见用例而创建的，例如：配置文件、日志文件、进程间消息传递、跨语言数据共享、对象持久化和调试复杂数据结构。</p>
</blockquote>
<blockquote>
<p>YAML 文件使用 .yml 或 .yaml 扩展名，并遵循特定的语法规则。<br>YAML是一种简单、表达力强的、以数据为导向的语言，它不是一种标记语言 (YAML)，作为配置格式时非常易读。<br>它具有直观的可视化结构，并且其逻辑非常简单：&#x3D;&#x3D;缩进的项目继承父项目的属性&#x3D;&#x3D;。<br>YAML 拥有 Perl、C、XML、HTML 和其他编程语言的特性。<br>YAML 也是 JSON 的超集，所以 &#x3D;&#x3D;JSON 文件在 YAML 中有效&#x3D;&#x3D;。<br>没有通常的格式符号，如大括号、方括号、结束标记或引号。YAML 文件更容易阅读，因为其使用 Python 风格的缩进来确定结构并表示嵌套。为了保持跨系统的可移植性，设计时不允许使用制表符，因此改用空格（字面意义的空格字符）。<br>注释可以用井号或哈希符号（#）。使用注释始终是最佳实践，因为其可描述代码的意图。&#x3D;&#x3D;YAML 不支持多行注释，每行都需要以井号字符为后缀&#x3D;&#x3D;。<br>YAML 文件的结构是映射或列表，遵循层次结构，具体取决于缩进以及定义键值的方式。它以映射来关联键值对。每个键必须是唯一的，而且顺序并不重要。这跟 Python 字典或 Bash 脚本中的变量赋值相似。<br>YAML 中的映射必须经过解析后才能关闭，然后创建新的映射。新的映射可以通过增加缩进级别或解析之前的映射并新建一个相邻映射来创建。<br>列表包括以特定顺序列出的值，可以包含任何数量的所需项目。&#x3D;&#x3D;一个列表序列以破折号（-）和空格开始，而缩进则将其与父级分开&#x3D;&#x3D;。<br>我们可以把序列看作是一个 Python 列表或者 Bash 或 Perl 中的数组。一个列表可以嵌入到一个映射中。<br>YAML 还包含标量，它是以 Unicode 编码的任意数据，可以用作字符串、整数、日期、数字或布尔等值。<br>在创建 YAML 文件时，需要确保遵循这些语法规则，而且文件必须有效。</p>
</blockquote>
<p>（摘自Red Hat红帽<a href="https://www.redhat.com/en/topics/automation/what-is-yaml">What is YAML?</a>）</p>
<h1 id="YAML-有什么用途？"><a href="#YAML-有什么用途？" class="headerlink" title="YAML 有什么用途？"></a>YAML 有什么用途？</h1><p>配置文件：YAML是一种常用的配置文件格式，它可以轻松地表示各种配置选项和参数。相比 JSON，因为 YAML 有更好的可读性，对用户更友好，所以通常建议用 YAML 来编写配置文件，尽管它们在大多数情况下可以互换使用。</p>
<p>数据传输：YAML可以用于在不同的应用程序或系统之间传输数据，因为它是一种跨平台的数据格式，易于解析和处理。</p>
<p>持久化存储：YAML可以用于将数据序列化为文本格式并进行持久化存储，例如将数据存储到文件或数据库中。</p>
<blockquote>
<p>除了在 Ansible 中使用之外，YAML 还用于 Kubernetes 资源和部署<br>（Ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能）<br>（网页Kubernetes 也称为 K8s，是用于自动部署、扩缩和管理容器化应用程序的开源系统）<br>使用 YAML 的一大好处是，YAML 文件可以添加到源代码控制中，比如 Github，这样就可以跟踪和审计变更。<br>(摘自自Red Hat红帽<a href="https://www.redhat.com/sysadmin/yaml-beginners">YAML for beginners</a>)</p>
</blockquote>
<h1 id="YAML基本语法"><a href="#YAML基本语法" class="headerlink" title="YAML基本语法"></a>YAML基本语法</h1><ul>
<li>&#x3D;&#x3D;大小写敏感&#x3D;&#x3D;</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用 Tab 键，只允许使用空格。</li>
<li>缩进的空格数不重要，但同级元素必须左侧对齐。</li>
<li>‘#’表示注释</li>
</ul>
<h2 id="集（Collections）"><a href="#集（Collections）" class="headerlink" title="集（Collections）"></a>集（Collections）</h2><blockquote>
<p>YAML’s <a href="https://yaml.org/spec/1.2.2/#block-collection-styles">block collections</a> use <a href="https://yaml.org/spec/1.2.2/#indentation-spaces">indentation</a> for scope and begin each entry on its own line. <a href="https://yaml.org/spec/1.2.2/#block-sequences">Block sequences</a> indicate each entry with a dash and space (“<code>-</code> ”). <a href="https://yaml.org/spec/1.2.2/#mapping">Mappings</a> use a colon and space (“<code>:</code> ”) to mark each <a href="https://yaml.org/spec/1.2.2/#mapping">key&#x2F;value pair</a>. <a href="https://yaml.org/spec/1.2.2/#comments">Comments</a> begin with an octothorpe (also called a “hash”, “sharp”, “pound” or “number sign” - “<code>#</code>”).<br>YAML also has <a href="https://yaml.org/spec/1.2.2/#flow-style-productions">flow styles</a>, using explicit <a href="https://yaml.org/spec/1.2.2/#indicator-characters">indicators</a> rather than <a href="https://yaml.org/spec/1.2.2/#indentation-spaces">indentation</a> to denote scope. The <a href="https://yaml.org/spec/1.2.2/#flow-sequences">flow sequence</a> is written as a <a href="https://yaml.org/spec/1.2.2/#flow-collection-styles">comma</a> separated list within <a href="https://yaml.org/spec/1.2.2/#flow-sequences">square</a> <a href="https://yaml.org/spec/1.2.2/#flow-sequences">brackets</a>. In a similar manner, the <a href="https://yaml.org/spec/1.2.2/#flow-mappings">flow mapping</a> uses <a href="https://yaml.org/spec/1.2.2/#flow-mappings">curly</a> <a href="https://yaml.org/spec/1.2.2/#flow-mappings">braces</a>.</p>
</blockquote>
<blockquote>
<p>YAML的<a href="https://yaml.org/spec/1.2.2/#block-collection-styles">block collections</a>(块集)使用缩进表示作用域，并在每个条目的单独一行上开始。<a href="https://yaml.org/spec/1.2.2/#block-sequences">Block sequences</a>(块序列)使用破折号和空格(“<code>-</code> “)表示每个条目。<a href="https://yaml.org/spec/1.2.2/#mapping">Mappings</a>(映射)使用冒号和空格(“<code>:</code> “)分隔<a href="https://yaml.org/spec/1.2.2/#mapping">键&#x2F;值对</a>。<a href="https://yaml.org/spec/1.2.2/#comments">Comments</a>(注释)以八角符号（也称为“hash”、“sharp”、“pound”或“number sign” - “<code>#</code>“）开头。<br>YAML还具有<a href="https://yaml.org/spec/1.2.2/#flow-style-productions">flow styles</a>(流程样式)，使用显式的指示符而不是缩进表示作用域。<a href="https://yaml.org/spec/1.2.2/#flow-sequences">Flow sequence</a>(流序列)以逗号分隔的列表形式写在方括号内。类似地，<a href="https://yaml.org/spec/1.2.2/#flow-mappings">flow mapping</a>(流映射)使用花括号表示。</p>
</blockquote>
<h2 id="结构（Structures）"><a href="#结构（Structures）" class="headerlink" title="结构（Structures）"></a>结构（Structures）</h2><blockquote>
<p>YAML uses three dashes (“<code>---</code>”) to separate <a href="https://yaml.org/spec/1.2.2/#directives">directives</a> from <a href="https://yaml.org/spec/1.2.2/#documents">document</a> <a href="https://yaml.org/spec/1.2.2/#nodes">content</a>. This also serves to signal the start of a document if no <a href="https://yaml.org/spec/1.2.2/#directives">directives</a> are present. Three dots ( “<code>...</code>”) indicate the end of a document without starting a new one, for use in communication channels.</p>
</blockquote>
<blockquote>
<p>YAML使用三个破折号（“—”）将指令与文档内容分开。如果没有指令，这也表示文档的开始。三个点（“…”）表示文档的结束，不会开始新的文档，适用于通信渠道。</p>
</blockquote>
<h1 id="YAML数据类型"><a href="#YAML数据类型" class="headerlink" title="YAML数据类型"></a>YAML数据类型</h1><blockquote>
<p>YAML <em>represents</em> any <em>native data structure</em> using three <a href="https://yaml.org/spec/1.2.2/#nodes">node kinds</a>: <a href="https://yaml.org/spec/1.2.2/#sequence">sequence</a> - an ordered series of entries; <a href="https://yaml.org/spec/1.2.2/#mapping">mapping</a> - an unordered association of <a href="https://yaml.org/spec/1.2.2/#node-comparison">unique</a> <a href="https://yaml.org/spec/1.2.2/#nodes">keys</a> to <a href="https://yaml.org/spec/1.2.2/#nodes">values</a>; and <a href="https://yaml.org/spec/1.2.2/#scalar">scalar</a> - any datum with opaque structure presentable as a series of Unicode characters.<br>Nodes<br>A YAML node represents a single native data structure. Such nodes have content of one of three kinds: scalar, sequence or mapping. In addition, each node has a tag which serves to restrict the set of possible values the content can have.</p>
</blockquote>
<blockquote>
<p>YAML使用三种节点类型来表示任何本地数据结构：序列（sequence）- 有序的条目序列；映射（mapping）- 无序的键值对；标量（scalar）- 任何具有不透明结构的数据，可以表示为一系列Unicode字符。<br>节点<br>一个YAML节点表示一个单一的本地数据结构。这样的节点有三种内容种类：标量（scalar）、序列（sequence）或映射（mapping）。此外，每个节点都有一个标记，用于限制内容可能具有的可能值集。</p>
</blockquote>
<p>YAML 支持以下几种数据类型：</p>
<ul>
<li>标量（scalar）：单个的、不可再分的值</li>
<li>序列（sequence）：一组按次序排列的值，又称为列表（list）</li>
<li>映射（mapping）：键值对的集合，又称为哈希（hashes） &#x2F; 字典（dictionary）</li>
</ul>
<h2 id="标量（scalar）"><a href="#标量（scalar）" class="headerlink" title="标量（scalar）"></a>标量（scalar）</h2><blockquote>
<p><a href="https://yaml.org/spec/1.2.2/#scalar">Scalar content</a> can be written in <a href="https://yaml.org/spec/1.2.2/#scalars">block</a> notation, using a <a href="https://yaml.org/spec/1.2.2/#literal-style">literal style</a> (indicated by “<code>|</code>”) where all <a href="https://yaml.org/spec/1.2.2/#line-break-characters">line breaks</a> are significant. Alternatively, they can be written with the <a href="https://yaml.org/spec/1.2.2/#folded-style">folded style</a> (denoted by “<code>&gt;</code>”) where each <a href="https://yaml.org/spec/1.2.2/#line-break-characters">line break</a> is <a href="https://yaml.org/spec/1.2.2/#line-folding">folded</a> to a <a href="https://yaml.org/spec/1.2.2/#white-space-characters">space</a> unless it ends an <a href="https://yaml.org/spec/1.2.2/#empty-lines">empty</a> or a <a href="https://yaml.org/spec/1.2.2/#example-more-indented-lines">more-indented</a> line.</p>
</blockquote>
<blockquote>
<p>标量内容可以使用块表示法编写，使用字面样式（由“|”表示），其中所有换行都是重要的。或者，它们可以使用折叠样式（由“&gt;”表示）编写，其中每个换行符折叠成空格，除非它结束一个空行或更多缩进的行。</p>
</blockquote>
<ul>
<li>字符串</li>
<li>布尔值</li>
<li>整数</li>
<li>浮点数</li>
<li>Null</li>
<li>时间</li>
<li>日期<br>纯量直接写在键值对的“value”中。<br>使用<code>key:[空格]value</code>的形式表示一对键值对（空格不能省略）</li>
</ul>
<h3 id="字符串（String）"><a href="#字符串（String）" class="headerlink" title="字符串（String）"></a>字符串（String）</h3><blockquote>
<p>Generic String<br>Kind<br><a href="https://yaml.org/spec/1.2.2/#scalar">Scalar</a><br>Definition<br><a href="https://yaml.org/spec/1.2.2/#representation-graph">Represents</a> a Unicode string, a sequence of zero or more Unicode characters. This type is usually <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">bound</a> to the <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">native</a> language’s string type or, for languages lacking one (such as C), to a character array.</p>
</blockquote>
<blockquote>
<p>通用字符串<br>类型<br>标量<br>定义<br>表示Unicode字符串，即零个或多个Unicode字符的序列。该类型通常绑定到本地语言的字符串类型，或者对于缺乏该类型的语言（如C语言）绑定到字符数组。</p>
</blockquote>
<p>字符串是一系列字符序列，可以使用单引号或双引号括起来，也可以不使用引号。如果字符串中包含特殊字符，应使用引号括起来。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">address:</span> <span class="string">&quot;123 Main St, New York&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="单引号和双引号的使用情况"><a href="#单引号和双引号的使用情况" class="headerlink" title="单引号和双引号的使用情况"></a>单引号和双引号的使用情况</h4><p>单引号：使用单引号表示一个纯量字符串，该字符串&#x3D;&#x3D;不会被转义，也不会被解析为特殊字符或变量&#x3D;&#x3D;。<br>单引号字符串中的任何特殊字符都会被视为普通字符。例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">&#x27;zhangsan \n lisi&#x27;</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;John Doe&#x27;</span></span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhangsan \n lisi</span><br><span class="line">John Doe</span><br></pre></td></tr></table></figure>

<p>双引号：使用双引号表示一个字符串，&#x3D;&#x3D;该字符串可以包含转义字符和变量，也可以包含特殊字符序列，特殊字符会输出为其本身想表达的含义，例如可以包含换行符，&#x3D;&#x3D;。<br>双引号字符串中的变量&#x3D;&#x3D;可以使用${}语法进行插值&#x3D;&#x3D;。例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">zhangsan</span> <span class="string">\n</span> <span class="string">lisi</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&quot;My name is $&#123;name&#125;.&quot;</span></span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">zhangsan</span></span><br><span class="line"><span class="string">lisi</span></span><br><span class="line"></span><br><span class="line"><span class="string">My</span> <span class="string">name</span> <span class="string">is</span> <span class="string">$&#123;name&#125;</span>  </span><br><span class="line"><span class="comment">#若name有传值，例如Anna，则为My name is $&#123;Anna&#125; </span></span><br></pre></td></tr></table></figure>


<h3 id="数字（Number）"><a href="#数字（Number）" class="headerlink" title="数字（Number）"></a>数字（Number）</h3><p>数字可以是整数或浮点数。</p>
<blockquote>
<p>Integer<br>Kind<br><a href="https://yaml.org/spec/1.2.2/#scalar">Scalar</a>.<br>Definition<br><a href="https://yaml.org/spec/1.2.2/#representation-graph">Represents</a> arbitrary sized finite mathematical integers. Scalars of this type should be <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">bound</a> to a <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">native</a> integer data type, if possible.<br>Some languages (such as Perl) provide only a “number” type that allows for both integer and floating-point values. A YAML <a href="https://yaml.org/spec/1.2.2/#processes-and-models">processor</a> may use such a type for integers as long as they round-trip properly.<br>In some languages (such as C), an integer may overflow the <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">native</a> type’s storage capability. A YAML <a href="https://yaml.org/spec/1.2.2/#processes-and-models">processor</a> may reject such a value as an error, truncate it with a warning or find some other manner to round-trip it. In general, integers representable using 32 binary digits should safely round-trip through most systems.</p>
</blockquote>
<blockquote>
<p>整数<br>类型<br>标量<br>定义<br>表示任意大小的有限数学整数。如果可能，此类型的标量应绑定到本地的整数数据类型。<br>一些语言（如Perl）仅提供允许整数和浮点数值的“数字”类型。只要它们正确地往返传输，YAML处理器可以将这种类型用于整数。<br>在一些语言中（如C语言）中，整数可能会超出本地类型的存储能力。YAML处理器可以将这样的值拒绝为错误，使用警告截断它或找到其他方法往返传输。一般来说，可以使用32位二进制数字表示的整数应该能够安全地通过大多数系统往返传输。</p>
</blockquote>
<blockquote>
<p>Floating Point<br>Kind<br><a href="https://yaml.org/spec/1.2.2/#scalar">Scalar</a>.<br>Definition<br><a href="https://yaml.org/spec/1.2.2/#representation-graph">Represents</a> an approximation to real numbers, including three special values (positive and negative infinity and “not a number”).<br>Some languages (such as Perl) provide only a “number” type that allows for both integer and floating-point values. A YAML <a href="https://yaml.org/spec/1.2.2/#processes-and-models">processor</a> may use such a type for floating-point numbers, as long as they round-trip properly.<br>Not all floating-point values can be stored exactly in any given <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">native</a> type. Hence a float value may change by “a small amount” when round-tripped. The supported range and accuracy depends on the implementation, though 32 bit IEEE floats should be safe. Since YAML does not specify a particular accuracy, using floating-point <a href="https://yaml.org/spec/1.2.2/#nodes">mapping keys</a> requires great care and is not recommended.</p>
</blockquote>
<blockquote>
<p>浮点数<br>类型<br>标量<br>定义<br>表示实数的近似值，包括三个特殊值（正无穷、负无穷和“非数字”）。<br>一些语言（如Perl）仅提供允许整数和浮点值的“数字”类型。只要它们正确地往返传输，YAML处理器可以将这种类型用于浮点数。<br>并非所有浮点数值都可以在任何给定的本地类型中精确存储。因此，浮点值可能在往返传输时“略微变化”。支持的范围和精度取决于实现，但32位IEEE浮点数应该是安全的。由于YAML不指定特定的精度，因此使用浮点映射键需要格外小心，不建议使用。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">number:</span> <span class="number">42</span></span><br><span class="line"><span class="attr">float:</span> <span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<h3 id="布尔值（Boolean）"><a href="#布尔值（Boolean）" class="headerlink" title="布尔值（Boolean）"></a>布尔值（Boolean）</h3><blockquote>
<p>Boolean<br>Kind<br><a href="https://yaml.org/spec/1.2.2/#scalar">Scalar</a>.<br>Definition<br><a href="https://yaml.org/spec/1.2.2/#representation-graph">Represents</a> a true&#x2F;false value. In languages without a <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">native</a> Boolean type (such as C), they are usually <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">bound</a> to a native integer type, using one for true and zero for false.</p>
</blockquote>
<blockquote>
<p>布尔值<br>类型<br>标量<br>定义<br>表示真或假的值。在没有本地布尔类型的语言（如C语言）中，它们通常绑定到本地的整数类型，使用1表示true，使用0表示false</p>
</blockquote>
<p>布尔值可以是true或false。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">is_student:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">is_adult:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="空值（Null）"><a href="#空值（Null）" class="headerlink" title="空值（Null）"></a>空值（Null）</h3><blockquote>
<p>Null<br>Kind<br><a href="https://yaml.org/spec/1.2.2/#scalar">Scalar</a>.<br>Definition<br><a href="https://yaml.org/spec/1.2.2/#representation-graph">Represents</a> the lack of a value. This is typically <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">bound</a> to a <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">native</a> null-like value (e.g., <code>undef</code> in Perl, <code>None</code> in Python). Note that a null is different from an empty string. Also, a <a href="https://yaml.org/spec/1.2.2/#mapping">mapping</a> entry with some <a href="https://yaml.org/spec/1.2.2/#nodes">key</a> and a null <a href="https://yaml.org/spec/1.2.2/#nodes">value</a> is valid and different from not having that <a href="https://yaml.org/spec/1.2.2/#nodes">key</a> in the <a href="https://yaml.org/spec/1.2.2/#mapping">mapping</a>.</p>
</blockquote>
<blockquote>
<p>空值<br>类型<br>标量<br>定义<br>表示缺少值。这通常绑定到本地的类似null的值（如Perl中的undef，Python中的None）。请注意，null与空字符串不同。此外，具有某个键和null值的映射条目是有效的，并且与在映射中没有该键不同。</p>
</blockquote>
<p>空值表示缺少一个值，可以使用null关键字表示，也可以用<code>~</code>表示。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">value:</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>


<h3 id="日期和时间（Date-and-Time）"><a href="#日期和时间（Date-and-Time）" class="headerlink" title="日期和时间（Date and Time）"></a>日期和时间（Date and Time）</h3><p>日期和时间时间采用 ISO8601 格式表示。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">date:</span> <span class="number">2022-08-01</span></span><br><span class="line"><span class="attr">time:</span> <span class="number">20</span><span class="string">:30:00</span></span><br><span class="line"><span class="attr">datetime:</span> <span class="number">2022-08-01T20:30:00Z</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据类型示例</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">30</span></span><br><span class="line"><span class="attr">is_student:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">weight:</span> <span class="number">65.5</span></span><br><span class="line"><span class="attr">birthday:</span> <span class="number">1990-01-01</span></span><br><span class="line"></span><br><span class="line"><span class="attr">boolean:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="literal">TRUE</span>  <span class="comment">#true,True都可以</span></span><br><span class="line">    <span class="bullet">-</span> <span class="literal">FALSE</span>  <span class="comment">#false，False都可以</span></span><br><span class="line"><span class="attr">float:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3.14</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6.8523015e+5</span>  <span class="comment">#可以使用科学计数法</span></span><br><span class="line"><span class="attr">int:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">123</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">0b1010_0111_0100_1010_1110</span>    <span class="comment">#二进制表示</span></span><br><span class="line"><span class="attr">null:</span></span><br><span class="line">    <span class="attr">nodeName:</span> <span class="string">&#x27;node&#x27;</span></span><br><span class="line">    <span class="attr">parent:</span> <span class="string">~</span>  <span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哈哈</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;Hello world&#x27;</span>  <span class="comment">#可以使用双引号或者单引号包裹特殊字符</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">newline</span></span><br><span class="line">      <span class="string">newline2</span>    <span class="comment">#字符串可以拆成多行，每一行会被转化成一个空格</span></span><br><span class="line"><span class="attr">date:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2018-02-17</span>    <span class="comment">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span></span><br><span class="line"><span class="attr">datetime:</span> </span><br><span class="line">    <span class="bullet">-</span>  <span class="number">2018-02-17T15:02:31+08:00</span>    <span class="comment">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></table></figure>

<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>YAML 允许使用两个感叹号，强制转换数据类型</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">e:</span> <span class="type">!!str</span> <span class="number">123</span></span><br><span class="line"><span class="attr">f:</span> <span class="type">!!str</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="序列（Sequence）"><a href="#序列（Sequence）" class="headerlink" title="序列（Sequence）"></a>序列（Sequence）</h2><blockquote>
<p>Generic Mapping<br>Kind<br><a href="https://yaml.org/spec/1.2.2/#sequence">Sequence</a>.<br>Definition<br><a href="https://yaml.org/spec/1.2.2/#representation-graph">Represents</a> a collection indexed by sequential integers starting with zero. Example <a href="https://yaml.org/spec/1.2.2/#constructing-native-data-structures">bindings</a> to <a href="https://yaml.org/spec/1.2.2/#representing-native-data-structures">native</a> types include Perl’s array, Python’s list or tuple and Java’s array or Vector.</p>
</blockquote>
<blockquote>
<p>通用序列<br>类型<br>序列<br>定义<br>表示一组以从零开始的顺序整数索引的集合。绑定到本地类型的示例包括Perl的数组、Python的列表或元组和Java的数组或向量。</p>
</blockquote>
<p>序列（Sequence）：序列是一种元素的有序集合，每个元素可以是任何类型的值，例如字符串、数字、布尔值、映射或序列。</p>
<p>使用短横线和空格表示一个新的元素。<br>使用<code>-</code>表示序列中的元素。<br>序列使用方括号来表示，元素之间使用逗号分隔。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 序列示例</span></span><br><span class="line"><span class="attr">fruits:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Apple</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Banana</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Orange</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">A</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">B</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">C</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pets:</span> [<span class="string">dog</span>,<span class="string">cat</span>,<span class="string">pig</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> [<span class="string">value1</span>, <span class="string">value2</span>, <span class="string">...</span>]</span><br></pre></td></tr></table></figure>

<p>一个相对复杂的例子：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">companies:</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company1</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">200W</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company2</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">500W</span></span><br></pre></td></tr></table></figure>

<p>意思是 companies 属性是一个序列，每一个序列元素又是由 id、name、price 三个属性构成。</p>
<p>序列也可以使用流式(flow)的方式表示：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">companies:</span> [&#123;<span class="attr">id:</span> <span class="number">1</span>,<span class="attr">name:</span> <span class="string">company1</span>,<span class="attr">price:</span> <span class="string">200W</span>&#125;,&#123;<span class="attr">id:</span> <span class="number">2</span>,<span class="attr">name:</span> <span class="string">company2</span>,<span class="attr">price:</span> <span class="string">500W</span>&#125;]</span><br></pre></td></tr></table></figure>



<h2 id="映射（Mapping）"><a href="#映射（Mapping）" class="headerlink" title="映射（Mapping）"></a>映射（Mapping）</h2><blockquote>
<p>Generic Mapping<br>Kind<br>Mapping<br>Definition<br>Represents an associative container, where each key is unique in the association and mapped to exactly one value. YAML places no restrictions on the type of keys; in particular, they are not restricted to being scalars. Example bindings to native types include Perl’s hash, Python’s dictionary and Java’s Hashtable.</p>
</blockquote>
<blockquote>
<p>通用映射<br>类型<br>映射<br>定义<br>表示一个关联容器，其中每个键在关联中是唯一的，并映射到一个值。YAML对键的类型没有限制；特别是，它们不限于标量。绑定到本地类型的示例包括Perl的哈希、Python的字典和Java的哈希表。</p>
</blockquote>
<p>映射（Map）：使用冒号来分隔键值对，使用短横线和空格来表示一个新的键值对。&#x3D;&#x3D;<strong>key: value</strong>&#x3D;&#x3D;<br>映射使用大括号来表示，键值对之间使用逗号分隔。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">key:</span> </span><br><span class="line">    <span class="attr">child-key:</span> <span class="string">value</span></span><br><span class="line">    <span class="attr">child-key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure>


<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">website:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">bianchengbang</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">www.biancheng.net</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 映射示例</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Alice</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">address:</span></span><br><span class="line">    <span class="attr">city:</span> <span class="string">New</span> <span class="string">York</span></span><br><span class="line">    <span class="attr">street:</span> <span class="number">123</span> <span class="string">Main</span> <span class="string">St</span></span><br></pre></td></tr></table></figure>


<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">key:&#123;key1: value1, key2: value2, ...&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">website:</span> &#123;<span class="attr">name:</span> <span class="string">bianchengbang</span>,<span class="attr">url:</span> <span class="string">www.biancheng.net</span>&#125;</span><br></pre></td></tr></table></figure>


<h3 id="复杂的映射Mapping"><a href="#复杂的映射Mapping" class="headerlink" title="复杂的映射Mapping"></a>复杂的映射Mapping</h3><p>较为复杂的映射格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">?</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexkey1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexkey2</span></span><br><span class="line"><span class="string">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexvalue1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexvalue2</span></span><br></pre></td></tr></table></figure>

<p>意思即映射的属性是一个序列 [complexkey1,complexkey2]，对应的值也是一个序列 [complexvalue1,complexvalue2]</p>
<h1 id="注释（Comment）"><a href="#注释（Comment）" class="headerlink" title="注释（Comment）"></a>注释（Comment）</h1><p>注释以井号（#）开头，可以出现在行末或行中间。<br>注释可以帮助我们记录和解释YAML文档中的内容。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释示例</span></span><br><span class="line"><span class="comment"># 这是一个映射</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="comment"># 这是一个字符串键</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Alice</span></span><br><span class="line">  <span class="comment"># 这是一个整数键</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>


<h1 id="复合结构"><a href="#复合结构" class="headerlink" title="复合结构"></a>复合结构</h1><p>以上三种数据结构可以任意组合使用，以实现不同的用户需求，例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zhangsan</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">pets:</span></span><br><span class="line">    <span class="string">-dog</span></span><br><span class="line">    <span class="string">-cat</span></span><br><span class="line">    <span class="string">-pig</span></span><br><span class="line">  <span class="attr">car:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">QQ</span></span><br><span class="line">  <span class="attr">child:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">zhangxiaosan</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">languages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span> </span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line">  <span class="attr">YAML:</span> <span class="string">yaml.org</span> </span><br><span class="line">  <span class="attr">Ruby:</span> <span class="string">ruby-lang.org</span> </span><br><span class="line">  <span class="attr">Python:</span> <span class="string">python.org</span> </span><br><span class="line">  <span class="attr">Perl:</span> <span class="string">use.perl.org</span></span><br></pre></td></tr></table></figure>

<p>转换为 json 为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="attr">languages:</span> [ <span class="string">&#x27;Ruby&#x27;</span>, <span class="string">&#x27;Perl&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>],</span><br><span class="line">  <span class="attr">websites:</span> &#123;</span><br><span class="line">    <span class="attr">YAML:</span> <span class="string">&#x27;yaml.org&#x27;</span>,</span><br><span class="line">    <span class="attr">Ruby:</span> <span class="string">&#x27;ruby-lang.org&#x27;</span>,</span><br><span class="line">    <span class="attr">Python:</span> <span class="string">&#x27;python.org&#x27;</span>,</span><br><span class="line">    <span class="attr">Perl:</span> <span class="string">&#x27;use.perl.org&#x27;</span> </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h1><h2 id="缩进（Indentation）"><a href="#缩进（Indentation）" class="headerlink" title="缩进（Indentation）"></a>缩进（Indentation）</h2><h3 id="缩进空格-Indentation-Spaces"><a href="#缩进空格-Indentation-Spaces" class="headerlink" title="缩进空格 Indentation Spaces"></a>缩进空格 Indentation Spaces</h3><blockquote>
<p>Indentation Spaces<br>In YAML block styles, structure is determined by indentation. In general, indentation is defined as a zero or more space characters at the start of a line.<br>To maintain portability, tab characters must not be used in indentation, since different systems treat tabs differently. Note that most modern editors may be configured so that pressing the tab key results in the insertion of an appropriate number of spaces.<br>The amount of indentation is a presentation detail and must not be used to convey content information.<br>Each <a href="https://yaml.org/spec/1.2.2/#nodes">node</a> must be indented further than its parent <a href="https://yaml.org/spec/1.2.2/#nodes">node</a>. All sibling <a href="https://yaml.org/spec/1.2.2/#nodes">nodes</a> must use the exact same indentation level. However the <a href="https://yaml.org/spec/1.2.2/#nodes">content</a> of each sibling <a href="https://yaml.org/spec/1.2.2/#nodes">node</a> may be further indented independently.</p>
</blockquote>
<blockquote>
<p>缩进空格<br>缩进是用来表示嵌套结构的方式。<br>每当一个新的映射或序列开始时，都必须缩进两个或四个空格，以表明其嵌套级别。<br>缩进的空格数量必须是相同的，不能混用。<br>另外，缩进也可以用来对齐相同级别的键值对或元素。<br>每个节点必须比其父节点缩进更多。所有兄弟节点必须使用完全相同的缩进级别。但是，每个兄弟节点的内容可以独立地进一步缩进。</p>
</blockquote>
<h3 id="分隔空格Separation-Spaces"><a href="#分隔空格Separation-Spaces" class="headerlink" title="分隔空格Separation Spaces"></a>分隔空格Separation Spaces</h3><blockquote>
<p>Separation Spaces<br>Outside <a href="https://yaml.org/spec/1.2.2/#indentation-spaces">indentation</a> and <a href="https://yaml.org/spec/1.2.2/#scalar">scalar content</a>, YAML uses <a href="https://yaml.org/spec/1.2.2/#white-space-characters">white space</a> characters for <em>separation</em> between tokens within a line. Note that such <a href="https://yaml.org/spec/1.2.2/#white-space-characters">white space</a> may safely include <a href="https://yaml.org/spec/1.2.2/#white-space-characters">tab</a> characters.<br>Separation spaces are a <a href="https://yaml.org/spec/1.2.2/#presenting-the-serialization-tree">presentation detail</a> and must not be used to convey <a href="https://yaml.org/spec/1.2.2/#nodes">content</a> information.</p>
</blockquote>
<blockquote>
<p>分隔空格<br>在缩进和标量内容之外，YAML使用空白字符在行内标记之间进行分隔。请注意，这样的空格可以安全地包括制表符。<br>分隔空格是表示细节，不能用于传达内容信息。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 缩进示例</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Alice</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">address:</span></span><br><span class="line">    <span class="attr">city:</span> <span class="string">New</span> <span class="string">York</span></span><br><span class="line">    <span class="attr">street:</span> <span class="number">123</span> <span class="string">Main</span> <span class="string">St</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="锚点、引用、合并"><a href="#锚点、引用、合并" class="headerlink" title="锚点、引用、合并"></a>锚点、引用、合并</h2><h3 id="锚点（Anchor）"><a href="#锚点（Anchor）" class="headerlink" title="&amp; 锚点（Anchor）"></a>&amp; 锚点（Anchor）</h3><p>“&amp;”符号用于创建一个锚点（Anchor）。<br>锚点允许在YAML文档中创建可重用的节点，从而避免重复定义相同的节点。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="comment">#defaults映射</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line"><span class="comment">#development映射</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="comment">#test映射</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，锚点<code>defaults</code>定义了一个包含<code>adapter</code>和<code>host</code>键的映射。然后，在<code>development</code>和<code>test</code>映射中，使用<code>&lt;&lt;</code>合并键将锚点<code>defaults</code>与这些映射合并，从而&#x3D;&#x3D;继承锚点中定义的键值对&#x3D;&#x3D;。</p>
<p>具体来说，<code>&lt;&lt;</code>合并键表示&#x3D;&#x3D;将当前映射与另一个映射合并，从而继承另一个映射中的键值对&#x3D;&#x3D;。<br><code>*</code>后面跟着锚点的名称，表示要使用该锚点中定义的键值对。在示例中，<code>&lt;&lt;: *defaults</code>表示将<code>defaults</code>锚点中定义的键值对合并到当前映射中。</p>
<p>因此，在给定的YAML示例中，”&amp;”符号的作用是创建一个锚点，并使用”&lt;&lt;”合并键将锚点中定义的键值对合并到其他映射中，从而避免了重复定义相同的键值对的问题。</p>
<h3 id="引用（Alias）"><a href="#引用（Alias）" class="headerlink" title="* 引用（Alias）"></a>* 引用（Alias）</h3><blockquote>
<p>Alias Nodes<br>Subsequent occurrences of a previously <a href="https://yaml.org/spec/1.2.2/#serializing-the-representation-graph">serialized</a> node are <a href="https://yaml.org/spec/1.2.2/#presenting-the-serialization-tree">presented</a> as <em>alias nodes</em>. The first occurrence of the <a href="https://yaml.org/spec/1.2.2/#nodes">node</a> must be marked by an <a href="https://yaml.org/spec/1.2.2/#anchors-and-aliases">anchor</a> to allow subsequent occurrences to be <a href="https://yaml.org/spec/1.2.2/#presenting-the-serialization-tree">presented</a> as alias nodes.<br>An alias node is denoted by the “<code>*</code>” indicator. The alias refers to the most recent preceding <a href="https://yaml.org/spec/1.2.2/#nodes">node</a> having the same <a href="https://yaml.org/spec/1.2.2/#anchors-and-aliases">anchor</a>. It is an error for an alias node to use an <a href="https://yaml.org/spec/1.2.2/#anchors-and-aliases">anchor</a> that does not previously occur in the <a href="https://yaml.org/spec/1.2.2/#documents">document</a>. It is not an error to specify an <a href="https://yaml.org/spec/1.2.2/#anchors-and-aliases">anchor</a> that is not used by any alias node.<br>Note that an alias node must not specify any <a href="https://yaml.org/spec/1.2.2/#node-properties">properties</a> or <a href="https://yaml.org/spec/1.2.2/#nodes">content</a>, as these were already specified at the first occurrence of the <a href="https://yaml.org/spec/1.2.2/#nodes">node</a>.</p>
</blockquote>
<blockquote>
<p>别名节点<br>先前序列化的节点的后续出现形式被表示为别名节点。必须通过锚点标记节点的第一次出现，以允许后续出现形式表示为别名节点。<br>别名节点由<code>*</code>指示符表示。该别名引用具有相同锚点的最近的先前节点。如果别名节点使用尚未在文档中出现的锚点，则会出现错误。指定一个别名节点未使用的锚点不是错误。<br>请注意，别名节点不得指定任何属性或内容，因为这些已在节点的第一次出现时指定。</p>
</blockquote>
<p><code>*</code>符号是一个引用标记（anchor reference），用于引用先前定义的锚点（anchor）。</p>
<p>&amp; 锚点和 * 别名，可以用来引用。<code>*</code>符号后跟着锚点的名称，表示要引用该锚点中定义的节点。</p>
<p>引用标记<code>*</code>可以在YAML文档的任何地方使用，包括映射、序列和标量值。它允许在文档中创建可重用的节点，并在需要时引用它们。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="comment">#defaults映射</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line"><span class="comment">#development映射</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="comment">#test映射</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure>

<p>相当于:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">defaults:</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br></pre></td></tr></table></figure>


<p>下面是另一个例子:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">&amp;showell</span> <span class="string">Steve</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Clark</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Brian</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">Oren</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">*showell</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>转为 JavaScript 代码如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line">[ <span class="string">&#x27;Steve&#x27;</span>, <span class="string">&#x27;Clark&#x27;</span>, <span class="string">&#x27;Brian&#x27;</span>, <span class="string">&#x27;Oren&#x27;</span>, <span class="string">&#x27;Steve&#x27;</span> ]</span><br></pre></td></tr></table></figure>

<h3 id="合并（Merge）"><a href="#合并（Merge）" class="headerlink" title="&lt;&lt; 合并（Merge）"></a>&lt;&lt; 合并（Merge）</h3><p>“&lt;&lt;”符号是一个合并键（merge key），它用于将一个映射或者哈希表与另一个映射或哈希表合并。表示合并到当前数据，用来引用锚点。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#示例</span></span><br><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line"><span class="comment">#defaults映射</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line"><span class="comment">#development映射</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line"><span class="comment">#test映射</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure>

<p>在给定的示例中，<code>&lt;&lt;: *defaults</code>表示将当前映射与名为<code>default</code>的映射合并。</p>
<p><code>*defaults</code>是一个锚点（anchor），它是一个可重用的命名节点，可以在其他位置引用它，<code>*defaults</code>引用了名为<code>default</code>的锚点。</p>
<p>如果<code>default</code>锚点被定义为一个映射，那么<code>&lt;&lt;: *defaults</code>将会将当前映射与<code>default</code>映射进行合并。</p>
<p>合并的方式如下：</p>
<ol>
<li><p>当前映射中没有”default”中的键时，将”default”中的所有键值对添加到当前映射中。</p>
</li>
<li><p>当前映射中有”default”中的键时，将”default”中的键值对覆盖当前映射中对应的键值对。</p>
</li>
</ol>
<h2 id="标签（Tags）"><a href="#标签（Tags）" class="headerlink" title="标签（Tags）"></a>标签（Tags）</h2><blockquote>
<p>In YAML, <a href="https://yaml.org/spec/1.2.2/#resolved-tags">untagged nodes</a> are given a type depending on the <a href="https://yaml.org/spec/1.2.2/#processes-and-models">application</a>. The examples in this specification generally use the <code>seq</code>, <code>map</code> and <code>str</code> types from the <a href="https://yaml.org/spec/1.2.2/#failsafe-schema">fail safe schema</a>. A few examples also use the <code>int</code>, <code>float</code> and <code>null</code> types from the <a href="https://yaml.org/spec/1.2.2/#json-schema">JSON schema</a>.<br>Explicit typing is denoted with a <a href="https://yaml.org/spec/1.2.2/#tags">tag</a> using the exclamation point (“<code>!</code>”) symbol. <a href="https://yaml.org/spec/1.2.2/#tags">Global tags</a> are URIs and may be specified in a <a href="https://yaml.org/spec/1.2.2/#tag-shorthands">tag shorthand</a> notation using a <a href="https://yaml.org/spec/1.2.2/#tag-handles">handle</a>. <a href="https://yaml.org/spec/1.2.2/#processes-and-models">Application</a>-specific <a href="https://yaml.org/spec/1.2.2/#tags">local tags</a> may also be used.</p>
</blockquote>
<blockquote>
<p>在YAML中，未标记的节点根据应用程序赋予一种类型。本规范中的示例通常使用故障安全模式下的seq、map和str类型。一些示例还使用JSON模式下的int、float和null类型。<br>显式类型使用感叹号（“!”）符号标记。全局标记是URI，可以使用句柄的标记缩写表示。也可以使用特定于应用程序的本地标记。</p>
</blockquote>
<p>标签用”!”表示，可以用来标识数据类型或格式。标签可以是内置标签或自定义标签。内置标签包括”!!str”（字符串）、”!!int”（整数）、”!!float”（浮点数）等，自定义标签则可以根据需要进行定义。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="type">!!str</span> <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!!int</span> <span class="string">&quot;456&quot;</span></span><br><span class="line"><span class="bullet">-</span> <span class="type">!!float</span> <span class="string">&quot;3.14&quot;</span></span><br></pre></td></tr></table></figure>

<p>在上面的示例中，使用了内置标签<code>!!str</code>、<code>!!int</code>和<code>!!float</code>来标识不同的数据类型。</p>
<h2 id="文档分隔符"><a href="#文档分隔符" class="headerlink" title="---文档分隔符"></a><code>---</code>文档分隔符</h2><p>一个 YAML 文件可以由一个或多个文档组成，文档之间使用<code>---</code>作为分隔符，且个文档相互独立，互不干扰。<br>如果 YAML 文件只包含一个文档，则<code>---</code>分隔符可以省略。  </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">website:</span></span><br><span class="line">   <span class="attr">name:</span> <span class="string">bianchengbang</span></span><br><span class="line">   <span class="attr">url:</span> <span class="string">www.biancheng.net</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">website:</span> &#123;<span class="attr">name:</span> <span class="string">bianchengbang</span>,<span class="attr">url:</span> <span class="string">www.biancheng.net</span>&#125;</span><br><span class="line"><span class="attr">pets:</span></span><br><span class="line">   <span class="string">-dog</span></span><br><span class="line">   <span class="string">-cat</span></span><br><span class="line">   <span class="string">-pig</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">pets:</span> [<span class="string">dog</span>,<span class="string">cat</span>,<span class="string">pig</span>]</span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">&quot;zhangsan \n lisi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;zhangsan \n lisi&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="日志文件完整YAML示例"><a href="#日志文件完整YAML示例" class="headerlink" title="日志文件完整YAML示例"></a>日志文件完整YAML示例</h1><blockquote>
<p>a sample log file</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">Time:</span> <span class="number">2001-11-23 15:01:42 -5</span></span><br><span class="line"><span class="attr">User:</span> <span class="string">ed</span></span><br><span class="line"><span class="attr">Warning:</span></span><br><span class="line">  <span class="string">This</span> <span class="string">is</span> <span class="string">an</span> <span class="string">error</span> <span class="string">message</span></span><br><span class="line">  <span class="string">for</span> <span class="string">the</span> <span class="string">log</span> <span class="string">file</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">Time:</span> <span class="number">2001-11-23 15:02:31 -5</span></span><br><span class="line"><span class="attr">User:</span> <span class="string">ed</span></span><br><span class="line"><span class="attr">Warning:</span></span><br><span class="line">  <span class="string">A</span> <span class="string">slightly</span> <span class="string">different</span> <span class="string">error</span></span><br><span class="line">  <span class="string">message.</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">Date:</span> <span class="number">2001-11-23 15:03:17 -5</span></span><br><span class="line"><span class="attr">User:</span> <span class="string">ed</span></span><br><span class="line"><span class="attr">Fatal:</span></span><br><span class="line">  <span class="string">Unknown</span> <span class="string">variable</span> <span class="string">&quot;bar&quot;</span></span><br><span class="line"><span class="attr">Stack:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">file:</span> <span class="string">TopClass.py</span></span><br><span class="line">  <span class="attr">line:</span> <span class="number">23</span></span><br><span class="line">  <span class="attr">code:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    x = MoreObject(&quot;345\n&quot;)</span></span><br><span class="line"><span class="string"></span><span class="bullet">-</span> <span class="attr">file:</span> <span class="string">MoreClass.py</span></span><br><span class="line">  <span class="attr">line:</span> <span class="number">58</span></span><br><span class="line">  <span class="attr">code:</span> <span class="string">|-</span></span><br><span class="line">    <span class="string">foo</span> <span class="string">=</span> <span class="string">bar</span></span><br></pre></td></tr></table></figure>

<h1 id="Spring-Boot-常用yml示例："><a href="#Spring-Boot-常用yml示例：" class="headerlink" title="Spring Boot 常用yml示例："></a>Spring Boot 常用yml示例：</h1><p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/myapp</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mydb</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">myuser</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mypassword</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">INFO</span></span><br><span class="line">    <span class="attr">com.example.mypackage:</span> <span class="string">DEBUG</span></span><br><span class="line"><span class="attr">myapp:</span></span><br><span class="line">  <span class="attr">greeting:</span> <span class="string">Hello,</span> <span class="string">World!</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">5000</span></span><br></pre></td></tr></table></figure>

<h1 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h1><blockquote>
<ul>
<li><a href="https://yaml.org/spec/1.2.2/#chapter-1-introduction-to-yaml">YAML Ain’t Markup Language (YAML™) version 1.2</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a></li>
<li><a href="https://www.redhat.com/sysadmin/yaml-beginners">YAML for beginners</a></li>
<li><a href="https://www.redhat.com/en/topics/automation/what-is-yaml">What is YAML?</a></li>
<li><a href="https://yaml.com/doc/glossary/">YAML Glossary</a></li>
<li><a href="http://c.biancheng.net/spring_boot/yaml.html"># YAML教程（快速入门版）</a></li>
<li><a href="https://www.runoob.com/w3cnote/yaml-intro.html">## YAML 入门教程</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>YAML</tag>
      </tags>
  </entry>
  <entry>
    <title>properties文件或类笔记</title>
    <url>/2023/08/24/properties%E6%96%87%E4%BB%B6%E6%88%96%E7%B1%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>有关properties配置文件的详细（并非）研究</p>
<span id="more"></span>

<p>properties文件是java所支持的配置文件类型，java中的properties文件是一种配置文件，  主要用于表达配置信息，  文件类型为*.properties，  格式为文本文件，  在properties文件中，可以用”#”来作注释。</p>
<p>文件的内容是格式是 “键&#x3D;值”的格式，  </p>
<p>properties是配置文件。</p>
<p>主要的作用是通过修改配置文件可以方便地修改代码中的参数，实现不用改class文件即可灵活变更参数。</p>
<p>解释：java运行中java文件会变成class文件，之后无法通过反编译找到原样的代码，这样的话，如果java类中某个参数变更，就很难灵活的实现参数修改，这个时候properties 文件就能很灵活的实现配置，减少代码的维护成本和提高开发效率。</p>
<h3 id="jdbc-properties-database-properties示例："><a href="#jdbc-properties-database-properties示例：" class="headerlink" title="jdbc.properties&#x2F;database.properties示例："></a>jdbc.properties&#x2F;database.properties示例：</h3><p>在SMM项目中，JDBC配置文件用于配置应用程序与数据库之间的连接。<br>通常，JDBC配置文件中应该包含以下属性：</p>
<ol>
<li><code>jdbc.driver</code>: 数据库驱动程序的类名，例如com.mysql.jdbc.Driver。</li>
<li><code>jdbc.url</code>: 数据库的URL地址，例如jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mydatabase。</li>
<li><code>jdbc.username</code>: 连接数据库所需的用户名。</li>
<li><code>jdbc.password</code>: 连接数据库所需的密码。</li>
<li><code>jdbc.initialSize</code>: 连接池初始化时创建的连接数。</li>
<li><code>jdbc.maxActive</code>: 连接池中最大的活动连接数。</li>
<li><code>jdbc.maxIdle</code>: 连接池中最大的空闲连接数。</li>
<li><code>jdbc.minIdle</code>: 连接池中最小的空闲连接数。</li>
</ol>
<p>以上属性是最常见的JDBC配置属性，当然，还有其他一些属性可以根据具体应用场景进行配置，例如连接超时时间、查询超时时间、验证语句等。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#com.mysql.cj.jdbc.Driver为MySQL8.0版本以上</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/kgc</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root  </span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5  </span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">10</span></span><br></pre></td></tr></table></figure>


<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/appinfodb?useUnicode=true&amp;amp&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=round</span></span><br><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver  </span></span><br><span class="line"><span class="comment">#这是JDBC连接字符串，指定了MySQL数据库的地址和要连接的数据库名称。</span></span><br><span class="line"><span class="comment">#com.mysql.jdbc.Driver 为MySQL5.0版本左右</span></span><br><span class="line"><span class="comment">#`useUnicode=true`指定要使用Unicode字符集，</span></span><br><span class="line"><span class="comment">#`characterEncoding=utf-8`指定字符集为UTF-8</span></span><br><span class="line"><span class="comment">#`zeroDateTimeBehavior=round`指定当数据库中的日期时间字段为零时，应将其舍入到最接近的值。</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root  </span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root  </span></span><br><span class="line"><span class="attr">minIdle</span>=<span class="string">45  </span></span><br><span class="line"><span class="attr">maxIdle</span>=<span class="string">50  </span></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">5  </span></span><br><span class="line"><span class="attr">maxActive</span>=<span class="string">100  </span></span><br><span class="line"><span class="attr">maxWait</span>=<span class="string">100  </span></span><br><span class="line"><span class="attr">removeAbandonedTimeout</span>=<span class="string">180  </span></span><br><span class="line"><span class="comment">#这是连接被认为是遗弃的时间，以秒为单位，在这段时间内未被使用的连接将被关闭，这里配置为180秒。</span></span><br><span class="line"><span class="attr">removeAbandoned</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#这是一个布尔值，指示是否启用连接的遗弃检查。如果设置为true，则连接池将在`removeAbandonedTimeout`时间内检查连接是否被遗弃，如果是，则关闭该连接。</span></span><br></pre></td></tr></table></figure>



<h3 id="读取properties文件示例代码"><a href="#读取properties文件示例代码" class="headerlink" title="读取properties文件示例代码"></a>读取properties文件示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title function_">getProperties</span><span class="params">(String config)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//获取properties文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        InputStreamReader in=<span class="literal">null</span>;<span class="comment">//输入流</span></span><br><span class="line">        FileInputStream inStream=<span class="literal">null</span> ;<span class="comment">//文件输入</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            inStream = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(config));</span><br><span class="line">            in = <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(inStream,(<span class="string">&quot;UTF-8&quot;</span>));    </span><br><span class="line">            <span class="comment">// 处理中文字符流</span></span><br><span class="line">            properties.load(in);</span><br><span class="line">            <span class="comment">//加载properties文件</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;无法找到并使用配置文件: [ &quot;</span> + config+<span class="string">&quot; ]&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (inStream!=<span class="literal">null</span>) &#123;</span><br><span class="line">                inStream.close();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (in!=<span class="literal">null</span>) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><p>主要用于读取Java的配置文件.<br>Properties类表示一组持久的属性。<br>properties属性可以保存到流中或从流中加载。<br>properties属性列表中的每个键及其对应的值都是一个字符串。<br>properties属性列表可以包含另一个属性列表作为其“默认值”;<br>如果在原始属性列表中找不到属性键，则会搜索此第二个属性列表。</p>
<p>方法：<br>load—加载;<br>store–存储;<br>load（Reader）&#x2F;store（Writer，String）方法以一个简单的面向行的格式从以下格式加载和存储属性到基于字符的流。<br>load（InputStream）&#x2F;store（OutputStream，String）方法的工作方式与加载（Reader）&#x2F;存储（Writer，String）对相同，只是输入&#x2F;输出流以ISO 8859-1字符编码编码。</p>
<p><strong>Properties 类表示了一个持久的属性集。</strong><br>Properties 可保存在流中或从流中加载。属性列表中每个键及其对应值都是一个字符串。</p>
<p>一个属性列表可包含另一个属性列表作为它的“默认值”;<br>如果未能在原有的属性列表中搜索到属性键，则搜索第二个属性列表。</p>
<blockquote>
<p>因为 Properties 继承于 Hashtable，所以可对 Properties 对象应用 put 和 putAll 方法。<strong>但不建议使用这两个方法，因为它们允许调用者插入其键或值不是 String 的项。</strong><br>相反，应该使用 setProperty 方法。如果在“不安全”的 Properties 对象(即包含非 String 的键或值)上调用 store 或 save 方法，则该调用将失败。<br>类似地，如果在“不安全”的Properties 对象(即包含非 String 的键)上调用 propertyNames 或 list 方法，则该调用将失败。</p>
</blockquote>
<h3 id="简单用例"><a href="#简单用例" class="headerlink" title="简单用例"></a>简单用例</h3><h4 id="1打印自定义-properties-文件中的值"><a href="#1打印自定义-properties-文件中的值" class="headerlink" title="-1打印自定义.properties 文件中的值"></a>-1打印自定义.properties 文件中的值</h4><p>在src&#x2F;main&#x2F;resources 目录下，放置 jdbc.properties 文件，是数据库的配置文件。<br>![[Pasted image 20230617144233.png]]</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driverjdbc</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf8jdbc</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>list 输出到控制台 用绝对路径加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">name1Test</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">try</span>&#123;</span><br><span class="line">		Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">		<span class="comment">//磁盘符的绝对路径</span></span><br><span class="line">		InputStream input=<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\jdbc.properties&quot;</span>));</span><br><span class="line">		properties.load(input);</span><br><span class="line">		properties.list(System.out);</span><br><span class="line">	&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="2propertyNames-输出-getClass-加载"><a href="#2propertyNames-输出-getClass-加载" class="headerlink" title="-2propertyNames 输出 getClass() 加载"></a>-2propertyNames 输出 getClass() 加载</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">name2Test</span><span class="params">()</span>&#123;        </span><br><span class="line">	<span class="keyword">try</span>&#123;            </span><br><span class="line">		Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();  </span><br><span class="line">		<span class="comment">// 用/文件名， / 表示根目录            </span></span><br><span class="line">		InputStream input=PropertiesTest.class.getClass().getResourceAsStream(<span class="string">&quot;/jdbc.properties&quot;</span>);            </span><br><span class="line">		properties.load(input);            </span><br><span class="line">		Enumeration&lt;String&gt; names=(Enumeration&lt;String&gt;) properties.propertyNames();            </span><br><span class="line">		<span class="keyword">while</span>(names.hasMoreElements())&#123;</span><br><span class="line">		<span class="comment">//这是key值            </span></span><br><span class="line">			String key=names.nextElement();            </span><br><span class="line">			String value=properties.getProperty(key);            </span><br><span class="line">			System.out.println(key+<span class="string">&quot;=&quot;</span>+value);   </span><br><span class="line">			&#125;              </span><br><span class="line">	&#125;<span class="keyword">catch</span>(Exception e)&#123;   	 </span><br><span class="line">		e.printStackTrace();    </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h4 id="3stringPropertyNames-输出-getClassLoader-加载-推荐"><a href="#3stringPropertyNames-输出-getClassLoader-加载-推荐" class="headerlink" title="-3stringPropertyNames 输出 getClassLoader 加载 (推荐)"></a>-3stringPropertyNames 输出 getClassLoader 加载 (推荐)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">name3Test</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="keyword">try</span>&#123;        </span><br><span class="line">	Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();        </span><br><span class="line">	<span class="comment">//直接写src 类路径下的文件名        </span></span><br><span class="line">	InputStream input=PropertiesTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);        </span><br><span class="line">	properties.load(input);                </span><br><span class="line">	<span class="comment">//把key值转换成set 的形式，遍历set        </span></span><br><span class="line">	Set&lt;String&gt; names=properties.stringPropertyNames();        Iterator&lt;String&gt; iterator=names.iterator();        </span><br><span class="line">	<span class="keyword">while</span>(iterator.hasNext())&#123;        </span><br><span class="line">		String key=iterator.next();        </span><br><span class="line">		String value=properties.getProperty(key);        </span><br><span class="line">		System.out.println(key+<span class="string">&quot;=&quot;</span>+value);    </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">catch</span>(Exception e)&#123;    	</span><br><span class="line">			e.printStackTrace();    </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="4获取值-getProperties"><a href="#4获取值-getProperties" class="headerlink" title="-4获取值 getProperties"></a>-4获取值 getProperties</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">name3Test</span><span class="params">()</span>&#123;	    </span><br><span class="line">	<span class="keyword">try</span>&#123;		</span><br><span class="line">		Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();		</span><br><span class="line">		InputStream input=PropertiesTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);		</span><br><span class="line">		properties.load(input);		</span><br><span class="line">		<span class="comment">//String value=properties.getProperty(&quot;jdbc.url&quot;);		</span></span><br><span class="line">		String value=properties.getProperty(<span class="string">&quot;jdbc.url1&quot;</span>,<span class="string">&quot;没有该key值&quot;</span>);		</span><br><span class="line">		System.out.println(<span class="string">&quot;输出值：&quot;</span>+value);		</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;		</span><br><span class="line">			e.printStackTrace();	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<h4 id="5普通写入，中文时乱码"><a href="#5普通写入，中文时乱码" class="headerlink" title="-5普通写入，中文时乱码"></a>-5普通写入，中文时乱码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeTest</span><span class="params">()</span>&#123;	    </span><br><span class="line">	<span class="keyword">try</span>&#123;		</span><br><span class="line">		Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();		</span><br><span class="line">		InputStream input=PropertiesTest.class.getClassLoader().getResourceAsStream(<span class="string">&quot;jdbc.properties&quot;</span>);		</span><br><span class="line">		properties.load(input);				</span><br><span class="line">		<span class="comment">//多添加几个值。		</span></span><br><span class="line">		properties.setProperty(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;两个蝴蝶飞&quot;</span>);		</span><br><span class="line">		properties.setProperty(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;男&quot;</span>);		</span><br><span class="line">		<span class="comment">//properties.put(&quot;name&quot;,&quot;两个蝴蝶飞&quot;);  </span></span><br><span class="line">		<span class="comment">//可以用继承Hashtable 的put 方法写入值		</span></span><br><span class="line">		<span class="comment">// properties.put(&quot;sex&quot;,&quot;男&quot;);				</span></span><br><span class="line">		<span class="comment">//将添加的值，连同以前的值一起写入 新的属性文件里面。		</span></span><br><span class="line">		OutputStream out=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\jdbc.properties&quot;</span>);		</span><br><span class="line">		properties.store(out,<span class="string">&quot;填充数据&quot;</span>);			</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;		</span><br><span class="line">		e.printStackTrace();	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<h4 id="6解决乱码写入的问题"><a href="#6解决乱码写入的问题" class="headerlink" title="-6解决乱码写入的问题"></a>-6解决乱码写入的问题</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write2Test</span><span class="params">()</span>&#123;	    </span><br><span class="line">	<span class="keyword">try</span>&#123;        </span><br><span class="line">		Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();        </span><br><span class="line">		<span class="comment">//用绝对路径        </span></span><br><span class="line">		InputStream input=<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\workspace\\JavaLearn\\src\\jdbc.properties&quot;</span>));    </span><br><span class="line">		properties.load(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input,<span class="string">&quot;utf-8&quot;</span>));        </span><br><span class="line">		<span class="comment">//多添加几个值。        </span></span><br><span class="line">		properties.setProperty(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;两个蝴蝶飞&quot;</span>);        </span><br><span class="line">		properties.setProperty(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;男&quot;</span>);        </span><br><span class="line">		OutputStream output=<span class="keyword">new</span> </span><br><span class="line">		<span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\jdbc.properties&quot;</span>);        </span><br><span class="line">		OutputStreamWriter out=<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(output,<span class="string">&quot;utf-8&quot;</span>); </span><br><span class="line">		properties.store(out,<span class="string">&quot;填充数据&quot;</span>);			</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;		</span><br><span class="line">			e.printStackTrace();	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<h4 id="7导出到-xml-配置文件-storeToXML"><a href="#7导出到-xml-配置文件-storeToXML" class="headerlink" title="-7导出到 .xml 配置文件 storeToXML"></a>-7导出到 .xml 配置文件 storeToXML</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xmlWriteTest</span><span class="params">()</span>&#123;	    </span><br><span class="line">	<span class="keyword">try</span>&#123;        </span><br><span class="line">		<span class="comment">//处理成编码样式。        </span></span><br><span class="line">		Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();        </span><br><span class="line">		<span class="comment">//多添加几个值。        </span></span><br><span class="line">		properties.setProperty(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;两个蝴蝶飞&quot;</span>);        </span><br><span class="line">		properties.setProperty(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;男&quot;</span>);        </span><br><span class="line">		OutputStream output=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;D:\\jdbc.xml&quot;</span>);      </span><br><span class="line">		<span class="comment">//编码设置成utf-8的形式。         </span></span><br><span class="line">		properties.storeToXML(output,<span class="string">&quot;填充到xml&quot;</span>,<span class="string">&quot;utf-8&quot;</span>);			</span><br><span class="line">		&#125;<span class="keyword">catch</span>(Exception e)&#123;		</span><br><span class="line">			e.printStackTrace();	</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>


<h4 id="8导出XML-配置文件-loadFromXML"><a href="#8导出XML-配置文件-loadFromXML" class="headerlink" title="-8导出XML 配置文件 loadFromXML"></a>-8导出XML 配置文件 loadFromXML</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">xmlReadTest</span><span class="params">()</span>&#123;	     </span><br><span class="line">	 <span class="keyword">try</span>&#123;        </span><br><span class="line">		 Properties properties=<span class="keyword">new</span> <span class="title class_">Properties</span>();        </span><br><span class="line">		 InputStream input=<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\jdbc.xml&quot;</span>));        </span><br><span class="line">		 properties.loadFromXML(input);        </span><br><span class="line">		 properties.list(System.out);			</span><br><span class="line">	&#125;<span class="keyword">catch</span>(Exception e)&#123;		</span><br><span class="line">		e.printStackTrace();	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://www.cnblogs.com/xiaofeifei-wang/p/7477324.html">properties文件 , properties类, 的作用</a><br><a href="http://t.csdn.cn/PULXS">properties文件</a><br><a href="https://baijiahao.baidu.com/s?id=1709864980321470535&wfr=spider&for=pc">Java基础——Properties类</a></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>properties</tag>
      </tags>
  </entry>
  <entry>
    <title>前端技术查询</title>
    <url>/2021/04/20/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h3 id="PC端网站"><a href="#PC端网站" class="headerlink" title="PC端网站"></a>PC端网站</h3><span id="more"></span>

<ul>
<li>掘金社区</li>
<li>CSDN社区</li>
<li>博客园</li>
<li>菜鸟教程</li>
<li>张鑫旭的个人空间(CSS完美世界作者)</li>
<li>阮一峰的个人主页(ES6标准入门作者)</li>
<li>Stack Overflow(国外技术社区)</li>
<li>GItHub(一个神奇的网站,全世界开发者的交流网站)</li>
<li>鸠摩搜书</li>
<li>BiliBili(有技术类的教学视频资源)</li>
<li>LeetCode(算法)</li>
</ul>
<h3 id="手机APP"><a href="#手机APP" class="headerlink" title="手机APP"></a>手机APP</h3><ul>
<li>掘金社区</li>
<li>简书</li>
<li>CSDN</li>
<li>微信读书</li>
</ul>
<h3 id="公众号类"><a href="#公众号类" class="headerlink" title="公众号类"></a>公众号类</h3><ul>
<li>前端大学</li>
<li>前端之巅</li>
<li>程序人生</li>
</ul>
<h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><ul>
<li>JavaScript高级程序设计4(红宝书)</li>
<li>JavaScript权威指南(犀牛书)</li>
<li>JavaScript-DOM编程艺术</li>
<li>ES6教程入门</li>
<li>深入浅出Vuejs</li>
<li>Vuejs实战</li>
<li>图解HTTP</li>
<li>图解TCP&#x2F;IP</li>
<li>深入浅出Nodejs</li>
<li>我的第一本算法书</li>
<li>算法4</li>
</ul>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>动画剧本创作——要点汇总</title>
    <url>/2024/04/04/%E5%8A%A8%E7%94%BB%E5%89%A7%E6%9C%AC%E5%88%9B%E4%BD%9C%E2%80%94%E2%80%94%E8%A6%81%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<span id="more"></span>

<p>“别给创意冠上条条框框，创意来去自如，无拘无束。”——卡姆特</p>
<p>“要创新，不要模仿。”——华特·迪士尼</p>
<p>一个剧本可以定义为由画面、对白和描述来叙述的故事，并且将所有这些安置在故事结构的情境脉络之中。</p>
<p>一个关于童心、勇气、创意和传奇的皮克斯。</p>
<p><em><strong>动画剧本</strong></em>的<em><strong>基本特征是幻想。</strong></em></p>
<p><em><strong>剧本的主要特征：</strong></em>代言体的写作方式，最终服务于演出这一实践目的，特殊的格式，有时会有一些特殊的规则。</p>
<p><em><strong>剧本：</strong></em>文学形式的一种体裁，由剧中人物的对话和舞台指示构成，是戏剧演出的文字底本。</p>
<p><em><strong>即兴</strong></em>的定义为：“<em><strong>在当前所处环境中某些因素的刺激下，即时做出的表现、反应或者创作行为。</strong></em>即兴可以衍生出新的思考方式，新的动作行为，新的结构或象征意义，或者新的表演方式。”</p>
<p>皮克斯之一：导演乔·兰福特。<em><strong>皮特·多克特</strong></em>2009年的热门大片《飞屋环游记》的导演之一。</p>
<p><em><strong>动画剧本</strong></em>基本上可以分为<em><strong>四种形式，</strong></em>其中包括<em><strong>实验动画短片、系列动画片、连续动画片和影院动画片。</strong></em></p>
<p><em><strong>实验动画短片</strong></em>是以一种个体化创作的，保持自我风格、形式、技巧以及制作方式的动画艺术家的作品。例如奥斯卡最佳动画短片《神奇飞书》、《丹麦诗人》、《回忆积木屋》、《彼得与狼》《失物招领》等。</p>
<p><em><strong>系列动画片</strong></em>的故事中的<em><strong>人物性格和人物之间的关系都很固定，几乎没有发展变化</strong></em>。每一集的时间长度一般在10分钟左右。例如经典系列动画片《猫和老鼠》、《蜡笔小新》、《机器猫》、《米老鼠和唐老鸭》、《加菲猫》、《倒霉熊》等。</p>
<p><em><strong>连续剧</strong></em><em><strong>&#x2F;<em><strong><em><strong>连续动画片</strong></em>可以</strong></em>相当于一个完整的长篇故事、长篇电影，从第一集开始到最后一集结束都是围绕着一条统一的故事线连接起来的。人物之间有着密切的联系，人物的关系会随着剧情的发展而发生相应的变化，从而慢慢的揭示出人物的真相。</strong></em>每一集标准时间长度一般在20分钟左右。例如经典连续动画片《太空堡垒》、《灌篮高手》、《七龙珠》等。</p>
<p><em><strong>影院动画片</strong></em>的长度和常规电影长度几乎是同一个标准，一般为<em><strong>90分钟</strong></em>左右。影院动画片大多改编自文学作品，如童话神话和小说。<em><strong>叙事结构</strong></em>是与经典戏剧的叙事结构基本相符，有<em><strong>明确的因果关系、一定模式的开头、情节的开展、起伏、高潮以及一个完整的结局</strong></em>。例如《风之谷》、《功夫熊猫》、《冰河世纪》、《千与千寻》等。</p>
<p>动画题材类型：<em><strong>爱情类型、成长类型、动作冒险类型、犯罪或侦探类型、恐怖&#x2F;惊悚类型、超级英雄类型、麻烦家伙类型、愚者成功类型、如愿以偿类型、家庭生活类型、惩罚类型、体育竞技类行、机器人科幻类型、魔法奇幻类型</strong></em>。</p>
<p><em><strong>爱情类型</strong></em>爱情可以作为驱动力量，使主人公做出让人意想不到的事情。爱情可以分为几个层面，爱人之间的感情，关爱某些事物的感情，比如贫困儿童或身陷困难处境的某个人或动物,或是宗教信仰等方面的。《飞屋环游记》、《僵尸新娘》《萤火之森》。</p>
<p><em><strong>成长类型</strong></em>都以一个未成年的小孩开始，写他们在成长过程中所经历的一些事件，从中得到历练，逐渐的变得成熟起来。最后以主人公完成自己的心愿或某一阶段的胜利结束。这类主人公要有一个特定的成长环境作为故事背景，首先交代主人公的身份和社会地位以及家庭环境等等。《狮子王》、《小鹿斑比》、《我在伊朗长大》。</p>
<p><em><strong>动作冒险</strong></em>这类一直都是动画影片的主要题材类型，如果动作冒险包含了命运、狂妄或精神的东西，那么便成为激动人心的冒险。它明白无误地考验并表现了主人公的机智过人、意志坚强和临危不惧。《丁丁历险记》、《冰河世纪》、《马达加斯加》、《里约的大冒险》《风之谷》。</p>
<p><em><strong>侦探片</strong></em>（从侦探大师的观点）、黑帮片（匪徒的观点）、罪行（犯罪大师的观点）或越狱戏（囚犯的观点）。在犯罪类型中必须有一项犯罪，而且必须在故事讲述过程的早期发生。必须有一个侦探人物，无论是专业的还是业余的，发现线索，提出疑问。比如《名侦探柯南》、《鲨鱼黑帮》。看看为什么对人性黑暗面的研究，通常是对我们自身进行的研究。《名侦探柯南》、《鲨鱼黑帮》。</p>
<p><em><strong>恐怖&#x2F;惊悚类型</strong></em>有两个主要组成部分：鬼怪和屋子例如《鬼怪屋》、《圣诞夜惊魂》、《精灵旅社》、《鬼妈妈》。</p>
<p><em><strong>超级英雄</strong></em>的故事<em><strong>要求编剧赋予主人公以高尚品德和同情心，并且愿意为小人物和弱势群体解决问题</strong></em>。这个类型不都是带斗篷穿紧身衣的超人故事，凡人也有英雄，他们受到周围平庸世界的挑战。<em><strong>一个成功的超级英雄跟多的是来源于负面角色的塑造，其对抗力量要无比的强大</strong></em>，以至于能够彻底的击败这个超级英雄几个回合。这种<em><strong>暂时的胜利或失败我们将其称作“伪胜利和伪失败”</strong></em>，但最后的结局一定是不可逆转的，超级英雄一定要得到真正的胜利，坏蛋无法翻身或永远消失在这个世界中。例如《闪电狗波特》、《超人特工队》、《功夫熊猫》、《复仇者：史上最强的英雄组合》。</p>
<p><em><strong>麻烦家伙类型</strong></em>主人公与超级英雄截然相反，一个普通人或者一个连普通人的基本条件都没有的残缺人，观众从一开始就会<em><strong>对该故事类型中的主人公产生同情，希望他能够摆脱困境</strong></em>。挑战的相对难度才是故事吸引人的东西。让负面价值尽可能的坏，麻烦越大主人公克服困难的效果越好，不论坏蛋还是坏事，主人公都成功地使出浑身解数战胜更为强大的负面力量。影片最后主人公一定要成功，开篇价值和结尾价值产生截然不同的重大逆转。《别惹蚂蚁》。</p>
<p><em><strong>“愚者成功”型</strong></em>的要素很简单。愚者成功的故事给了我们胜利的间接体验。例如影片《四眼天鸡》和《野蛮人罗纳尔》。</p>
<p><em><strong>如愿以偿型</strong></em>在影片中很普遍，因为这在人们的生活中占有相当重要的地位，“我想拥有、我想成为”影片以主人公为实现自己的梦想驱动整个故事。《美食总动员》。</p>
<p><em><strong>家庭生活类型</strong></em>动画,是将人们生活中发生的一些小故事进行浓缩,以夸张搞笑的情景喜剧形式演绎。主要人物都是家庭成员,例如《樱桃小丸子》和《蜡笔小新》等影片。多以家庭生活作为故事背景，将平时发生在我们周围有关于情亲和友情的故事进行夸张处理，<em><strong>捕捉生活中的矛盾冲突，以幽默搞笑方式呈现出家庭生活中的温馨</strong></em>。《蜡笔小新》日本 臼井仪人。</p>
<p><em><strong>惩罚类型</strong></em>的规律是一定要<em><strong>让主人公“死的很惨”</strong></em>，这种类型的主人公经常遭到周围人或事的“恶搞”。惩罚类型动画片<em><strong>多以系列的形式出现</strong></em>。例如韩国的《倒霉熊》和美国的《猫和老鼠》。</p>
<p><em><strong>体育竞技类型</strong></em>以体育竞技作为故事的主要内容，其核心要表现的是“励志”这一主题。影片往往围绕一个或多个主人公例如《汽车总动员》和《灌篮高手》等，讲述他们求胜的艰苦经历。一般在这类影片中都有<em><strong>“魔鬼教练”</strong></em>和<em><strong>强大的对手</strong></em>这两种角色，挑战对象步步升级。《灌篮高手》日本井上雄彦。</p>
<p><em><strong>机器人科幻类型</strong></em>例如影片《wall-E》、《机器人总动员》、《变形金刚》、《太空堡垒》等。这类影片多以机器人作为影片的主要人物。就像历史一样，未来也只是一个背景，其间任何类型都可以有用武之地。《机器人总动员》2008年 安德鲁·斯坦顿导演 皮克斯制作，迪士尼发行。</p>
<p><em><strong>魔法奇幻类型</strong></em>日本动画大师宫崎骏的影片《哈尔的移动城堡》、《悬崖上的金鱼公主》、《千与千寻》、《幽灵公主》。</p>
<p><em><strong>故事理论最早起源于希腊。电影剧本创作大师罗布特·麦基，《故事》。亚里士多德</strong></em>创作<em><strong>《诗学》，</strong></em><em><strong>探讨了诗的定义、分类、特征和作用。</strong></em></p>
<p>一个故事是由一些部分：<em><strong>人物、情节、动作、对白、场景、段落、事件、事变</strong></em>组合而成的，而作为作者必须将这些部分有机地组织成为一个整体，并赋予其确定的形象和形式以及完整的开端、中段和结尾。</p>
<p>一系列<em><strong>幕</strong></em>构成所有要素中最伟大的结构：<em><strong>故事</strong></em>。</p>
<p>当我们观察人物在故事的开头中负荷价值的情境，然后把它的故事结尾的价值负荷进行比较时，就能够看到<em><strong>电影弧光，</strong></em>把生活从故事开始是的一个情境带到故事结束时的另一个变化了的情境的巨大变化。这个最后情境，这一结尾变化，必须是<em><strong>绝对而不可逆转的。</strong></em></p>
<p><em><strong>事件或者是人为的，或者能够影响到人，这样便勾勒出了人物；事件必须发生在场景之中，于是便生出影像、动作和对白；事件必须从冲突中吸取能量，于是便激发出任务和观众的情感。</strong></em></p>
<p><em><strong>结构是对人物生活故事中一系列事件的选择，这种选择将事件组合成一个具有战略意义的序列，以激发特定而具体的情感，并表达一种特定而具体的人生观。</strong></em></p>
<p><em><strong>电影人物的弧光(character arc)<em><strong>指的是在剧情发展过程中,电影中的</strong></em>特定角色经历的心理、情感或行为上的变化</strong></em>。弧光代表着人物的成长、转变和发展,通常跟随着角色的内外在冲突以及他们在故事中所经历的事件和挑战。 弧光可以是正向的,表示角色从开始到结束经历了积极的变化和成长。这种弧光可以包括角色逐渐超越自己的限制,克服内心的困难,发展更强大的能力,改变价值观或实现自我救赎等。</p>
<p>另一方面,弧光也可以是负向的,表示角色经历了消极的变化和堕落。这种弧光可能包含角色逐渐走向堕落、失去目标和动力,或者经历生活中的灾难性事件而导致的心理上的崩溃。</p>
<p>弧光是塑造电影角色和推动故事发展的重要手段之一。通过展示人物的弧光，观众可以更好地理解角色的内心世界、情感状态和成长过程。弧光也为角色提供了深度和复杂性，使其更具有共鸣力和可信度。</p>
<p><em><strong>故事事件创造出人物生活情境中有意味的变化</strong></em>，这种变化是用某种价值来表达和经历的，并通过<em><strong>冲突</strong></em>来完成。故事价值涵盖着这一概念的一切内涵和外延。<em><strong>价值是故事讲述手法的灵魂</strong></em>。从根本上而言，我们这门艺术即是<em><strong>向世人表达价值观的艺术</strong></em>。</p>
<p><em><strong>故事价值是人类经验的普遍特征</strong></em>，这些特征可以从此一时到彼一时，由正面转化为负面，或由负面转化为正面。例如，生&#x2F;死（正面&#x2F;负面）便是一个故事价值，即如：爱&#x2F;恨、自由&#x2F;奴役、真理&#x2F;谎言、忠诚&#x2F;背叛、智慧&#x2F;愚昧、力量&#x2F;软弱、兴奋&#x2F;厌倦，等等。人类经验中的价值都随时可能走向反面，这种<em><strong>二元特征便是故事价值</strong></em>。</p>
<p>罗伯特·麦基在《故事》一书中讲道：“设计情节是指在故事的危险领域内航行，当面临无数岔道时选择正确的航道。情节就是作者对事件的选择以及事件在时间中的设计。”经典的情节设计是围绕一个主人公而构建的故事，这个主人公为了追求自己的欲望，经过一段连续的时间，<em><strong>在一个连贯而具有因果关联的虚构实现中，与主要来自外界的对抗力量进行抗争，直到一个绝对而不可逆转的变化而结束的闭合式结局</strong></em>。</p>
<p>故事情节设计的关键就是对主人公在某段经历过程中产生的<em><strong>悬念和冲突</strong></em>这两大要素进行精心的设计和安排，而观众需要的恰恰就是在这种悬念和冲突中津津有味的看完整部影片。悬念比任何其他元素都更能影响作品的吸引力，它是构成作品的本质。</p>
<p><em><strong>世界著名悬念大师阿尔弗雷德·希区柯克曾说过：“情绪就是悬念的基本要素。”</strong></em></p>
<p>悬念本身也是一种手段，悬念不应该成为目的，它应该是人物经历的附属品。悬念是关于预期的，悬念是观看事件展开的过程，悬念就是创造和延长预期。</p>
<p><em><strong>冲突</strong></em>：冲突有很多种功能，要求观众选择立场，制造裂痕然后为圆满解决铺平道路，帮助制造悬念，让作品具有方向感，可以出乎意料，可以让我们了解人物。冲突不能太快得到解决。</p>
<p><em><strong>故事背景</strong></em><em><strong>有4个方面</strong></em><em><strong>的：时代、期限、地点和冲突层面。</strong></em></p>
<p><em><strong>时代：</strong></em><em><strong>时代</strong></em><em><strong>是一个故事在时间中的位置。</strong></em>第一个时间维是是时代。是指故事是发生在现在，还是在过去，还是在想象中的未来。</p>
<p><em><strong>期限：</strong></em><em><strong>期限</strong></em><em><strong>是故事在时间中的长度。</strong></em></p>
<p><em><strong>地点：</strong></em><em><strong>地点</strong></em><em><strong>是故事在空间中的位置。</strong></em>地点是故事的物质维。</p>
<p><em><strong>冲突层面</strong></em><em><strong>：</strong></em><em><strong>冲突层面</strong></em><em><strong>是故事在</strong></em><em><strong>人类斗争等级体系中的位置</strong></em><em><strong>。</strong></em></p>
<p><em><strong>一个背景包括物质域、时间域，社会域。</strong></em>这是一条垂直的线索，是在冲突层面上来讲述的故事。故事聚焦于人物内心，即使是不自觉的冲突，或者提高一个层面，聚焦于人际冲突，或者更高更广，聚焦于与社会机构的竞争，或者再广泛一些，聚焦于与环境力量的斗争。通过生活中的多重体验，故事可以定位于这些层面的任意一个活任意组合。</p>
<p><em><strong>故事主线：</strong></em>故事始终必须向前发展，它将<em><strong>沿着一条路径，一个方向，一条从开端直到结尾的发展路线</strong></em>，无论它是否采用了闪回的讲述方式。无论它是否以非线性或线性的方式来讲述，故事都是沿着可以达到一定目的的一条路径发展。这就是故事主线。</p>
<p>一个主人公欲望的能量形成了故事设计中一个被称为故事主线的重要成分，它又称为贯穿线或超级目标。故事主线是主人公为恢复生活的平衡所表现出的深层欲望和所进行的不懈努力。它是第一位的统一力量，将故事的所有其他要素融为一体。因为，无论在故事的表面发生什么，每一个场景、形象和话语最终都只是故事主线的一个方面，与<em><strong>欲望和行动</strong></em>的这一核心有着某种因果或主题的联系。</p>
<p><em><strong>不自觉与自觉欲望：</strong></em>如果主人公有<em><strong>不自觉的欲望</strong></em>，那么他的自觉目标便成为故事线。如果主人公有一个不自觉的欲望，那么这个不自觉的欲望便会成为故事线。一个不自觉欲望总是要更强烈、更持久，深深扎根于主人公的内心。</p>
<p><em><strong>求索之路：</strong></em>一个事件打破一个人物生活的平衡，使之或变好或变坏，在他内心激发起一个自觉或不自觉的欲望，意欲恢复平衡，于是这一事件就把他送上了一条追寻欲望对象的求索之路，一路上他必须与各种内心的、个人的、外界的对抗力量向抗衡。他也许能也许不能实现欲望。这便是故事的要义。</p>
<p>一个故事是一个由五部分组成的设计<em><strong>。激励事件，故事讲述的第一个重大事件，是一切后续情节的首要导因，它使其他四个要素开始运转起来即，进展纠葛、危机、高潮、结局。</strong></em></p>
<p><em><strong>故事鸿沟</strong></em>这一概念出自于银幕剧作大师罗布特·麦基的《故事》一书，即:<em><strong>故事产生于主观领域和客观领域的相交之处。</strong></em></p>
<p><em><strong>人物塑造</strong></em>是通过人物的生活细节和生活方式以及其他形式的特征所表示出来的。<em><strong>人物塑造是一个人一切可以观察到的素质的总和</strong></em>，一切通过仔细考察可以获知的东西。</p>
<p><em><strong>人物压力：</strong></em> <em><strong>只有当一个人在压力之下作出选择时才能得到揭示——压力越大，揭示越深，该选择便越真实地表达了人物的本性。</strong></em></p>
<p><em><strong>人物揭示</strong></em>：用<em><strong>对比反衬</strong></em>人物塑造来揭示真正的人物性格，这是所有优秀故事讲述手法中最基本的要素。无论人物言说什么，无论他们举止如何，<em><strong>观众了解深层的人物性格的唯一办法，就是看他们在压力之下做出的选择。</strong></em></p>
<p><em><strong>两难选择</strong></em>： 人物真正的选择是两难之择。它发生于两种情境。<em><strong>一种是不可调和的两善取其一的选择</strong></em>：从人物的视点来看，两个事物都是他所欲者，他两者都想要，但环境迫使他只能选择一种。<em><strong>另一种是两恶取其轻的选择</strong></em>：从人物的观点来看，两个事物都是他所不欲者，他一个也不想要，但环境迫使他必须二者择一。在这种真正的两难之境中，一个人物如何选择便是对其人性以及他所生活的世界的一个强有力的表现。</p>
<p><em><strong>人物设计的要素：</strong></em>创做一个出色的人物必须具备四个要素：</p>
<p>第一，人物<em><strong>首先必须要有一个坚定的戏剧性需求</strong></em>。</p>
<p>第二，人物<em><strong>必须要有一个对事物的个人观点</strong></em>。</p>
<p>第三，人物必须要<em><strong>有一个对事物的态度</strong></em>。</p>
<p>第四，这个人物<em><strong>总要经历某种事物的转变</strong></em>。</p>
<p><em><strong>1.戏剧性需求</strong></em>：每个主要人物都有一个强烈的戏剧性需求。<em><strong>戏剧性需求被定义为人物在剧本的严谨过程中所想要赢得、得到、获取或成就的东西</strong></em>。戏剧性需是人物的目的、使命、动机，是<em><strong>推动人物在故事线的叙事情节中穿行的驱动力</strong></em>。</p>
<p><em><strong>2.观点</strong></em>：观点可以定义为是“<em><strong>一个人看待或观察世界的方式</strong></em>”。每个人都有自己的独特观点,观点是<em><strong>某种个体性或独立性的信仰体系</strong></em>。人们的经验世界决定了人们的观点。</p>
<p><em><strong>3.态度</strong></em>：态度可以定义为是一种“<em><strong>行为方式或意见</strong></em>”，并且反应某个人的个人意见，这种意见是<em><strong>通过理性思考做出的判断</strong></em>。态度包含了一个人的行为方式。在社会行为或理论道德方面采取高姿态或低调都是一种态度。<br>一种态度与一种观点的不同之处在于，决定采取某种态度是出于个人的判断：这是对的，那是错的。</p>
<p><em><strong>4.变化或转变</strong></em>：故事中人物所经历某种形式的变化或转变，既可以是情感方面的也可以是身体方面的。人物是否在电影剧本的发展过程里发生转变，取决于人物是否合适，而并不是绝对必须的。变化和转变始终在生活中存在，如果能够让人物身上激发出某种形式的情感转变，就能创造出行为的轨迹并且增添表现人物形象的另一个维度。这种变化和转变被好莱坞编剧教父罗伯特·麦基定义为<em><strong>人物弧光</strong></em>。最优秀的作品不但揭示人物真相，而且在讲述过程中表现人物本性的发展轨迹或变化。</p>
<p>动画片的主人公不一定是人。由群体组合可构成一个<em><strong>复合主人公</strong></em>，必须达到两个条件：第一，群体中的所有个体必须志同道合，拥有同一个欲望；第二，在为了满足这一欲望而进行的斗争中，他们必须同甘共苦，同舟共济，一荣皆荣，一损俱损。在一个复合主人公之内，动机、行为和结果都是共通的。</p>
<p><em><strong>主人公的特点：1.主人公必须是一个具有意志力的人物</strong></em>。</p>
<p>2.主人公必须<em><strong>具有自觉的欲望</strong></em>。主人公的意志驱动一个已知的欲望。主人公具有一个需要或目标，一个欲望对象，而且他自己知道接下来要做什么。主人公的欲望对象可以是外在的，也可以是内在的。</p>
<p>3.主人公还可以<em><strong>有一个自相矛盾的不自觉欲望</strong></em>。一个成功的主人公还会有一个不自觉的欲望，一个多层面的主人公的自觉欲望和不自觉欲望是互相矛盾的。他相信他所需要的东西与他实际上需要而自己并未察觉的东西相对立。</p>
<p>4.主人共必须有<em><strong>至少一次实现欲望的机会</strong></em>。</p>
<p>5.主人公<em><strong>必须具有移情作用</strong></em>，同情作用则可有可无。“移情”是指像“观众”，在主人公的内心深处，观众发现了某种共通的人性。用“一个可以追随的人”，“一个可以为之喝彩的人”描述观众心灵中所产生的与主人公的移情联系。</p>
<p><em><strong>主动主人公与被动主人公：</strong></em></p>
<p> 主动主人公在为追求欲望而采取行动时，与他周围的人和世界发生冲突。</p>
<p> 被动主人公表面消极被动，但在内心追求欲望时，于其自身性格的方方面面发生冲突。</p>
<p><em><strong>主人公的特点</strong></em></p>
<p>无论故事的主人公是单一、多重还是复合，无论其人物塑造特征如何，所有的主人公都必须具有他们的特点。</p>
<p>   （1）主人公必须是<em><strong>一个具有意志力的人物</strong></em>。</p>
<p>   （2）主人公必须<em><strong>具有自觉的欲望</strong></em>。</p>
<p>   （3）主人公还可以<em><strong>有一个自相矛盾的不自觉欲望</strong></em>。</p>
<p>   （4）主人共必须有<em><strong>至少一次实现欲望的机会</strong></em>。</p>
<p>（5）主人公<em><strong>必须具有移情作用</strong></em>，同情作用则可有可无。</p>
<p>小人物、小角色：所有的角色，哪怕是一个很小、很小的角色，都要具有特定的吸引观众、令人难忘的性格。给予每一个小角色一个令人耳目一新的特征，使得这个小角色在荧幕上给观众留下深刻的印象</p>
<p><em><strong>台词</strong></em>包括对白和旁白两大类。<em><strong>性格通常是通过语言模式的类型来表现的</strong></em>。而想在影片中使用的外语，可以在<em><strong>语言的要素、非语言信息</strong></em>或者是<em><strong>动物声音</strong></em>的基础上表达。</p>
<p><em><strong>潜台词</strong></em>是指在某一话语的背后，所隐藏着的那些没有直接、明白表达出来的意思；或者说，潜台词就是话中话所含有的意思。在戏剧的台词中没有直接说出，但观众通过思考都能领悟得出来的言语。潜台词是人物在行动过程中真实的内心表现，是表现人物形象的灵魂。找到了潜台词，也就找到了人物的真正的思想感情。</p>
<p><em><strong>对白：在电影中所有说出的台词都叫对白。</strong></em>是指影片中由人物说出来的语言。是电影艺术的主要表现手段之一。影视语言作为人类思想交流的媒介，它既有表意功能，同时又能创造出艺术美感。对白要与影像相互配合，否则观众会感到困惑及不和谐。1）银幕对白要求压缩和简约。2）它必须具有方向。3）它应该具有目的。</p>
<p><em><strong>旁白</strong></em>：电影艺术中以<em><strong>“画外音”</strong></em>形式出现的解说性、评论性语言。通常以剧作者“第三人称式”的客观观点或以某剧中人物“第一人称式”的主管视点出现。通常被作为剧作结构的一种辅助手段应用于说明剧情发展的事件、地点、时代背景；对剧情大幅度的时空跨越；介绍人物；对剧情的某些内容作必要的解释或发表具有哲理性和柔情型的议论等方面。旁白能够使电影产生主观色彩，且通常带有宿命意味。</p>
<p><em><strong>内心独白</strong></em>：电影艺术中以<em><strong>“画外音”形式</strong></em>出现的剧中人物的内心自白。它是电影编剧<em><strong>揭示人物心理活动的基本手段之一</strong></em>，是<em><strong>人物言语动作的一种形式</strong></em>。与旁白不同，它只能是<em><strong>“第一人称式”</strong></em>的。</p>
<p><em><strong>人物塑造的五个诀窍：</strong></em></p>
<p><em><strong>1.人物就是自知</strong></em>。</p>
<p><em><strong>2.动作就是人物</strong></em>。电影是表现行为。</p>
<p><em><strong>3.给人物一个安身之处。</strong></em>地点应该作为一个独立的特征来处理。人物应该安置在正确的时间和地点。</p>
<p><em><strong>4.热爱所有的人物。</strong></em></p>
<p><em><strong>5.负面角色要更强大。</strong></em></p>
<p><em><strong>场景：场景的目的有两个，一个是为了推动故事向前发展，另一个是为了揭示人物的有关信息。</strong></em>一个场景即是一个微缩故事，有着和电影剧本同样的结构准则：<em><strong>开端、发展、高潮、结局</strong></em>。在一个统一或连续的时空中通过冲突表现出来的、改变人物生活中的负载着价值的情境的一个动作。这段动作根据至少一个具有一定程度的感知的重要性的价值改变了人物生活中负荷价值的情境。<em><strong>理想的场景即是一个故事事件</strong></em>。<br>一个场景的长度或景点几乎没有任何限制。<br><em><strong>一个场景必须统一在欲望、动作、冲突和变化周围。</strong></em></p>
<p><em><strong>场景的要素：每个场景都包括两样东西:地点和时间。</strong></em>这两个要素将事物固定在框架内。</p>
<p><em><strong>场景目标：</strong></em>必须是<em><strong>一个人物的超级目标或故事主干的一个方面。</strong></em>在每一个场景中，一个人物追求一个与其当前的时空有关的欲望。人物通过在压力之下选择采取一个活另一个行动来追求他的场景目标。但是从任一或所有冲突层面却产生出一个在他意料之外的反应。其效果是再期望和结果之间裂开一道鸿沟，把他外在时运、内心生活或二者同时从正面转向负面或从负面转向正面，其衡量标准是观众所知道的押上台面的<em><strong>风险价值</strong></em>。</p>
<p><em><strong>场景内的冲突：</strong></em>每一个场景必须有某种形式上的冲突，在场景内构建矛盾冲突是吸引观众看下去最简单的方法。冲突就是一切。</p>
<p><em><strong>场景的转折点：场景导致细微而又意义重大的变化。序列高潮是一个导致适中逆转的场景，这种变化的冲击力要大于场景。幕高潮是一个导致重大逆转的场景，这一变化冲击力要大于序列高潮。</strong></em>转折点的效果是四重的<em><strong>：惊奇、增强好奇心、见识、新方向。</strong></em></p>
<p><em><strong>节拍、序列：节拍是场景中的最小结构组成部分</strong></em>。节拍是动作和反应中的<em><strong>一种行为交流</strong></em>。这些变化的行为通过一个又一个的节拍构筑了场景的转化。<em><strong>序列是指一系列场景，一般为2到5个</strong></em>，其中每一个场景的冲击力呈递增趋势，直到最后达到顶峰。</p>
<p><em><strong>场景设计技巧</strong></em></p>
<p><strong>1.</strong> <em><strong>确定冲突</strong></em> 任何人物或力量都可能驱动一个场景</p>
<p><strong>2.</strong> <em><strong>确认开篇价值</strong></em>  </p>
<p><strong>3.</strong> <em><strong>将场景分为节拍</strong></em>  节拍是人物行为中动作和反应的一种交流。通过观察场景和人物的第一个动作，看这个人物表面上是在做什么，透过这一表面，看到人物实际上是在做什么。</p>
<p><strong>4.</strong> <em><strong>比较结尾和开端价值</strong></em></p>
<p><strong>5.</strong> <em><strong>确定转折点的位置</strong></em>  从开篇场景的第一个节拍开始，检查描述人物动作的那些进行时短语。这种动作反应模式构成了一系列节奏很快的节拍。</p>
<p><em><strong>幕：幕式一系列序列的组合，</strong></em>以一个高潮场景为其顶点，导致价值的重大转折，其冲击力要比所有前置的序列或场景更为强劲。幕——一个表现人物生活中负荷价值的情境中重大逆转的动态单位。</p>
<p>一幕故事：<em><strong>一个故事可以用一幕讲述，一系列场景构筑成几个序列</strong></em>，一系列场景构成一个序列，最后进展为一个重大逆转，结束故事。</p>
<p><em><strong>两幕故事：</strong></em>一个故事可用两幕讲述，两个重大逆转之后，便告结束。但是，这同样要求比较简短，<em><strong>如情境喜剧、中篇小说或一小时戏剧。</strong></em></p>
<p><em><strong>三幕故事：</strong></em>当故事达到一定的长度时，如故事影片、一小时一集的电视剧、长篇小说，则起码需要三幕。这并不是因为人为的常规，只是为了达到故事的深层目的。一个三幕故事要求4个重大场景。</p>
<p><em><strong>第一幕：</strong></em>是<em><strong>一个戏剧性的行为单元</strong></em>，通常耗费整个讲述过程<em><strong>25%<em><strong>的时间，在一部长度为110分钟的影片中，并且被一个称之为</strong></em>建立的情境脉络所紧密结合</strong></em>。</p>
<p><em><strong>前十分钟：</strong></em>电影编剧的责任就是在<em><strong>前十分钟之内将剧本故事建立起来</strong></em>，从而能使故事的<em><strong>基本信息得以确立</strong></em>。这前10分钟的设计需要技巧、耐心和想象力。</p>
<p><em><strong>推动：</strong></em>推动可以是任何<em><strong>偶然事件、插曲或事情</strong></em>。为了生活，所有人都会遇到那种时刻。改变生命历程的事件通常以坏消息的方式出现。</p>
<p><em><strong>争执： 争执出现在推动事件后。</strong></em></p>
<p><em><strong>第二幕 发展</strong></em> 故事通过精确地界定了主要人物的戏剧性需求来进入第二幕的。如果故事中人物的需求发生了变化，它应该发在第一幕中的情节点。第二幕是故事中最长的一幕，假设一部影片全长110分钟，第一幕的长度是25分钟左右，第三幕的长度是20分钟左右，这一节奏创造出了一个至少长达65分钟左右的第二幕。1）增加次清洁。2）增加幕。</p>
<p><em><strong>衔接点：</strong></em>任何剧本中都有暗地里延伸的地方。通常都在“大转折”之后，如第一幕衔接点，还有第二幕结尾这种动作逐渐消失的地方。这是利用第二主人公或一些次要角色帮助故事过度这些地方的时候。</p>
<p><em><strong>第二故事：</strong></em>第二故事一般开始于影片30分钟左右。多数剧本中的第二故事是“爱情故事”。同时第二故事也是承载电影主题的故事。</p>
<p><em><strong>娱乐游戏</strong></em>：娱乐游戏部分是剧本中提供“大前提约定的部分。这是电影海报中的核心本质部分。这是电影预告片中的主要镜头来源。</p>
<p><em><strong>中间点</strong></em>：中间点发生在在第二幕的中间点55分钟左右，并且将第二幕拆分成为两个戏剧性行为单元，即第二幕的前半部分和第二幕的后半部分。</p>
<p><em><strong>一无所有：</strong></em>在一个优秀的剧本中，“一无所有”发生在第75分钟左右。这是“顶峰”与“低谷”相对的，这也是很多具有“伪失败”剧本中的重点。表面上看起来主人公必须像是彻底失败，他生活中各个方面都已经一团糟了，伤痕累累没有希望。</p>
<p><em><strong>黎明前的黑夜：</strong></em>主人公刚刚经历过“一无所有”的失落感和内心深处的恐惧感，一定要在剧本中找到这种“黎明前的黑夜”部分。</p>
<p><em><strong>假结尾：</strong></em>在某些影片中，还会在倒数第二幕高潮处，或在最后一幕的进展过程中，创造出一个假结尾。一个看似已经完成，以至于观众一时认为故事已经结束的场景。</p>
<p><em><strong>第三幕 结局 最后一幕必须是最短的一幕，一般不超过20分钟。</strong></em></p>
<p><em><strong>闭合式结局：</strong></em>一个表达绝对而不可逆转的变化的故事高潮回答了故事讲述过程中所提出的所有问题并满足了观众的所有情感，则被称为闭合式结局。</p>
<p><em><strong>开放式结局：</strong></em>一个故事高潮留下一两个未解答的问题和一些没有满足的情感，则被称为开放式结局。</p>
<p><em><strong>剧作格式：字体和行间距：使用微软word软件来进行编写。选用宋体5号字，A4纸的规格。通常行与行之间的间距设置为单倍行距。</strong></em></p>
<p><em><strong>片名标题页设置：</strong></em>标题是用来标记剧本名字的，所以它必须显得正确而整洁。标题使用3号字体，加上书名号“《》”然后居中放置。在标题的右下角，用4号字单倍行间距写下自己的名字、住址、电话和电子邮箱。</p>
<p><em><strong>场景的写作：</strong></em> 一个故事由<em><strong>三幕</strong></em>组成，有的甚至更多。而每一幕由若干个场景组成，场景里面包括<em><strong>人物动作、对白、事件发生的时情境</strong></em>等要素。</p>
<p><em><strong>场景标题：</strong></em> 场景标题其实就是一个场景的简介，它必须短而精炼，而且要用粗黑字体。场景标题以场景的大致地点为开始——“内”，意思为室内场景，或者是“外”，意为室外场景。</p>
<p><em><strong>写作动作段落：</strong></em> 一个动作段落必须短小精炼得像一个列表，而不是描述。在段落内容中，必须表现场景中“假定情境”。</p>
<p><em><strong>设计场面： 介绍人物：</strong></em>当我们第一次介绍出场人物时，用黑体字标出他的名字。然后，用正文字体。</p>
<p><em><strong>写作对话：</strong></em> 从页面左边边缘起，留出12个空格来，然后用居中、黑体表示正在说话的人物名。每个人物名及其对话间留出单倍行间距。  </p>
<p><em><strong>转场：</strong></em>最频繁的转场是在地点或时间转变，其次是增加或减少人物时，最后是改变场景的戏剧目时，转场最为合适。</p>
<p><em><strong>声效：</strong></em>当人物或者观众听到特殊的声响，就需要写声效。声效只在动作段落内出现，而且永远应该用黑体字标出。</p>
<p><em><strong>写作技巧：1.从里到外写作。</strong></em></p>
<p><em><strong>2.展示、不要告知。</strong></em> “展示，不要告知”这一著名的原理便是问题的关键，千万不要将话语强行塞入人物的口中，令他们告诉观众有关世界、历史人物的一切。而是要展示出诚实而自然的场景，其中的人物以诚实而自然的方式动作言谈，而与此同时却间接地将必要的事实传递给观众。</p>
<p><em><strong>3.对抗的原理  ：</strong></em>主人公及其故事的智慧魅力和情感魅力取决于对抗力量对他们的影响，应与之相当。</p>
<p><em><strong>4.伏笔、分晓：铺设伏笔是指，将知识一层一层铺垫好；分晓是指，将铺设的知识传达给观众以闭合鸿沟。</strong></em></p>
<p><em><strong>5.因果与巧合： 故事要尽早引入巧合，以给予它充分的时间来构建其意义。</strong></em>其次千万不要利用巧合来转折一个结局，巧合不能突然弹入一个故事，转折一个场景，然后又突然弹出。</p>
<p><em><strong>6.闪回：</strong></em>闪回不过是另一种形式的解说。就像其他一切因素一样，这种手法也是用好即好，用坏即坏。</p>
<p><em><strong>7.噱头、反复的噱头：</strong></em>影片讲得是什么内容？”好的噱头回答了这个问题。好的噱头会抓住人们的眼球，让人们想跑到电影院里。噱头必须绽放于观众的脑海，勾引观众去进一步了解。</p>
<p><em><strong>晚餐测试：</strong></em>剧本创作中的晚餐测试是—种<em><strong>用于评估剧本质量和逻辑连贯性的方法</strong></em>。在这个测试中，剧本作者会设想—个虚拟的晚餐场景，然后观察角色之间的对话和互动是否自然、真实,并且是否符合角色设定和剧情发展。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>动画剧本</tag>
      </tags>
  </entry>
  <entry>
    <title>博客介绍</title>
    <url>/2099/11/29/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>欢迎来看我的博客！可以叫我Mor、馍馍。</p>
<p>我的主页：<a href="https://www.morlvoid.pro/">https://www.morlvoid.pro/</a></p>
<p><a href="https://space.bilibili.com/40103446">https://space.bilibili.com/40103446</a></p>
<p>更多自我介绍请点击左侧“关于”。</p>
<img src="/2099/11/29/%E5%8D%9A%E5%AE%A2%E4%BB%8B%E7%BB%8D/png.png" class="" title="[介绍]">]]></content>
  </entry>
  <entry>
    <title>漫画创造技巧——要点汇总</title>
    <url>/2024/04/06/%E6%BC%AB%E7%94%BB%E5%88%9B%E9%80%A0%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E8%A6%81%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<span id="more"></span>

<p>漫画作为“连续的艺术”。</p>
<p>漫画大师：威尔·艾斯纳。</p>
<p>漫画的艺术形成——媒介。</p>
<p>漫画——连续视觉艺术——有意识排列的并置图画及其他图像。</p>
<p>1519年左右<em><strong>科尔维特</strong></em>发现的<em><strong>玛雅</strong></em>绘卷原稿——最初的漫画。与之像似的作品：巴约挂毯。</p>
<p>埃及的漫画阅读顺序Z字形——<em><strong>自下而上</strong></em>。</p>
<p><em><strong>霍加斯</strong></em>的作品先作为一系列油画展出，随后做成版画成套出售——油画和版画的展示都被设计成一幅接一幅并排的——也就是连续的。</p>
<p><em><strong>现代漫画之父——罗多尔夫·托普弗</strong></em>，在十九世纪初的轻讽刺连环画，使用了卡通绘画和分割框，在欧洲是将文字和图画结合起来的第一人。</p>
<p>木板画家——林德·沃德。比利时的弗兰兹·麦绥莱勒。</p>
<p>马克思·恩斯特——《一周行善》。</p>
<p>图标：用来再现某一对象的图形。</p>
<p>对于非象形图标来说他们的意思是固定的绝对的。</p>
<p>普遍观念是照片和现实主义绘画是图标中最近似于它们的实际对照物的。</p>
<p>卡通把注意力放在了特定的细节上，有目的的简化人物和图像在任何媒体形式。</p>
<p>卡通将自己定位在了观念的世界里。卡通风格生来具备这种产生观者身份认同感的特点。</p>
<p>观众是不是有参与感取决于观众对于故事人物身份代入感的程度。</p>
<p>不可见的自我认知也在一定程度上可以代表我们的整个身体。</p>
<p>我们在生活中的一切体验都可以划分为两个领域：观念领域和官能领域。</p>
<p>艺术家想要描绘物质世界的复杂和美就需要用现实主义手法。</p>
<p>其他任务被画的更接近现实以便将他们变得客观起来，从而强调他们与读者的界限。</p>
<p><em><strong>文字是抽象的极致</strong></em>。文字，图画，和其他图标，就是漫画这种语言的词汇。</p>
<p>一种统一的语言需要有一个统一的词汇表。</p>
<p>图画是一种接收式的信息，讯息是即时的。</p>
<p>写作是一种理解式的信息，它需要花时间和特定的知识以解码语言的抽象符号。</p>
<p>当文字变得更为醒目更直接时，它们要求的理解力降低，并能更快被接受，变得接近图画。</p>
<p>我们对现实的感知是一种信念作用，仅仅是建立在残缺的片段之上。这种将观察到的部分理解为整体的现象有一个名称——知觉的封闭性。</p>
<p>某些封闭直觉是叙事者故意制造出来的，制造悬念或挑战观众，而另一些是自发产生的。在辨认和关联他人的时候靠的都是这种封闭自觉能力。对电子媒体来说，自觉封闭是其不间断的强效动力。</p>
<p>直觉封闭是变化、时间和动态间的中介。</p>
<p>水沟指两页之间用于装订的留白空间，漫画用来表示格与格之间留出的间距——格间距。</p>
<p>视觉的图标阐释是漫画的词汇，封闭性知觉就是漫画的语法——漫画就是一种封闭的知觉。</p>
<p>读者有准备的主动地封闭知觉是漫画模拟时间和动态的基本手段。</p>
<p>时间——时间过渡。</p>
<p><em><strong>动作——动作过渡。杰克·科比最常用</strong></em>。</p>
<p>对象——对象过渡。</p>
<p><em><strong>视角——视角过渡。日本漫画家</strong></em><em><strong>手冢治虫</strong></em><em><strong>——</strong></em><em><strong>日本漫画主流</strong></em>。</p>
<p>无关联过渡。没有任何事件和叙事性目的。</p>
<p>传统西方艺术和文学是一种目的导向的文化，但在东方有着丰富的迂回曲折的艺术传统——艺术作品里的留白与实际包含内容同样是作品的一部分——间隔的艺术。在视觉艺术领域，东方观念的冲击强烈而持久。</p>
<p>漫画是一种单一感官的媒介。它值依赖于视觉传达经验中的世界——只能传达视觉信息。</p>
<p>现实主义图像基本的视觉性存在不能简单地进入思想领域。</p>
<p>时间和维度的长度更多是由画格的内容决定的而不是画格本身。画格形状不同并不会影响到时间上的意义，改变的是阅读体验。</p>
<p>出血位——一个画格超出页面边缘。漫画中的时间和空间是紧密相关的，时间和运动也相关。</p>
<p>可以在一格中通过图画来表现一段时间——漫画的运动线。</p>
<p>时间和漫画的互动通常引出两个主题：声音和运动。</p>
<p>声音可以分为两类：文字气球和音效。两种都能增加单元格的时间长度，部分是因为时间本身的天性可以引入行为和反应。</p>
<p><em><strong>运动也分两类：单元格的封闭知觉或单元格内的运动。</strong></em></p>
<p>爱德华·蒙克和文森特·梵高——表现主义。瓦西里·康定斯基。</p>
<p>愤怒红色，和平蓝色，焦虑的质感，喧闹的形状，安静的线条，冰冷的绿色——1912年。</p>
<p>全体美感——联觉。艺术制造可见的形体——保罗·克利。</p>
<p>查理德·瓦格尔和法国诗人波德莱尔。罗里·海斯，地下坐着，表现主义者。</p>
<p><em><strong>符号是语言的基础。</strong></em>视觉隐喻——一种符号。<em><strong>符号最终成为完全抽象化的语音体系。</strong></em>任何形式的艺术或信息存在的时间越久，所积累的符号就越多。</p>
<p>特定的图案可以制造出观众的心理作用。</p>
<p>漫画里最常用最复杂也最万能的联觉图标就是文字气球。文字可以扒看起来中性的图像变得富有感觉和体验。图画可以引起读者的强烈感觉，但缺少文字具有的明确性。</p>
<p>文字虽然有明确的意指，但缺少图画的直接冲击，效果是逐渐积累的。漫画里展现的全部其实都属于不可见的艺术。</p>
<p>最早的文字实际上就是格式化了的图画。文字变得越来越抽象越来越专业越来越复杂。</p>
<p>大多数现代书写体都只是表现声音而失去了与视觉世界的任何相似特性。</p>
<p>图画越来越少的抽象和符号化，越来越多的具象和细节化。</p>
<p>西方美学对再现光线和色彩这些可见事物着迷。</p>
<p>印象主义将西方美术的方向指向了抽象的顶点。印象主义的位置仍处在过去对光线色彩的研究终点处。</p>
<p>表现主义，未来主义，达达，超现实，野兽派，立体派，抽象表现主义，新造型主义，构成主义。</p>
<p>当一系列场景展示出了全部“需要”展示的东西时，脚本的自由度就增加了。</p>
<p>反之当文字固定了表达的意义时，图画就真正摆脱限制了。</p>
<p>文字特质（图画示意但没有补充）、图画特质（给视觉配音）相互依存式、双重特质、平行式、附加式（互相扩展和阐释）、蒙太奇式（文字被处理为图画内的一部分）一切媒介中一切作品的创作都遵循特定的路径。</p>
<p><em><strong>1.概念&#x2F;目的 2.形式 3.风格 4.结构 5.工艺 6.外观。</strong></em></p>
<p>第一步：作品的动力，概念，感情，哲学体系，目的性，即作品的内容。</p>
<p>第二步：采用的形式。</p>
<p>第三步：主题，画风或表现的方式，作品的类型。</p>
<p>第四步：组织到一起，要包括什么去掉什么如何安排协调这件作品。</p>
<p>第五步：构建作品，应用技巧，实践知识，创造，排除问题。</p>
<p>第六步：成品价值。表面。在所有艺术中人们最容易接受的就是它的外表。</p>
<p>漫画和色彩关系之间最大的原因：商业和技术。</p>
<p>红绿蓝——三色光可以被加成为纯粹的白色光，也被称为加成色。</p>
<p>法国钢琴家迪克奥龙提出了减色法三原色。</p>
<p>黄青紫也可以混合出可见光谱中的任何色调，他们使用的是过滤光线。四色印刷。</p>
<p><em><strong>三原色的亮度分为100%，50%和20%。</strong></em></p>
<p>只有理解的力量可以打破艺术家和观众之间的壁垒，无需妥协就可以被广泛倾听。现实主义艺术捕捉可见世界的美与复杂。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>漫画创作</tag>
      </tags>
  </entry>
  <entry>
    <title>视听语言——要点汇总</title>
    <url>/2024/04/06/%E8%A7%86%E5%90%AC%E8%AF%AD%E8%A8%80%E2%80%94%E2%80%94%E8%A6%81%E7%82%B9%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<span id="more"></span>

<p>视听语言既是电影的画面、 声音艺术表现形式的代名词，又是电影艺术表现手法的总称。</p>
<p>电影语言就是蒙太奇。 </p>
<p>人们用“视听语言” 统称电影的艺术表现手段。 </p>
<p>视听语言的基础是电影的两大基本元素： 活动影像和同步声音。它涉及镜头内容、 镜头形式、 分镜头规则和声画关系处理4个方面的内容。</p>
<p><em><strong>视听语言是表现电影内容的基本方式</strong></em><em><strong>，</strong></em><em><strong>与剧作、 表演一起</strong></em><em><strong>，</strong></em><em><strong>共同构成导演创作的三大艺术手段。</strong></em> </p>
<p>视听语言既是电影作为艺术的表现手法，又是电影作为大众传播媒体的符号系统。 <em><strong>作为艺术形式</strong></em><em><strong>，</strong></em><em><strong>视听语言贵在独创性；作为传媒符号系统</strong></em><em><strong>，</strong></em><em><strong>视听语言必须规范化</strong></em><em><strong>。</strong></em></p>
<p>动画艺术是从 “实验动画” 开始的，也称其为艺术性动画片。 </p>
<p>新型的文化产业模式 “商业动画”。</p>
<p>仍然保持自我风格形式技巧以及制作方式的动画艺术家的作品为 “实验动画”，内涵到形式更倾向本体元素的极限发挥，“商业动画” 则更加趋向多元文化的相互渗透。</p>
<p>实验动画片的形式多种多样，最突出的形式特征之一是没有具体背景，以背景留白的写意手法来象征特定空间。 用假定的手法表现一个被夸张和变形的现实，来揭示真实人物的心里特征，或者表现生活中的一个的哲理。表现一些隐藏在生活中的，难以表达的事实，是实验动画片的创作动机。实验动画片的技术特点是随意性强，具有非标准化工艺，还带有很强的偶然性。 </p>
<p>叙事动画片的结构与经典戏剧的叙事结构基本相符，有<em><strong>明确的因果关系、 固定模式的开头、 情节的展开、 起伏、 高潮以及一个完整的结局</strong></em>。 </p>
<p>动画片的传播方式主要有两种：影院动画片、电视动画片。区别是影片播放的时间长度、制作周期、制作成本和制作工艺，一般影院动画片的制作成本要高于电视动画片。</p>
<p>影院动画片的长度一般为90分钟左右。影院动画就是用动画的手段制作电影。</p>
<p>电视动画片是指在电视上播出的动画片。电视动画片分为系列动画片和连续动画片两类。讲述相对独立的故事版本称为剧场版。</p>
<p>1.系列动画片 ：系列动画片通常是由生活中的一些小故事组成的大的系列，每一集的故事情节都是完整独立的，也可2~3集组成一个小单元。 人物性格和人物关系固定，不会转变，故事演绎套路化。 《蜡笔小新》《猫和老鼠》。</p>
<p>2.连续动画片：连续动画片从始至终是由一个完整的故事情节构成的，每一集都相互关联。 它相当于一部影院动画的加长版。 人物性格和人物之间的关系会随着故事情节的发展产生变化，以描写主人公某个阶段的成长经历为主。 </p>
<p>动画片 (Animation) 它以绘画或其他造型艺术形式作为人物造型和环境空间的主要表现手段，不追求故事的逼真效果，而运用夸张、 神似、 变形的手法，借助于幻想、 想象和象征反映人们的生活、 理想和愿望，是一种高度假定性的电影艺术。</p>
<p>二维动画又称传统动画。 它是用水彩颜料画到透明的长方形赛璐珞片上，角色及对象可以画在不同的赛璐珞片上，然后将其重叠在场景的背景中。</p>
<p>偶动画顾名思义就是人偶动画，指由黏土偶、 木偶或混合材料的角色来演绎的动画，这种动画通常是用定格动画方式拍摄出来的。定格动画 ( Stop-motion Animation ) 正如它的名称所示，它是一种古老的电影拍摄技术。</p>
<p>1995—2000年是第一阶段，此阶段是三维动画的起步以及初步发展时期（ 1995年皮克斯的《玩具总动员》 标志着动画进入三维时代 ）。在这一阶段，皮克斯、 迪士尼是三维动画影片市场中的主要玩家。</p>
<p>2001—2003年为第二阶段，三维动画迅猛发展时期。</p>
<p>IMAX 3D动画是加拿大的IMAX 集团所研发的一种巨型银幕电影。一般商业用35mm底片，IMAX 影片为了增加影像的解析度，采用了特殊的65mm底片及其专用摄影机，冲印成长度为70mm胶片，传统70mm胶片的影像尺寸为48.5mm x 22.1mm, 而IMAX 胶片的影像尺寸为69.6mm x 48.5mm, 即15&#x2F;7。格式胶片每格上有15个齿孔。 </p>
<p><em><strong>镜头又称“画面”</strong></em><em><strong>，</strong></em><em><strong>是影片结构的基本单位。</strong></em>一个镜头是指摄影机从开机到关机连续不断地拍摄一次，是电影造型语言的基本视觉元素。 一部影片是由<em><strong>所含信息、 延续时间长短、 景别、 角度、 运动方式</strong></em>等众多镜头按照特定的顺序组接而成的。</p>
<p>镜头按景别可分为远景、 全景、中景、近景、 特写等； 按摄影机与被摄物体的角度可分为鸟瞰、 俯拍、 水平、 仰拍、 倾斜镜头等。 按照运动方式的不同可分为横摇、 上下直摇、 升降、 推轨、伸缩镜头、手提摄影、 空中摇摄等； 过肩镜头、 主观镜头、 客观镜头、 反应镜头、 空镜头等。</p>
<p>制作动画前都会编写分镜头剧本。一个镜头中又包括很多的元素： <em><strong>景别、 镜头的运动方向、 角度、 光影、 色彩、 场景中的陈设道具</strong></em><em><strong>，</strong></em><em><strong>以及演员的表演和服饰</strong></em>。要想拍好一个镜头，首先要充分考虑上述的所有元素。</p>
<p>主观镜头：摄影机的视点直接代表某一部动画片中以人物的视角所拍摄的镜头。 </p>
<p>客观镜头：客观镜头也称“中立镜头” 。</p>
<p>反应镜头 ：反应镜头所表现的内容必须和上一个镜头或者上一组镜头中的内容有严密的逻辑关系和时间的延续性。 </p>
<p>空镜头：空镜头又称 “景物镜头”，即画面中没有人物的镜头，提供银幕视觉信息，与有角色（包括人或动物等） 的镜头可以互补但不能替代，是导演阐明思想内容、 叙述故事情节、 抒发感情意境的重要手段之一，在银幕时空的转换和调节影片节奏等方面也有独特的作用。 </p>
<p>过场镜头：过场镜头指在两场戏之间加入一个或者几个过渡性的镜头，其主要目的是为了交代两场戏在空间或者时间上的变化。 过场镜头通常由内容为景物的空镜头组成。主要目的是为了使相邻的两场戏在时空的变化过程中不会引起观众的疑惑，并旦以此调整影片的节奏。 </p>
<p>长镜头：长镜头能保持电影时间与电影空间的统一性和完整性，能表达人物动作和事件发生的连续性和完整性。长镜头的出现，被认为是 “电影美学的革命”。</p>
<p>巴赞则标新立异，把电影的特性归结为照相性，并从这一特性出发，强调电影的逼真性和纪实性，推动了电影语言的发展。没有长镜头，就不会有现代电影。</p>
<p>固定长镜头、 景深长镜头和运动长镜头。</p>
<p>1.固定长镜头：机位固定不动、 连续拍摄一个场面所形成的镜头称固定为长镜头。 </p>
<p>2.景深长镜头：使处在纵深处不同位置上的景物（从前景到后景） 都能看清，用大景深镜头，可以使火车出现在远处（相当于远景）、 逐渐驶近（相当于全景、 中景、 近景、 特写） 都能看清。 </p>
<p>3.运动长镜头：用摄影机的推、 拉、 摇、 移、 跟等运动拍摄的方法形成多景别、多角度（方位、 高度） 变化的拍摄方法，称为运动长镜头。 </p>
<p>景别是指在电影中被摄物体在画面中呈现的范围，一般分为远景、 全景、 中景、 近景和特写。 在一些分镜头剧本中，也常出现中近景、 大全景、 大远景以及大特写等名称。</p>
<p>景别取决于摄影机与被摄主体之间的距离和所使用的镜头焦距的长短这两个因素。划分方法有两种： 一种以被摄主体在画面中所占比例的大小为准，凡拍摄其局部则为中景和近景；另一种以画框截取人身体部位多少为标准。一般多采用后一种划分法。 </p>
<p>远景常用来展示事件发生的环境和规模，并在抒发情感、 渲染气氛方面发挥作用。 这种镜头经常出现在史诗类电影中，如战争片、 历史片、 太空科幻片等。  远景镜头的长度一般不应少于10秒。</p>
<p>全景是表现人物的全身或场景全貌的电影画面 ，全景往往是拍摄一场戏的总画面，它制约着该场戏中切换镜头时的光线、 影调、 色调、 人物方向和位置，使之衔接，全景可容纳角色的整个身体。全景镜头的长度一般不应少于6秒。 </p>
<p>中景是表现人物膝盖、 腰部以上或场景局部的画面。 可使观众看清人物半身的形体动作和情感交流，有利于交代人与人、 人与物之间的关系，是表演场景中的常用镜头，也可以用来做叙事性镜头。 中景是具有较强功用性的镜头，占有较大的比例。 </p>
<p>近景是表现人物胸部以上或物体局部的电影画面。运用近景时，可以使观众看清演员展示人物心理活动的面部表情和细微动作，使观众仿佛置身于事件中，容易产生共鸣。 </p>
<p>特写镜头是表现人物肩部以上的头像或某些被摄对象细部的电影画面。 可把人或物从周围环境中强调出来。 特写镜头往往能将演员细微的表情和某一瞬间的心灵信息传达给观众，常被用来细腻地刻画人物性格，表现其情绪，有时也用来突出某一物体细部特征，揭示特定含义。 </p>
<p>特写是电影中刻画人物、 描写细节的独特表现手法，也是电影艺术区别于戏剧艺术的重要因素之一。 特写镜头一般较短，在视觉上贴近观众，容易给人以视觉上、心理上的强烈感染力。 特写镜头因具有极其鲜明、 强烈的视觉效果，在一部影片中不宜多用。 影片中还会经常使用特写镜头作为转场画面。</p>
<p>大特写是特写镜头的演变。 </p>
<p>角度由 “摄影机” 的位置所决定，与被摄物体无关。 一般而言，电影中有7种常用的镜头角度，即鸟瞰角度、俯角度、水平角度、 正面角度、 仰角度、 侧面角度及斜侧角度。 由拍摄距离、 拍摄方向和拍摄高度3个因素决定。 </p>
<p>仰角度又称 “仰拍” ，景物的地平线在画面中处于下部画外，有净化背景的作用。 画面中竖向的线条有向上方透视集中的趋势。 仰角镜头常被用于表现崇高、 庄严、 伟大的气势。有时为了达到某种艺术效果，也可利用透视变形打造夸张效果。</p>
<p>俯角度又称 “俯拍”。画面中竖向的线条有下方透视集中的趋势。 俯角度镜头常被用来描述环境特色，有时也用来表现压抑、 低沉的气氛，处理群众场面可产生壮观宏伟的气势。 也可利用透视变形产生夸张的效果。 </p>
<p>鸟瞰角度是一种以在天空中飞翔的鸟类视角为镜头视角的摄像位置。 鸟瞰镜头使观众对视野中的事物产生极具宏观感。 因为利用高高在上的视角进行拍摄充满了主宰性，会引发被摄物产生一种若有若无的悲壮宿命感。 </p>
<p>水平角度 画面中的地平线处于画面中央，易造成画面分割的感觉。 采用一些水平视线角度拍摄的画面，以便用于叙述场景。 </p>
<p>斜侧角度：摄影机处于被摄物体的正面和侧面之间的位置。 可以表现其侧面的部分特征，可产生鲜明的立体感和较好的透视效果。</p>
<p>运动摄影亦称“运动拍摄”，即摄影机在推、 拉、 摇、 移、 跟、升、降、 旋转和晃动等不同形式的运动中进行拍摄。 运动摄影是以逐渐依次扩展或集中为展示形式表现客观事物的。这有助于突破电影的固定画幅比例的界限，能够扩展视野增强画面的动感和空间感，丰富画面的造型，还有助于描绘事件发生、 发展的真实过程，表现事物在时空转换中的因果关系和对比关系，增强逼真性。 既有利于表现人物在动态中的精神面貌，又可为演员表演的连贯性提供有利条件。 运动摄影所产生的时间和空间上的内在联系，在影片中可更好地体现出其寓意、 对比、 强调、 联想、 反衬等多种艺术效果。</p>
<p>推镜头简称 “推” ，使观众有视线前移的感觉。 可在一个镜头中了解到 整体与局部的关系，主体与背景、 环境的关系，并可增强画面的真实感和可信度，给人身临其境之感。 </p>
<p>拉镜头简称 “拉” ，特点是不让观众马上看到景物和环境的整体，而是逐步扩展视野的范围，并可在同一镜头内逐渐了解到局部与整体的关系，可产生悬念、 对比、 联想等艺术效果。 </p>
<p>摇镜头也称“摇摄”、 “摇拍”，简称“摇外0 ，只有机身做上下、 左右、 旋转等运动。 摇摄的方向可与动体的方向相同，也可相反，画面均呈现出动态构图，它逐一展示、 逐渐扩展景物，产生巡视环境，展示规模，揭示动态中人物的精神面貌和内心世界，烘托情绪与气氛等多种艺术效果。 </p>
<p>移动镜头又称“移摄”，简称 “移”，它既可突出运动中的主体，又能交代物体的运动方向、 速度、 体态及其与环境的关系，使物体的运动保持连贯。 </p>
<p>升降镜头简称“升、 降”，如果能巧妙地利用前景，则能加强空间深度的幻觉，产生高度感。 它常用以展示事件的规模、 气势，或表现处于上升或下降运动中人物的主观视角。 与推、 拉、 横移和变焦距镜头结合使用，能产生变化多端的视觉效果。 </p>
<p>甩镜头又称 “闪摇镜头”，即速度极快地摇摄镜头。 有多种闪摇形式： 从一个景物闪摇到另一个景物； 旋转的闪摇； 有起幅而无落幅的闪摇； 从左摇到右，又从右摇到左； 上下闪摇； 斜线闪摇等。 </p>
<p>晃动镜头是指拍摄过程中摄影机机身做上下、 左右、 前后摇摆运动进行的拍摄。 常用于主观镜头，如酒醉、 精神恍惚等，或产生乘船、 乘车摇晃、 颠簸等效果，可创造特定的艺术气氛。 </p>
<p>旋转镜头是指被摄主体或背景呈旋转效果的画面。 </p>
<p>常用的拍摄方法有： </p>
<p>1.沿镜头头光轴或接近镜头光轴仰角旋转拍摄，相机超过360°</p>
<p> 2.摄像机超过360°快速环摇拍摄；</p>
<p>3.被摄主题语摄影机位置转盘上做超过360°快速还移拍摄</p>
<p>4.摄影机围绕被摄物体做360°快速环移拍摄；</p>
<p>5.使用可旋转的光学镜头，在摄影机不动的条件下，将胶片上的影像倒转、倒置或转到360°圆中的任何角度。 转动时可沿顺时针或逆时针两个方向； </p>
<p>6.使用技巧印片机，印制旋转的画面。 </p>
<p>除以上几种方法外，利用可旋转的运载工具拍摄也可以获得旋转效果。 </p>
<p>旋转镜头多用于表现人物在旋转中的主观视线或晕眩感，或以此烘托及渲染气氛。 </p>
<p>升格镜头是指提高摄影机运转频率的一种拍摄方法。 频率可用胶片每秒通过的画幅格数来表示，正常频率为24格&#x2F;秒，高于24格即为升格。 可以根据需要升至32格&#x2F;秒、 40格&#x2F;秒、 48格&#x2F;秒、 64格&#x2F;秒、80格&#x2F;秒、 96格&#x2F;秒、 128格&#x2F;秒等。在影片中它能产生幻觉、 迷离、 柔情、 腾越等艺术效果。 </p>
<p>降格镜头是指降低摄影机运转频率的一种拍摄方法。正常频率为24格&#x2F;秒，低于24格&#x2F;秒即为降格。 可以根据不同要求降到16格&#x2F;秒、 12格&#x2F;秒、 8格&#x2F;秒、 4格&#x2F;秒、2格&#x2F;秒、 1格&#x2F;秒，甚至可以降到几个小时或几个小时拍一格，格数降得越少，放映时（24格&#x2F;秒不变）画面上的物体运动速度越快。</p>
<p>焦距是镜头的中央点到光线聚集的焦点之间的距离。 不同的焦距会产生不同的透视效果。</p>
<p>通常我们以不同的透视效果来区分3种镜头，即短焦距镜头、 中焦距镜头和长焦距镜头。</p>
<p>短焦距镜头又称广角镜头，焦距小于35mm的镜头就是广角镜头。</p>
<p>中焦距镜头又称标准镜头，现在常用的镜头是35~50mm。 标准镜头在一部影片中运用的次数也是最多的。 </p>
<p>长焦距镜头又称长焦镜头，假如角度改变空间，长焦距镜头则以摄影机为轴心，将四周景物扁平化。 现在使用的长焦镜头大约在75-250mm之间，或更长。长焦镜头也会影响主体事物的变化，由于它将距离扁平化，因此物体朝向镜头方向运动时，会显得需要更长时间才能到达。</p>
<p>焦距的长度不仅会影响事物的形状和大小，同时还能决定画面的景深效果。 变焦镜头是指在同一场景中改变场景的透视关系。 变焦能产生有趣而独特的大小与景深变形。</p>
<p>景深镜头，是指在摄影机镜头沿着能够取得清晰图像的成像景深相机轴线所测定物体的距离。在对焦完成后，在焦点前后都能形成清晰的图像，这一前一后的距离便叫做景深。  被摄体所在的这段空间的长度就叫景深。景深就是对好焦距的范围。 </p>
<p>移焦是指镜头可以先对焦在前景物体，而使后面模糊，之后则移焦到后景物体，而使前景模糊。 另外，移焦也可以从后景转到前景。</p>
<p>场面调度一词借自法国剧场，原意是“舞台上的布位”。 舞台上的演员与布景陈设、 走位，均以三维空间观念设计。</p>
<p>电影场面调度基本上包括两个层次，即演员调度和镜头调度。 </p>
<p>演员调度指导演通过演员的运动方向、 所处的位置的更动，以及演员与演员之间发生交流时的动态与静态的变化等。 造成画面的不同造型、 不同景别，揭示人物关系及其情绪的变化，以获得银幕效果。 </p>
<p>演员调度与镜头调度的结合构成了电影的场面调度。 </p>
<p>场面调度的依据主要是剧本提供的内容，作者描述的人物性格与心理活动、 人物之间的矛盾纠葛、 人物与环境的关系等。 </p>
<p>导演根据自己对剧本的理解和对生活的独特发现，产生场面调度的构思，并在影片摄制过程中逐步实现这一构思。除了能产生银幕画面的构成作用，传递富于表现力的造型美之外，它对刻画人物性格、 揭示人物内心活动、 演染环境气氛、 寄寓哲理思想、 创作特殊意境等方面，都可以产生积极的审美作用，增强艺术的感染力量，活跃和推动观众的联想，从而满足观众的审美感受。 </p>
<p>人类学家爱德华 ・霍尔将人类使用距离的关系分为4种即亲密的、 个人的、 社会的、 公众的。</p>
<p>爱德华 • 霍尔从人的皮肤至18英寸远称之为 “亲近距离” ，这种距离有人与人间身体的爱、 安慰和温柔关系。 “亲密距离”比较接近特写和大特写镜头。 </p>
<p>“个人距离” 大概是18英寸到4英尺的距离（约手臂长）。 “个人距离” 约是中近景镜头。 </p>
<p>“社会距离” 约为4英尺到12英尺。 通常是非私人间的公事距离，或是社交场合的距离，“社会距离” 约在中景和全景距离内。 </p>
<p>“公众距离” 则是12英尺至25英尺或更远的距离。 “公众距离” 则在全景和大全景内。</p>
<p>空间的造型处理手法很多： 如设置前、 中、 后景，构成有纵深感的三度空间； 运用透视合成与假透视远离扩展有限空间； 使用烟、 雾、 气等手法造成虚幻空间； 用阶层梯级高低错落形成空间的节奏感； 用曲折迂回、阻隔叠嶂、 借景映衬等布局，使空间环境变幻无穷。</p>
<p>灯光几乎可以决定一个影像的震撼力。 亮光可吸引我们的注意，或泄露一个重要的举动； 而阴影则能掩饰某些细节，制造悬疑。 </p>
<p>艺术家用黑暗来象征恐惧、 邪恶、 未知之事，光明则代表了安全、 美德、 真理和欢愉。 </p>
<p>三点式布光也常用于低反差布光，低反差布光不强调明暗对比，主要着重在全面打亮的设计。</p>
<p>色彩基调从属于影片总的情绪基调, 是总的视觉氛围的主要组成部分，是形成影片情绪基调的主要视觉手段。 影响一部影片色彩基调的客观因素主要有： 环境色调的选择，化妆、 服装和道具色彩的配置，光线的处理，后期电脑调色。  </p>
<p>根据影片的主体、 题材、 风格、 样式，运用各种表现手段和材料工艺，描绘角色的外部形象，以诱发演员的心里、 神态的变化，塑造人物形象。 </p>
<p>场面调度中除了演员调度和镜头调度之外，导演还应注意控制和选择画面的空间造型、 光影、 色彩、 道具、 演员的服装和化妆等重要造型因素。 </p>
<p>化妆造型形象具有认识功能和审美功能。 特点是强调直观的真实性，不甚采取装饰性的手法和假定性的色彩。 </p>
<p>场面调度的方法多种多样，没有固定的模式。 常见的有纵深场面调度、 重复性场面调度、 对比性场面调度、 象征性场面调度等。 </p>
<p>纵深性场面调度是指导演通过演员或摄影机的运动利用一个镜头内景别、 构图、 光影、 场面、 环境气氛、 人物动作等造型因素的变化来加强导演赋予这个镜头的思想含义。 </p>
<p>重复性场面调度一般指重复出现两次或两次以上相同或相似的演员调度和镜头调度。 不仅可以给观众造成情绪的冲击力量，还能使之由情向理的方向转化，使观众进入思考，获得新的认识价值。</p>
<p>对比性场面调度是指把相同或相反的事物加以比较或衬托，可以使对比的双方相互辉映，能够更生动、 更鲜明地显示出各自的性格和特点。 如将动与静、快与慢、 明与暗、 强与弱、 冷色与暖色、 前景与后景、 开放与封闭等强烈的对比因素纳入到场面调度之中，以增强艺术的反差和对比度。 </p>
<p>象征性场面调度，是指导演借助场面调度寄托某种寓意或象征某种事物的内在含义口 把深层次的思想隐藏在浮露的形象之下，将一些不便直说的情理转化为婉转含蓄的形象，让观众去感知、 去思索、 去意会，从而产生耐人寻味的艺术魅力。 </p>
<p>轴线，被摄对象的视线方向、 运动方向和对象之间关系所形成的一条假定的直线。 根据导演的场面调度，在同一场景中拍摄相连镜头时，为了保证被摄对象在画面空间中的正确位置和方向的统一，摄影角度的处理要遵守轴线规则，即在轴线一侧180° 之内设置摄影角度。 这是构成画面空间统一感的基本条件。 </p>
<p>越轴的方法 ：</p>
<p>\1. 利用对象的运动改变轴线，下一个连接的镜头按照已改变的轴线设置角度 </p>
<p>\2. 利用摄影机的运动越过轴线 </p>
<p>\3. 用无明确方向的中性镜头或特写镜头来间隔轴线两边的镜头,以缓和由于越轴给观众造成视觉上的跳跃。</p>
<p>\4. 用对象的细部特写镜头来过渡。 这种方法与第3种方法相似，其区别在于景别不同 </p>
<p>\5. 利用插入镜头改变方向。</p>
<p>\6. 利用双轴线，越过一个轴线，由另一个轴线完成空间的统一 </p>
<p>反拍也称 “反打”，是电影摄影角度的一种。 处于前一个镜头拍摄方向的反面或反侧面的角度。 </p>
<p>以拍摄人物为例： 前一镜头从正面拍摄，后一镜头从反面或反侧面拍摄。 电影的反拍可以使人看不到环境的完整性，赋予真实感。 反拍镜头的运用还有助于表现主体对象的多面和立体形态，为塑造人物和演员表演提供条件。 由于反拍镜头可以拍摄对象的另一面，在一组镜头中可以起到对比、 暗示、 强调和渲染的作用。</p>
<p>总角度又称“总方向”、 “主要角度”，这是为保证景物空间关系的统一和正确表达场面调度所确定的全景拍摄角度。 多用于早期电影中，一般总角度用全景镜头来表现。 </p>
<p>内反拍角度是电影摄影角度的一种。 在轴线的一侧两个方向相背的摄影角度。 常用于主观视点的镜头。</p>
<p>外反拍角度是电影摄影角度的一种。 在轴线的一侧两个方向相对的摄影角度。 在以这种角度构成的画面中，两个人物可以互为前景和后景，具有明显的透视效果。这是一种客观角度。 </p>
<p>影片的声音包括音乐、 音响、 语言3大部分。电影是视听艺术，导演在处理声音与声音的关系的同时，又要充分考虑声音与画面的关系。</p>
<p>用以处理人物、 烘托环境、 揭示画外空间等，并在总体上形成影片的节奏感和风格样式。 在表现手法上，声音处理可以运用淡入淡出、 主观音、 自然声、 非自然声等；在声画关系上，可采用音画对位、 音画分立、 音画对比、 非同步声、无声等。</p>
<p>音响通常用于还原生活真实、 渲染气氛，然而也可通过改变音量、 声调等发挥表情达意的作用，甚至可以作为一个声音主题，具有象征意义。</p>
<p>对白可以塑造人物、 揭示剧情、 延伸视觉空间。 画外音独白也是语言处理的一种方法。 </p>
<p>音量又称声强。 音量是由空气中的振动感觉到声音的存在，而振幅决定了音量的大小。 在影片中更是经常要控制音量。 音量的大小影响距离感，通常声音越大，我们就会认为距离越近。 衡量音量的单位为分贝（ db ）。 </p>
<p>声音振动的频率控制着音调，即声音的“高音” 和“低音”。 在生活与电影中，大部分的声音都是混合声，有不同频率的组合。 </p>
<p>声音各部分的调和赋予声音特定的风味或声调，音乐家们称之为音色。 它是形成声音“感觉” 及“质地” 的依据。 </p>
<p>节奏是表现声音的时间特色，可以分为有节奏和无节奏。 </p>
<p>声音的规律性可以产生一定的宁静感、 安全感，或者会让人觉得很唠叨、 很烦人。 而不规则的声音可以让人警觉、 受惊吓、 困惑或者忍俊不禁。 </p>
<p>节奏、 音量、 音调、 音色可以帮助观众感受整部影片。</p>
<p>空间和时间是由视听结合决定的，场景的连续或分割也是如此。 通常，声音和画面能够同步，但为了叙事需要，声音和画面也可以不同步。</p>
<p>在声画关系中，无声处理是较极端的手法，但如果运用得恰当，就能造成“此时无声胜有声” 的效果，使观众高度集中注意，常用来表达紧张、 恐怖或肃穆的气氛 。</p>
<p>画内声音：画内声音是指画面上我们看得到的声源所发出的声音。 典型画内声音包括与口形同步的语言声、 关门声、 脚步声、 海浪声、 孩子们的戏耍声等等。 </p>
<p>画外声音：画外声音是指画面上观众看不到声源的声音。 画外声音的另一个区别是声音是主动还是被动的。 主动声音引起问题和好奇心，被动声音营造气氛和环境，包装并稳定剪辑点前后的画面，使剪辑点变得流畅。 </p>
<p>主观声音：主观声音是深入到影片中人物内心世界，展示其心理状态的非银幕场景空间内的声音。</p>
<p>客观声音：客观声音是画面空间内和空间外存在的声源所发出的声音。 剧中人的对白、 歌唱等。 这些声音会起到叙事的作用，使画面空间变得真实，使影片获得逼真的艺术效果。 </p>
<p>电影音乐是专为影片找来音乐人创作（原创音乐），或选用已有音乐作品（挪用音乐）为影片编配音乐。 </p>
<p>音乐是对白以外另一个叙事空间，但音乐不像对白，对白多以人物的语气、 语调组成。音乐却拥有多种多样的先天特性，包括透过其旋律、 曲式、 歌词及其历史背景等，可以具象呈现，也可以抽象表达，它们既可如同旁白属于直接的叙事线索，比如作为一种时代氛围的表达；也可以成为隐含的叙事工具。</p>
<p>旋律：旋律是由不同高低、 不同长短、 不同强弱的乐音组成，是塑造音 乐形象、 抒发音乐情感的主要手段。 是体现影片主题、 塑造人物形象、 抒发内心情感的重耍手段。 人物通过类型（乐器）、 目标（ 音调中心 ） 、能力（范围） 和情绪等级（音色）来表现。</p>
<p>和声：和声结构为要表现的音乐提供情绪和空间背景。</p>
<p>不和谐音可以形成张力和戏剧，使观众产生对解决冲突的向往。</p>
<p>节奏：音乐和电影都是时间表现的艺术形式（与绘画和雕塑相对） 。节奏和速度的感知是通过所发生事件的实际频率，时间段内传送的信息多少，在我们内心深处、 理智上、情感上的卷入程度来实现的。 </p>
<p>乐句：一个乐句包括一个由旋律、 和声、 节奏、 意图组成完整的思想，乐句是整个乐曲的组成单位。 同样地，剧本或影片也有； 场景里面表现单一思想的回合，作为组成单位； 情节里面的完整场景，其目的是把单一的思想连接成为物质流； 一系列的场景，其连接组合的目的是使故事朝新的戏剧方向发展。</p>
<p>音乐的作用 ：有情感表现、 连贯性、 叙事提示以及完整性这几种功能。</p>
<p>音乐的抽象性给电影留出了很多空间，引发更多使人利用幻想力创造的思考空间。 曲式、 旋律、 节奏成就了构筑音乐的一个无形思维空间。</p>
<p>1.情感表现：音乐可以催眠，使观众感受到看不见的和听不到的事物、表现人物的精神过程和情感过程。</p>
<p>2.连贯性：当声音或画面有间断的时候，音乐可以填补这个缺口。 </p>
<p>3.叙事提示：音乐可以帮助观众确定背景、 人物以及叙事事件，让观众有一个特定的视角。 </p>
<p>4.叙事完整性：音乐通过运用重复、 变奏、 对位等手段，能够帮助形成影片的形式统一，这也是对叙事的支持。 </p>
<p>音画关系是指音乐与画面在影片中的结合关系。一般分为音画同步和音画对位两种形式，其中音画对位又包括音画并行和音画对立。</p>
<p>音画同步：音画同步是音画关系的一种。音乐强调了画面提供的视觉内容，起着烘托、 渲染画面的作用 。</p>
<p>音画对位：音画对位也是音画关系的一种。 指音乐作品中若干个相对独立的旋律声部结合为和谐整体。这个概念是苏联导演爱森斯坦、 普多夫金和亚历山大洛夫与1928年在《未来的有声影片》 （创言宣言） 一文中首次提出的。 普多夫金在1933年导演的影片《逃兵》 中，第一次有意识地运用了这一原则。 </p>
<p>音画并行是指音乐以自身独特的表现形式从整体上揭示影片的思想内容和人物的情绪状态，在听觉上为观众提供更多的联想和潜台词，从而扩大影片在单位时间的内容容量。 </p>
<p> 音响是除语言和音乐之外电影中所有声音的统称。 音响不只是重复画面上已出现的事物，而旦是作为剧情元素纳入影片的结构中，成为艺术创作的手段之一。 </p>
<p>自然音响。</p>
<p>背景音响。</p>
<p>机械音响。</p>
<p>枪炮音响。</p>
<p>特殊音响 ：音响在影片中能够增加生活气息、 烘托气氛、 扩大视野、 赋予画面以具体的深度和广度。 </p>
<p>语言包括<em><strong>对白和旁白</strong></em>两大类。 性格通常是通过语言模式的类型来表现的。</p>
<p>在电影中所有说出的台词都叫对白，亦称 “台词”。影视语言作为人类思想交流的媒介，它既有表意功能，同时又能创造出艺术美感。对白要与影像相互配合，否则观众会感到困惑及不和谐。</p>
<p>电影语言是口说而非书写的形式，而表演的演员常能利用声音的高低抑扬甚至断句造成不同的效果。</p>
<p>旁白是电影艺术中以“画外音” 形式出现的解说性、 评论性语言。 通常以剧作者“第三人称式” 的客观观点或以某剧中人物“第一人称式” 的主观观点出现。 通常被作为剧作结构的一种辅助手段应用于说明剧情发展的时间、 地点、 时代背景； 对剧情大幅度的时空跨越； 介绍人物； 对剧情的某些内容做必要的解释或发表具有哲理性和柔情性的议论等方面。旁白大多不追求口语化。 相反，它追求书面语言那种较为严密的语法结构和逻辑性，具有一定的文学性。 旁白能够使电影产生主观色彩，旦通常带有宿命意味。 </p>
<p>动画片的发展壮大也促使了拟音领域的发展和创新。角色和物体都跟形成该场戏中情绪上紧张关系的动作相关。 环境的声音包括内景和外景，通过不同的声音使人对所处环境产生的感知，也可以用音乐来烘托影片的环境气氛。 转场声音是电影中用于衔接前后两场戏或两个段落的音乐。这种音乐既可以用整段的乐曲，也可以用短小的乐句。 </p>
<p>剪辑是影片制作过程中一项必不可少的工作，也是影片艺术创作过程中最后的一次再创作。 “剪辑” 在英文中是editing, 和“编辑” 是同一个词。 剪辑” 原意为安装、 组合、 构成，音译成中文就是 “蒙太奇”。 </p>
<p>剪辑工作包括画面剪辑和声音剪辑两个方面，是技术同时也是艺术工作。 </p>
<p><em><strong>蒙太奇思维是电影创作的一种思维方法。</strong></em>编剧和导演进行创作构思时，在想象中形成的连续不断、 结构独特、 合乎逻辑、 节奏准确的画面与声音形象的思维活动。  通过这种思维方法来表达影片的内容与思想、 塑造人物、 描绘场景。蒙太奇句子是一组镜头经有机组合构成逻辑连贯、 富于节奏、 含义相对完整的电影片段。蒙太奇段落是影片中由若干蒙太奇句子或场面有机组合成的可以表现相当完整内容的大单元。 </p>
<p><em><strong>平行蒙太奇：</strong></em>在故事情节发展过程中，通过二三件事同时在异地进展着，互相有呼应又有联系，彼此起着促进刺激的作用，这种表现方式就是平行蒙太奇。 </p>
<p><em><strong>交叉蒙太奇：</strong></em>交叉蒙太奇是利用同一时间和不同空间内容的镜头交叉地组接起来，使两种动作构成紧张的气氛和强烈的节奏感，造成惊险的戏剧效果。 </p>
<p><em><strong>复现蒙太奇：</strong></em>从内容到性质完全一致的镜头画面反复出现。 这种画面总是在剧情发展的关键时刻出现，其用意是加强影片主题思想或不同历史时期的转折，从而唤起观众对影片主题和主人公的深刻印象或认识。</p>
<p><em><strong>对比蒙太奇：</strong></em>对比蒙太奇是通过镜头（ 或场面、 段落 ） 之间在内容上（ 如贫与富、 苦与乐、 生与死、 成功与失败、 高尚与卑下等） 或形式上的（如景别的大小、 角度的俯仰、 光线的明暗、 色彩的冷暖浓淡、 声音的强弱、 动与静等） 的强烈对比产生相互强调，相互冲突的作用，以表达创作者的某种寓意强化所表现的内容、 情绪和思想。 </p>
<p><em><strong>积累蒙太奇</strong></em>：利用从内容到性质上相同的一些类型的画面，而在这一类画面里面表现的主体是不一致的，按照动作和造型特征，取其不同的长度组接起来，构成一种紧张的场面，造成预想的气氛和节奏。 这种剪辑方法就是积累蒙太奇。</p>
<p><em><strong>联想蒙太奇：</strong></em>用内容截然不同的一些镜头画面，连续地组接起来，造成一种意义，使人们去推测这个意义的本质。 </p>
<p><em><strong>象征蒙太奇：</strong></em>按照剧情的发展和情节的需要，利用景物镜头直接说明影片主题和人思想活动。 </p>
<p>错觉蒙太奇：这种构成方法首先是故意使观众猜想到情节的必然发展，但忽然来一个180度大转弯，结果不是人们所预料的镜头，而是恰恰相反,出乎意料。 </p>
<p><em><strong>扩大与集中蒙太奇：</strong></em>由近景或特写逐渐扩大到全景或远景，使观众从细部看到整体，造成一种特定的气氛。 </p>
<p>剪辑可通过相似性或差异性使两个镜头内的图形产生关系，相互影响。 画面的造型因素包括构图、 方位、 景别、 角度、 光影、 色彩、镜头运动、 主体活动，这8个方面构成了画面的造型要素。 </p>
<p>节奏是剪辑对镜头长短等有逻辑性和规律性的安排。 逻辑性主要体现在结构中。 规律性则更多地体现在节奏处理中。 </p>
<p>对镜头有规律有起伏张弛的安排皆可称节律。 这种镜头形成的合理安排，就是剪辑节奏的全部工作。 </p>
<p>镜头组接与时空的关系是指在剪辑创作中，对处理镜头组接时间空间关系的规律性的把握。 </p>
<p>剪辑涉及到镜头之间的时间空间关系时，通常有4种情况，即时空压缩处理、 时空延伸处理、 时空跳跃处理、空间方向处理。</p>
<p>时空压缩处理。在镜头组接中利用人物的动作、 镜头的运动、 视距和视角的变化、 光学技巧、 插入镜头以及音响、 音乐等因素来压缩时间过程或空间距离。 不仅可以取得流畅的镜头转换效果，并能使观众很自然的接受这种假定的时空连贯性。</p>
<p>时空延伸处理：时空延伸处理。 影片中某个关键性的段落，当需要展开来进行细致描写或需要造成特殊的强烈印象时，往往在镜头组接中有意识地延长时间或扩大空间。 不过这样的处理只适用于影片中个别段落，运用不当则会产生动作繁琐、 节奏拖沓等效果。 这种方法常被用在动画片里。 </p>
<p>时空跳跃处理：时空跳跃处理。 在镜头组接或段落转换中，有时需要观众明显地感觉到时间或空间的大幅度跳跃，使各个有意义的戏剧动作片段相互队列，产生创造性的联想效果。 同时，影片中的时空跳跃也是一种艺术上的省略手段。</p>
<p>空间方向处理 ：镜头之间的方向关系，包括画面主体的运动方向、 人物之间的位置关系和视线交流关系等，都要有一定的逻辑性，通常称为画面的方向性。 一般场面的方向关系都应严格按照电影摄影轴线的规律来处理。 为了制造某种特殊的冲击效果，有些影片在特定的情况下也可以跳轴。 </p>
<p>人物动作的连续性 ：</p>
<p>动作分解法：人物形体动作剪辑技法之一。特点是上下镜头的动作长度大致保持相等，即上一个镜头留多少下一个镜头也留多少。一般来说，人物的起坐、握手、拥抱、走路、开关门窗等动作都可以采用分解法。 </p>
<p>动作错觉法 ：动作错觉法是人物形体动作剪辑技法之一。 通过恰当地运用电影特性的某些错觉，加强动作性和节奏感的剪辑方法。 </p>
<p>动作增减法:动作增减法既耍使人物形体动作符合生活的逻辑，更要体现出戏剧动作的艺术真实。 </p>
<p>固定镜头和运动镜头的衔接 :<em><strong>静接静</strong></em> <em><strong>:<em><strong><em><strong>在视觉上没有明显动感的镜头切换方法</strong></em>。因此静接静也同样是</strong></em>保证镜头转换流畅</strong></em>的一种组接方法。静接静还包括在场景段落转换处和各种运动镜头之间在头尾静处的组接，它更多注重镜头的连贯性，不强调运动的连续性。 </p>
<p><em><strong>动接动</strong></em>***:***<em><strong>在两个视觉上都有明显动态的</strong></em>相连镜头的切换方法。 不同主体镜头的切换方法。动接动也包括各种运动镜头的组接。 </p>
<p>静接动:动感不明显的镜头紧接动感十分明显的镜头的衔接方法。 前面镜头的静止画面中往往蕴含着强烈的内在情绪。 </p>
<p>动接静:在镜头动感明显时紧接静感明显的镜头的衔接方法，是镜头组接的特殊方式。</p>
<p>动作转场剪辑 :动作转场剪辑是剪辑技法之一。 借助人物、 动物、 交通工具或战争工具等动作和动势的可衔接性以及动作的相似性作为场景或时空转换的手段。</p>
<p>特写转场剪辑 ：用特写镜头来结束一场戏或从特 写镜头开始一场戏的剪辑手法。 用特写镜头结束一场戏或用特写镜头开展一场戏都是为了强调人物的内心活动或情绪，有时是为了表示某一物件、 道具（如钟表、闪动着的红灯、 十字架等） 所含有的时空概念和象征性含义，以造成完整的段落感。 </p>
<p>语言转场剪辑：利用后一场戏对白首句与前一场戏对白末句的衔接，或重复的有机联系来达到场景转换的自然过渡。 </p>
<p>音乐转场剪辑 ：有时它能使人沉浸在对美好事物的回味中，有时则能给人造成对即将降临的灾难和不幸的预感。 </p>
<p>音响转场剪辑 ：有时还用这种转场的音响效果作为唤起人物和观众回忆与联想的艺术手段。 </p>
<p>景物转场剪辑 ：景物镜头包括两个方面，一种是以景物为主、 物为陪衬的镜头，用这类镜头作转场剪辑，既展示不同的地理环境和景物风貌，也表示时间和季节变化，又是以景抒情的表现手段。 另一种是以物为主，景为陪衬的镜头。</p>
<p>情绪转场剪辑：利用情绪渲染的延续性作转场处理，借助情绪的贯穿性来转换场面，起到承上启下、 一气呵成的作用。 </p>
<p>光学技巧转场剪辑 ：传统的电影手法 ，省略时间和空间过程的作用 ，诸如 “叠印”、 “化出”、 “化入”、 “渐隐”、“渐显”、 等技巧。渐显，渐隐，化出，化入，划出，划入，帘出，帘入，圈出，圈入。</p>
<p>无技巧转场剪辑是： “切出”、 “切入”，又称 “跳切”。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>视听语言</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Failed to connect to github.com port 443 的问题</title>
    <url>/2023/09/04/%E8%A7%A3%E5%86%B3-Failed-to-connect-to-github-com-port-443-%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>fatal: unable to access ‘<a href="https://github.com/username/repository-name/">https://github.com/username/repository-name/</a>‘: Failed to connect to github.com port 443 after 21086 ms: Couldn’t connect to server</p>
<p>无法连接到github.com端口443：无法连接到服务器。</p>
<span id="more"></span>

<p>出现的问题：无法将本地代码提交到 Github 仓库。</p>
<p>经过查找发现许多人在克隆时也会遇到这种情况。</p>
<p><strong>原因可能为：网络连接问题或防火墙限制。</strong></p>
<p>下面为解决方式：</p>
<h3 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git push -u origin main</span><br><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/username/repository-name/&#x27;</span>: Failed to connect to github.com port 443 after 21086 ms: Couldn<span class="string">&#x27;t connect to server</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>



<h4 id="网络连接问题"><a href="#网络连接问题" class="headerlink" title="网络连接问题"></a>网络连接问题</h4><p>测试与GitHub的连接：打开终端或命令提示符，尝试使用以下命令对GitHub服务器进行ping测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ping github.com</span><br></pre></td></tr></table></figure>

<p>如果ping命令失败或显示高延迟，则表示存在网络连接问题。可能需要联系网络管理员或互联网服务提供商寻求帮助。</p>
<h4 id="避免网络连接问题的方式"><a href="#避免网络连接问题的方式" class="headerlink" title="避免网络连接问题的方式"></a>避免网络连接问题的方式</h4><p>1.临时禁用系统上的任何防火墙或防病毒软件，然后尝试再次推送。这些安全措施可能会干扰与GitHub的连接。</p>
<p>2.为GitHub存储库设置SSH身份验证，并使用SSH URL而不是HTTPS URL，可以绕过任何与端口或协议相关的问题。</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>如果以上设置均尝试过，且并非以上网络连接问题，而是由于国内网络无法连接Github时，解决方式就是配置访问GitHub的代理。</p>
<h3 id="防火墙限制解决方式"><a href="#防火墙限制解决方式" class="headerlink" title="防火墙限制解决方式"></a>防火墙限制解决方式</h3><p>电脑本地开启代理，同时为Git设置代理</p>
<p>电脑本地开启代理这里就不多赘述，可以自由选择容易上手使用的VPN。</p>
<h4 id="1-查找电脑代理"><a href="#1-查找电脑代理" class="headerlink" title="1.查找电脑代理"></a>1.查找电脑代理</h4><p>打开电脑的设置，找到“网络和Internet”，找到代理，找到手动设置代理的地址。</p>
<img src="/2023/09/04/%E8%A7%A3%E5%86%B3-Failed-to-connect-to-github-com-port-443-%E7%9A%84%E9%97%AE%E9%A2%98/findproxy.png" class="" title="[打开代理]">



<p><img src="C:\Users\15234\AppData\Roaming\Typora\typora-user-images\image-20230904194342811.png" alt="image-20230904194342811"></p>
<h4 id="2-配置Git代理"><a href="#2-配置Git代理" class="headerlink" title="2.配置Git代理"></a>2.配置Git代理</h4><p>打开 git bash，输入下列命令：</p>
<p>注意要将后面的地址修改为刚刚查找到的自己电脑的端口号</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:1</span><br><span class="line">git config --global https.proxy http://127.0.0.1:1</span><br></pre></td></tr></table></figure>



<p>解释：</p>
<ul>
<li><code>--glboal</code> 选项指的是修改 Git 的全局配置文件<code>~/.gitconfig</code>，而非各个 Git 仓库里的配置文件<code>.git/config</code></li>
<li><code>port</code>为端口号。</li>
</ul>
<p>配置好后查看代理是否配置成功，再次尝试克隆或上传。</p>
<h3 id="3-查看代理"><a href="#3-查看代理" class="headerlink" title="3.查看代理"></a>3.查看代理</h3><h3 id="在git-bash中输入下列命令"><a href="#在git-bash中输入下列命令" class="headerlink" title="在git bash中输入下列命令"></a>在git bash中输入下列命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --get http.proxy</span><br><span class="line">git config --global --get https.proxy</span><br></pre></td></tr></table></figure>



<p>再次尝试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>



<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure>



<h4 id="直接编辑-Git-的配置文件"><a href="#直接编辑-Git-的配置文件" class="headerlink" title="直接编辑 Git 的配置文件"></a>直接编辑 Git 的配置文件</h4><p>可以使用下列命令直接编辑 Git 的配置文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --edit</span><br></pre></td></tr></table></figure>

<p>配置文件：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span>http<span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">proxy = http<span class="punctuation">:</span><span class="comment">//192.168.0.1:1080</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span>https<span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">proxy = http<span class="punctuation">:</span><span class="comment">//192.168.0.1:1080</span></span><br></pre></td></tr></table></figure>





<p>参考文章：<a href="https://www.cnblogs.com/cscshi/p/15705045.html#:~:text=%E5%A6%82%E4%BD%95%E4%B8%BA%20Git%20%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%201%201.%20%E8%BF%9E%E6%8E%A5%E6%83%85%E5%86%B5%E6%80%BB%E8%A7%88%20%E5%A6%82%E6%9E%9C%E5%9C%A8%E5%85%8B%E9%9A%86%E6%88%96%E4%BB%8E%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E6%97%B6%E9%81%87%E5%88%B0%E5%BE%88%E6%85%A2%E7%94%9A%E8%87%B3%E8%B6%85%E6%97%B6%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%8C%E9%82%A3%E4%B9%88%E6%AD%A4%E6%97%B6%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E9%85%8D%E7%BD%AE%20Git,%E9%80%89%E9%A1%B9%E3%80%82%20...%204%204.%20%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%20%E4%B8%80%E6%96%87%E8%AE%A9%E4%BD%A0%E4%BA%86%E8%A7%A3%E5%A6%82%E4%BD%95%E4%B8%BA%20Git%20%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86">如何为Git设置代理</a></p>
<p>下列内容摘自这篇文章：</p>
<p>编辑 <code>~/.ssh/config</code> 文件,给文件加上如下对应内容.windows 的 ~ 路径一般是<code>C:\Users\用户名</code>,可在 git bash 中 输入 <code>cd ~</code>进入 ~目录,再用<code>pwd</code>命令显示当前路径.</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTP代理</span></span><br><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    ProxyCommand <span class="keyword">connect</span> -H <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">7890</span> <span class="variable">%h</span> <span class="variable">%p</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># SOCKS5代理</span></span><br><span class="line">Host github.com</span><br><span class="line">    User git</span><br><span class="line">    ProxyCommand <span class="keyword">connect</span> -S <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">7891</span> <span class="variable">%h</span> <span class="variable">%p</span></span><br></pre></td></tr></table></figure>

<p>解释:</p>
<ul>
<li>Host 后面 接的 github.com 是指定要走代理的仓库域名。</li>
<li>在 ProxyCommand 中，Windows 用户用的是 connect。</li>
<li>-H 选项的意思是 HTTP 代理</li>
<li>-S 选项指的就是 socks5 代理</li>
<li>在调用 ProxyCommand 时，％h 和 ％p 将会被自动替换为目标主机名和 SSH 命令指定的端口（ %h 和 %p 不要修改，保留原样即可）。</li>
</ul>
<p>ssh 其他配置可以看这篇文章：<a href="https://www.cnblogs.com/cscshi/p/16228905.html">如何在一个系统上同时使用 gitee 和 github</a></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://zhuanlan.zhihu.com/p/481574024">设置代理解决github被墙</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/390874935">Git 的代理配置</a></p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔——心理学和哲学的关系</title>
    <url>/2024/09/06/%E9%9A%8F%E7%AC%94%E2%80%94%E2%80%94%E5%BF%83%E7%90%86%E5%AD%A6%E5%92%8C%E5%93%B2%E5%AD%A6%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>【随笔日记】</p>
<span id="more"></span>

<p>是否有一种可能，或许，人类的心理学只是把人类表现出来的行为作为依据，来推测人的心理现象及其发生发展规律。其实人类永远也不知道自己和他人的心理究竟是如何想的，一直以来所做的事情都是根据行为去猜测。其实所有的心理测试，得到的结果都只是对外在行为的总结，而非对心理原因的总结。</p>
<p>为什么会有这样的结论。</p>
<p>先看目前心理学的定义：心理学是一门研究人的心理现象及其发生规律的科学。心理学主要研究人类心理现象及其影响下的精神功能和行为活动，涉及知觉、认知、情绪、思维、人格、行为习惯、人际关系、社会关系等许多领域，主要通过观察人类的行为、表情来描述、解释和预测其心理活动。</p>
<p>也就是说心理学是由实际存在的现实的行为出发，即由物质出发，去猜测和预测意识。</p>
<p>哲学的定义：哲学是关于世界观、方法论的学说。是在具体各门科学知识的基础上形成的，具有概括性、抽象性、反思性、普遍性的特点。哲学的根本问题是思维和存在、精神和物质的关系问题。黑格尔认为：哲学是一种特殊的思维运动，哲学是对绝对的追求。“哲学以绝对为对象，它是一种特殊的思维方式”。</p>
<p>哲学是直接由意识出发，根据个人意识的不同看待不同的事物也有所不同，物质可以根据不同人的不同意识决定有不同的存在意义。</p>
<p>唯物主义的基本观点认为：世界就其本质来说是物质的，是不依赖于人的意识而客观存在的，意识是物质存在在人脑中的反映。</p>
<p>唯心主义认为‌：意识、思维和精神活动在世界中是首要的或至关重要的。‌它主张意识或心灵是创造和塑造现实的主体，物质世界只是意识的附属物。</p>
<p>科学认识发展三阶段论包括：现象论阶段、实体论阶段和本质论阶段。现象论阶段描述观察到的现象和实验结果；实体论阶段探索产生现象的实体结构；本质论阶段揭示实体间的规律。</p>
<p>唯物主义非常符合人类认识世界的方式，即先认识这是什么，再学习自己怎样使用它，再思考为什么一定要使用它。</p>
<p>唯心主义认识世界十分抽象，先思考世界是什么，世界上的物质有什么存在的意义，再思考如何使用这些物质，这些物质在不同的情况下可以作为什么。</p>
<p>这样看来，唯物主义正是人类认识世界的过程，而唯心主义就与正常的认识过程是相悖的。</p>
<p>然后来看一个思维模型：黄金圈法则。</p>
<p>黄金圈法则模型由3个同心圆组成：<br>它把思考和认识问题画成三个圈：<br>最外面的圈层指的是事情的表象，<br>中间的圈层指的是实现目标的途径，<br>最里边的圈层指的是为什么要做这件事。<br>①最外圈，What，做什么；<br>②中间圈，How，怎么做；<br>③最内圈，Why，为什么；</p>
<p>在黄金圈中，人们的思维分为三个层次：what、how、why。</p>
<p>大部分人都习惯于由外向内思考，先表象、后措施、最后是原因，即what→how→why的思考层次。</p>
<p>而有一部分人的思考则由内向外，先从“为什么”开始，然后是“如何做”，最后才是“做什么”，即why＞how＞what的思考层次。许多人以乔布斯为例，向人们推荐这样的思考方式。</p>
<p>what，是什么，像不像唯物主义与科学认识发展阶段中人类首次认识一种物质时的疑问？<br>how，怎么做，像不像唯物主义与科学认识发展阶段中人类了解物质后使用这一物质时的探索？<br>why，为什么，像不像唯物主义与科学认识发展阶段中人类去寻求物质的本质和抽象的规律？</p>
<p>笔者认为：<br>心理学，唯物主义，人类对世界的认知过程，这三者是有很大关联的——以实际存在的表象向内在的探索，也就是以物质为起点向精神与思想探索。</p>
<p>而哲学，唯心主义，黄金圈推荐的思考方式，这三者也有大强的关联——以思想意识为起点向外在的行为或表现探索，也就是以精神与思想为起点向物质探索。</p>
<p>回到问题的最初：为什么说心理学测试揭示的只有行为？</p>
<p>理性‌的定义是：指一个人在处理问题时，能够冷静、客观地分析情况，基于现有的理论和合理的逻辑推导来做出决策。理性的人通常具有自信和勇气，能够冷静地面对现状，全面了解现实情况，分析出多种可行性方案，并判断出最佳方案且有效执行。理性的特征包括冷静的态度、全面的认识、详细的分析和后果的预知。它强调逻辑思维和客观分析，避免情感干扰，是评判一个人或社会精神面貌高低质量的重要指标。‌</p>
<p>感性‌的定义：指一个人在处理问题时，更多地依赖于个人的情感和直觉，而不是逻辑推理。感性的人通常情感丰富，容易多愁善感，对别人的遭遇会感同身受，感受力很强，并能体会到事物的情感变化。他们在待人处事过程中，更遵从自己的内心感受，习惯于从自己的想法出发，而较少考虑客观条件。感性的特征包括情感丰富、重视人际关系和谐、容易感情用事等。‌</p>
<p>针对理性和感性的定义，笔者提出问题：这两者的描述全部都是在描述【人类的外在表现】，那么，其实【理性】和【感性】并不是指思维，而是指外在的表现和行为吧？</p>
<p>既然理性与感性其实是在描述人的外在表现而不是在描述人的思维，那么，性格呢？人格呢？是否也是在描述一个人的外在行为表现？</p>
<p>来看一下如今风靡网络的【性格】【人格】测试题：</p>
<p>荣格八维<br><a href="https://www.jungus.cn/test">https://www.jungus.cn/test</a><br><a href="https://totypes.com/xinggeceshi.php">https://totypes.com/xinggeceshi.php</a></p>
<p>九型人格<br><a href="http://www.enneagram.cc/jxcs.php">http://www.enneagram.cc/jxcs.php</a><br><a href="https://types.yuzeli.com/survey/nine144">https://types.yuzeli.com/survey/nine144</a></p>
<p>大五人格测试<br><a href="https://types.yuzeli.com/survey/bigfive60">https://types.yuzeli.com/survey/bigfive60</a></p>
<p>霍兰德职业测试</p>
<p><a href="https://www.zxgj.cn/g/holland2">https://www.zxgj.cn/g/holland2</a></p>
<p>以及娱乐性质比专业性质更强的十六人格<br><a href="https://www.16personalities.com/">https://www.16personalities.com</a></p>
<p>仔细看过这些测试题目，会发现，大部分题目都是：<br>你会如何做&#x2F;你选择哪个&#x2F;你更倾向哪方&#x2F;你如何应对&#x2F;你有什么样的感受</p>
<p>这些题目大多聚焦于人的外在行为表现，也就是黄金圈中处在what和how的问题，而很少有问题会问到类似于【你认为人类为什么而存在】这类在黄金圈法则中出于why的哲学的问题。</p>
<p>所以其实这些题目得出的结论也只是在根据人的行为总结了人的外在行为规律吧，并不能真的探究人的心理潜意识和真实思维。</p>
<p>截止目前笔者的结论为：<br>目前心理学层面的研究几乎都没有真正深入到心理，它依然停留在人类外在的表面行为，而哲学研究的才属于真正的“心理”。当下所有对人的性格、心理的描述其实都是对人的外在行为表现的描述，而哲学对人的描述才是真的心理上的描述。正如理性与感性形容的是一个人的外在表现，而【如何思考哲学中的问题】才是人的心理，人的内在思想与性格应该用【唯心主义】【唯物主义】【现实主义】【虚无主义】等等哲学词汇来形容。一个有个人独立意识的人类应当是以思考哲学问题为起点，以在社会中实际行动为目的与结果的。</p>
<p>回头看黄金圈法则：what的外圈是现实，是物质世界，why的内在是思想，是精神世界，借此想到NLP思维模型：</p>
<p>NLP思维逻辑层次模型也称理解层次，Neuro-Linguistic Programming，翻译成中文就是神经语言程序学。</p>
<p>思维逻辑层次是NLP中的一个工具。这个工具主要是说：人们在思考某些事情，或者解释一些社会现象的时候，会有不同的思维，然后这些思维分别处于不同的层次。在不同层次上思考问题，最终得到的答案和解决方案是不一样的。<br>该模型认为，我们的大脑在思考和处理任何事情的时候，都分为六个层次，分别是：<br>1、愿景&#x2F;精神（第六层，最高）<br>2、身份（第五层）<br>3、信念&#x2F;价值观（第四层）<br>4、能力（第三层）<br>5、行为（第二层）<br>6、环境（第一层）</p>
<p>在NLP思维逻辑层次模型中，环境、行为、能力称为低三层，这是我们大多数人都可以抵达到的层次，而信念&#x2F;价值观、身份、精神&#x2F;愿景称为高三层。</p>
<p>用简单的词来解释这6个层次：<br>1、 精神：For whom For what (我与世界的关系)<br>2、 身份：Who(我是谁)，身份角色<br>3、 信念&#x2F;价值：Why(为什么)，价值信念<br>4、 能力：HoW(怎样做)，能力技巧<br>5、 行为：What(做什么)，行动安排<br>6、 环境：Where and When(何时、何地)，外部资源</p>
<p>在NLP思维模型中，第一、第二、第三偏向于黄金圈法则中的why的精神，第四偏向于黄金圈法则中的how，第五、第六偏向于黄金圈法则中的what的现实。</p>
<p>借此我们再根据心理动力论中的超我自我与本我画一个天平：</p>
<p>天平的左侧代表精神世界，代表人的思想与意识，代表了黄金圈法则中的why，代表了以思想为起点的哲学思想，代表了NLP模型中的第一、第二、第三层次，代表了心理动力论中的“超我”。</p>
<p>天平的右侧代表物质世界，代表人在现实中的物质与外在，代表了黄金圈法则中的what，代表了以在现实中接触物质与现象为起点的心理学思想，代表了NLP模型中的第五、第六层次，代表了心理动力论中的“本我”。</p>
<p>整个天平构成了“我”——一个人类。为了不让天平保持平衡，我需要寻找我所在的位置——我是一个移动的平衡点，“我”的行为是黄金圈法则中的how，“我”是心理动力论中的“自我”。我的所作所为体现着我的思想平衡，也是在维持我的生命存活。</p>
<p>当左侧的精神世界过于沉重，“我”这个支点为了避免自己的精神崩溃，需要让自己向左侧移动，在精神世界投入时间与精力。然而此时的人如同只有思想没有实际生命的只存在在空虚中的死物，沉浸在精神的内耗中而忘记了其他，只剩下在黑暗中叹息和自我怀疑，忘记了其实外面的阳光十分温暖，其实甜点也能让人满足，其实踏出的第一步其实格外有成就感。</p>
<p>当右侧的来自现实世界的压力过于沉重，“我”这个支点则无力顾及精神，只好让自己向右侧移动，来维持当下的现实生活。然而此时的我是被生活奴役的压迫的没有自己思想的傀儡，忘记了自己真正想做的是什么，只会听从他人的“劝诫”而随波逐流，在“大家都这样”的上学工作结婚生子中忙忙碌碌了一生最后发现自己真正想做的什么也没做。</p>
<p>只有“我”这个天平的支点能够平衡好精神与物质的关系，平衡好内心思想与外在表现的关系，“我”才能呈现一个理性人类的样子。若天平偏向一侧或“我”并不在天平中间，“我”呈现出来的则是“感性”人类的样子。</p>
<p>如何才能平衡好精神与物质的关系呢？<br>或许可以将“由精神向外思考”与“由外在物质向内思考”这看似两者矛盾的思维方式结合起来：<br>既去思考“我和宇宙有什么关系”，同时又去思考“现在的我都拥有什么”；<br>既去思考“我喜欢什么我想做什么”，同时又去思考“我身边的人都在做什么我喜不喜欢他们做的事情”；<br>既去思考“我是什么身份我想成为什么样的人我想活出怎样的人生”，同时又去思考“我身边都是什么样的人他们是不是我想成为的样子他们的人生在我看来有没有意义”。</p>
<p>生活中的事情也可以这样思考：<br>既去思考“我自己喜不喜欢这件事情”，同时又去思考“身边的人喜不喜欢这件事情”；<br>既去思考“这件事情做了会让我更开心还是更不开心”，同时又去思考“我身边的人能不能接受我做这件事情，为什么”；<br>既去思考“这件事情是对我的情绪更有帮助还是对物质更有帮助”，同时又去思考“这件事会不会损害身边的人的情绪或者物质，能不能避免”。</p>
<p>其实“理性”是人的外在表现，只有人能将自己的内在精神与外在物质的天平端平，才能表现出“理性”。而人的真正的内心思想，或许只能从自己内心思考无法言说吧。</p>
<p>题外话：如果将黄金圈比作一个有三层空间的球，那么有的人是实心球、铅球，即思想很满，人很沉重或许又很痛苦，有的人是篮球、足球或者排球，即相对少一些沉重多一些轻快，有的人是气球，在乎最外层的物质并可以随时随风起飞，自己不被自己束缚也不受环境制约。</p>
<p>将所有人比作地面上的各种球，所有球向前开凿滚动便是人类文明进步。若气球太多，稍微有些风吹草动，气球便飞的混乱——就像稍有舆论就动荡浮躁的社会。若实心球太多，地面承受的压力将十分巨大，一旦承受不住将会断裂，只有实心球会重重跌落在地下——实心球几乎不表现求生的本能，这种情况下只有气球才有可能逃离断裂的地面。人类社会需要三种球同时存在，需要三种人同时存在——文明的进步，与人类求生的本能同时需要。</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
  </entry>
  <entry>
    <title>Hello！</title>
    <url>/2020/08/01/Hello%EF%BC%81/</url>
    <content><![CDATA[<p>你好！我是Mor，今天是2020-08-01日，我部署了个人博客。</p>
<p>期待日后发布各种内容。</p>
]]></content>
  </entry>
  <entry>
    <title>dos命令存档</title>
    <url>/2020/08/02/dos%E5%91%BD%E4%BB%A4%E5%AD%98%E6%A1%A3/</url>
    <content><![CDATA[<h4 id="打开命令窗口"><a href="#打开命令窗口" class="headerlink" title="打开命令窗口"></a>打开命令窗口</h4><ol>
<li>开始+系统+命令提示符</li>
<li>Windows+R 输入cmd打开控制台</li>
<li>在任意的文件夹下面，按住shift键+鼠标右键点击，在此处打开命令行窗口 ( Powershell )</li>
<li>资源管理器的地址栏前面加上 cmd 路径</li>
</ol>
<span id="more"></span>

<h5 id="Dos"><a href="#Dos" class="headerlink" title="Dos"></a>Dos</h5><p><a href="https://baike.baidu.com/item/dos/6672671#viewPageContent">( Disk Operating System ), 磁盘操作系统</a></p>
<h4 id="部分Dos命令"><a href="#部分Dos命令" class="headerlink" title="部分Dos命令"></a>部分Dos命令</h4><h6 id="改变当前盘符"><a href="#改变当前盘符" class="headerlink" title="改变当前盘符"></a>改变当前盘符</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">c:</span><br><span class="line">d:</span><br></pre></td></tr></table></figure>

<h5 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h5><h6 id="创建目录-文件夹"><a href="#创建目录-文件夹" class="headerlink" title="创建目录&#x2F;文件夹"></a>创建目录&#x2F;文件夹</h6><p><code>md + 文件夹名</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">md test</span><br></pre></td></tr></table></figure>

<h6 id="移除目录-文件夹"><a href="#移除目录-文件夹" class="headerlink" title="移除目录&#x2F;文件夹"></a>移除目录&#x2F;文件夹</h6><p><code>rd + 文件夹名</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rd test</span><br></pre></td></tr></table></figure>

<h6 id="进入指定目录"><a href="#进入指定目录" class="headerlink" title="进入指定目录"></a>进入指定目录</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd</span><br></pre></td></tr></table></figure>

<h6 id="退回到上一级目录"><a href="#退回到上一级目录" class="headerlink" title="退回到上一级目录"></a>退回到上一级目录</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd..</span><br></pre></td></tr></table></figure>

<h6 id="退回到根目录"><a href="#退回到根目录" class="headerlink" title="退回到根目录"></a>退回到根目录</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd\</span><br></pre></td></tr></table></figure>

<h6 id=""><a href="#" class="headerlink" title=""></a></h6><h5 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h5><h6 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h6><p><code>type nul&gt; + 文件名+文件名后缀</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type nul&gt;test.txt</span><br></pre></td></tr></table></figure>

<h6 id="写入内容到文件"><a href="#写入内容到文件" class="headerlink" title="写入内容到文件"></a>写入内容到文件</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo Hello Word &gt;test.txt</span><br></pre></td></tr></table></figure>

<h6 id="追加内容到文件"><a href="#追加内容到文件" class="headerlink" title="追加内容到文件"></a>追加内容到文件</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo Hello Word &gt;&gt;test.txt</span><br></pre></td></tr></table></figure>

<h6 id="在文件夹里创建文件"><a href="#在文件夹里创建文件" class="headerlink" title="在文件夹里创建文件"></a>在文件夹里创建文件</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">cd&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="在文件夹里移除文件"><a href="#在文件夹里移除文件" class="headerlink" title="在文件夹里移除文件"></a>在文件夹里移除文件</h6><p><code>del + 文件名</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">del test.doc</span><br></pre></td></tr></table></figure>

<h6 id="更改文件名"><a href="#更改文件名" class="headerlink" title="更改文件名"></a>更改文件名</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ren </span><br></pre></td></tr></table></figure>

<h6 id="列出当前目录下的文件和文件夹"><a href="#列出当前目录下的文件和文件夹" class="headerlink" title="列出当前目录下的文件和文件夹"></a>列出当前目录下的文件和文件夹</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dir</span><br></pre></td></tr></table></figure>

<h5 id="退出-dos-命令行"><a href="#退出-dos-命令行" class="headerlink" title="退出 dos 命令行"></a>退出 dos 命令行</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h5 id="清理屏幕"><a href="#清理屏幕" class="headerlink" title="清理屏幕"></a>清理屏幕</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cls</span><br></pre></td></tr></table></figure>

<h5 id="查看电脑ip"><a href="#查看电脑ip" class="headerlink" title="查看电脑ip"></a>查看电脑ip</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure>

<h5 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>

<h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><h6 id="查看jdc安装信息"><a href="#查看jdc安装信息" class="headerlink" title="查看jdc安装信息"></a>查看jdc安装信息</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>



<h6 id="编译java文件"><a href="#编译java文件" class="headerlink" title="编译java文件"></a>编译java文件</h6><p><code>javac + java文件名.java</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac test.java</span><br></pre></td></tr></table></figure>

<h6 id="运行java文件"><a href="#运行java文件" class="headerlink" title="运行java文件"></a>运行java文件</h6><p><code>java + 文件名</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java test</span><br></pre></td></tr></table></figure>

<h6 id="生成Javadoc文档"><a href="#生成Javadoc文档" class="headerlink" title="生成Javadoc文档"></a>生成Javadoc文档</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javadoc -d doc -author -version next1.java</span><br></pre></td></tr></table></figure>

<p>(Java文件内添加javadoc注释)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*<span class="doctag">@author</span> 作者名</span></span><br><span class="line"><span class="comment">*<span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>























]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>dos</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>从零入门的MMD学习笔记</title>
    <url>/2021/11/20/%E4%BB%8E%E9%9B%B6%E5%85%A5%E9%97%A8%E7%9A%84MMD%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>本篇MMD学习笔记为从零入门，前期铺垫了许多内容，如果需要直接实战请移步B站寻找相关教程。</p>
<p><a href="https://www.bilibili.com/read/cv20273?from=articleDetail">https://www.bilibili.com/read/cv20273?from=articleDetail</a>)</p>
<span id="more"></span>

<h3 id="本篇学习笔记参考的教程："><a href="#本篇学习笔记参考的教程：" class="headerlink" title="本篇学习笔记参考的教程："></a>本篇学习笔记参考的教程：</h3><p><a href="https://www.bilibili.com/read/cv2659946?spm_id_from=333.999.0.0">最系统的MMD零基础入门教程宝典</a></p>
<p><a href="https://www.bilibili.com/read/cv1544637?from=articleDetail">MMD兵器库</a></p>
<p><a href="https://www.bilibili.com/read/cv1090815?spm_id_from=333.880.0.0">MMD入门综合指南3.1（2021修改版)</a></p>
<p>[MMD（MikumikuDance）的发展历史](</p>
<h3 id="MMD一般流程"><a href="#MMD一般流程" class="headerlink" title="MMD一般流程"></a>MMD一般流程</h3><p>1.找资源（或制作资源）并载入MMD</p>
<p>2.渲染</p>
<p>3.导出</p>
<p>4.后期加音乐，加特效，字幕</p>
<p>5.导出，压制</p>
<p>6.投稿 </p>
<h3 id="部分下载链接-教程链接："><a href="#部分下载链接-教程链接：" class="headerlink" title="部分下载链接&#x2F;教程链接："></a><strong>部分下载链接&#x2F;教程链接：</strong></h3><p><strong>MMD.zip下载链接</strong>：<a href="https://pan.baidu.com/s/1G-qUnTPzNSbDpT2fzO4gQw?pwd=mqmj">https://pan.baidu.com/s/1G-qUnTPzNSbDpT2fzO4gQw?pwd=mqmj</a><br>提取码：mqmj </p>
<p><strong>MikuMikuDance.7z软件下载</strong>：<a href="https://pan.baidu.com/s/1XYEUEsb2AvtGbBZZ3-z_aQ">https://pan.baidu.com/s/1XYEUEsb2AvtGbBZZ3-z_aQ</a><br>提取码：2021</p>
<p><strong>Paper朱基础教学小菜谱.zip链接</strong>：<a href="https://pan.baidu.com/s/10k6m0LPKaDVBrmi9Q-SDCA">https://pan.baidu.com/s/10k6m0LPKaDVBrmi9Q-SDCA</a><br>提取码：38pn</p>
<p><strong>MMD软件链接</strong>：<a href="https://pan.baidu.com/s/1GxjIKZuPMnNzB37_bB3Ghg?pwd=xasq">https://pan.baidu.com/s/1GxjIKZuPMnNzB37_bB3Ghg?pwd=xasq</a></p>
<p><strong>Paper朱基础教学小菜谱（7.3更新）.zip</strong>链接：<a href="https://pan.baidu.com/s/1-qYk_oAQrCBLzWdyinO2rw">https://pan.baidu.com/s/1-qYk_oAQrCBLzWdyinO2rw</a><br>提取码：5sr4</p>
<p><strong>Paper朱教程11.4更新MME：</strong><br>链接：<a href="https://pan.baidu.com/s/1EzJOyx6e22a2urTE4cioTA">https://pan.baidu.com/s/1EzJOyx6e22a2urTE4cioTA</a><br>提取码：yhm9</p>
<p><strong>穆小泠弹指醉mmd</strong>：<a href="https://pan.baidu.com/s/1-Wh9MMl63bB3M-TRHqRE6w?pwd=0124#list/path=%2F">https://pan.baidu.com/s/1-Wh9MMl63bB3M-TRHqRE6w?pwd=0124#list/path=%2F</a></p>
<p><strong>MikuMikuDance</strong>是日本人樋口优所开发，将VOCALOID2的初音未来等角色制作3D模组的免费软件。</p>


<p><img src="https://i0.hdslb.com/bfs/article/9bd73b97966d3d6ae58ed3d67a0b4ae74df57b1d.png@452w_620h_progressive.webp" alt="img"></p>
<h3 id="软件列表篇"><a href="#软件列表篇" class="headerlink" title="软件列表篇"></a>软件列表篇</h3><p>MikuMikuDance</p>
<p>PmxEditor (PE)</p>
<p>Notepad++ </p>
<p>GoldWave</p>
<p>Bandzip </p>
<p>小丸工具箱</p>
<p>PS  PR  AE </p>
<p>Crazybump </p>
<p>Aectime </p>
<p>VPN</p>
<p>百度云</p>
<p>翻译工具</p>
<p>MMD制作所需的资源主要包括人物模型，场景，动作，姿势，镜头，音乐，MME（特效）另外还有贴图文件等。</p>
<h3 id="MMD相关网站链接"><a href="#MMD相关网站链接" class="headerlink" title="MMD相关网站链接"></a>MMD相关网站链接</h3><h4 id="国内："><a href="#国内：" class="headerlink" title="国内："></a>国内：</h4><ol>
<li><p>B站：<a href="https://www.bilibili.com/">https://www.bilibili.com</a></p>
</li>
<li><p>MMD贴吧：<a href="http://tieba.baidu.com/f?kw=mikumikudance">http://tieba.baidu.com/f?kw=mikumikudance</a></p>
</li>
<li><p>萌舞论坛：<a href="http://www.moe5.net/forum.php">http://www.moe5.net/forum.php</a></p>
</li>
<li><p>模之屋 ：<a href="https://www.aplaybox.com/">https://www.aplaybox.com/</a></p>
</li>
<li><p>尼特部落：<a href="http://geek.prdsarea.com/">http://geek.prdsarea.com</a></p>
</li>
<li><p>MMD咸鱼维基：<a href="https://xywiki.com/MMD">https://xywiki.com/MMD</a></p>
</li>
<li><p>初音社：<a href="https://www.mikuclub.org/">https://www.mikuclub.org</a></p>
</li>
</ol>
<h4 id="国外："><a href="#国外：" class="headerlink" title="国外："></a>国外：</h4><ol>
<li><p>NiceNico：<a href="http://www.nicovideo.jp/">http://www.nicovideo.jp/</a> </p>
<p>使用翻墙，翻译工具。一般在静画区，用日文去搜索</p>
<p>モーション ——动作，モデル—— 模型，ステージ——场景，カメラ——镜头</p>
</li>
<li><p>YouTube：<a href="https://www.youtube.com/">https://www.youtube.com/</a></p>
</li>
<li><p>Deviantart：<a href="http://www.deviantart.com/">http://www.deviantart.com/</a></p>
</li>
<li><p>日本MMD资源集中区：<a href="https://bowlroll.net/file/index">https://bowlroll.net/file/index</a></p>
</li>
<li><p>BowlRoll(B碗) 模型下载：<a href="https://bowlroll.net/file/224701">https://bowlroll.net/file/224701</a></p>
<p>搜素时中，日，英皆可</p>
<p>model——模型，stage——场景，motion——动作，camera——镜头</p>
</li>
<li><p>官方MMD资源集合站：<a href="https://www6.atwiki.jp/vpvpwiki">https://www6.atwiki.jp/vpvpwiki</a></p>
</li>
<li><p>Deviantart（Da站）</p>
</li>
<li><p>LearnMMD：<a href="https://learnmmd.com/downloads/">https://learnmmd.com/downloads/</a></p>
</li>
<li><p>GitHub：<a href="https://github.com/">https://github.com</a> </p>
</li>
<li><p>wiki</p>
</li>
<li><p>3dtextures </p>
</li>
<li><p>cc0textures</p>
</li>
<li><p>iiidea.cn</p>
</li>
</ol>
<h2 id="MMD相关基础知识"><a href="#MMD相关基础知识" class="headerlink" title="MMD相关基础知识"></a>MMD相关基础知识</h2><h3 id="MMD常用名词"><a href="#MMD常用名词" class="headerlink" title="MMD常用名词"></a>MMD常用名词</h3><p> pmm———MMD的工程文件, 记录使用了那些模型,场景,动作,镜头,特效等</p>
<p>pmd&#x2F;pmx—-一般是人物模型文件(有时也会是道具)</p>
<p>x————–一般是场景 ，或者道具模型,还可能是特效文件</p>
<p>fx————-特效文件</p>
<p>vmd———-动作文件，一般是角色动作，或者摄像机、灯光的运动记录。</p>
<p>vqd———–这是姿势文件，载入后，角色就会摆个指定的pose</p>
<p>MME———MikuMikuEffect , 是用来添加各种特效的文件</p>
<p>PE————-Pmd Editor , 用来改模型的软件</p>
<h3 id="常见的软件介绍"><a href="#常见的软件介绍" class="headerlink" title="常见的软件介绍"></a>常见的软件介绍</h3><h4 id="视频处理相关："><a href="#视频处理相关：" class="headerlink" title="视频处理相关："></a>视频处理相关：</h4><p> Adobe Premiere Pro（Pr）———视频剪辑软件</p>
<p>Adobe After Effects（Ae）———-视频特效包装合成软件</p>
<p>Adobe Photoshop（Ps）————众所众知的PS软件，修图</p>
<p>Adobe Media Encoder——-Adobe自家的编码转格式软件。</p>
<p>Sony Vegas Pro—————-剪辑软件</p>
<p>小丸工具箱——————–视频压制处理工具</p>
<p>完美解码+Potplayer———视频解码器和播放器，增加输出编码选项。</p>
<h4 id="三维相关："><a href="#三维相关：" class="headerlink" title="三维相关："></a>三维相关：</h4><p>CINEMA 4D R18————三维软件，偏向包装制作</p>
<p>3ds Max———————三维软件，偏向游戏建筑</p>
<p>Maya————————-三维软件，偏向影视游戏</p>
<p>Metasequoia 4（水杉）—–三维软件，早期比较适合MMD建模</p>
<p>Bitmap2Material————制作材质的一款软件</p>
<p>Marvelous Designer——–衣服制作，以及布料模拟</p>
<h3 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h3><p>目前MMD这个软件有众多渲染方式。常见的有：</p>
<p>Ik渲染(ikpolishshader)，T渲染(T_ToonShader)，Ray渲染，AT渲染(A-Toon)，PS渲染(Power-Shader)，ES渲染(excellentshadow)，N渲染(NCHLShader)，G渲染(G-SToonShader) 作者：Yashoku雫霁 <a href="https://www.bilibili.com/read/cv1090815?spm_id_from=333.880.0.0">https://www.bilibili.com/read/cv1090815?spm_id_from=333.880.0.0</a> 出处：bilibili</p>
<h4 id="模型的制式"><a href="#模型的制式" class="headerlink" title="模型的制式"></a>模型的制式</h4><p>常见的四种YYB式 TDA式 三妈式(mamama) Sour式</p>
<p><a href="http://tieba.baidu.com/p/4750456116">http://tieba.baidu.com/p/4750456116</a> </p>


<p><img src="https://i0.hdslb.com/bfs/article/65795c6e9f524bc5e03d6ed246eaa5d1191ad7bc.jpg@942w_531h_progressive.webp" alt="img"></p>
<h3 id="借物表"><a href="#借物表" class="headerlink" title="借物表"></a><strong>借物表</strong></h3><p>动作：名称+作者  </p>
<p>镜头：名称+作者  </p>
<p>舞台：名称+作者</p>
<p>音乐：名称+歌手</p>
<p>渲染：渲染主件和附件名称+原作者</p>
<p>工具：名称</p>
<h3 id="部分作者"><a href="#部分作者" class="headerlink" title="部分作者"></a><strong>部分作者</strong></h3><p><a href="https://space.bilibili.com/1111474/">糖斯</a> 场景配布作者</p>
<p><a href="https://space.bilibili.com/11831050/">RedialC</a> 教程作者 配布作者 </p>
<p><a href="https://space.bilibili.com/95853308/">小怪兽粉刷月球</a> 动作配布作者</p>
<p><a href="https://space.bilibili.com/8659812/">溯北P</a> 场景配布作者</p>
<p><a href="https://space.bilibili.com/446204/">Sour暄</a> 模型配布作者</p>
<p><a href="https://space.bilibili.com/7767105/">神帝宇</a> 崩3配布作者</p>
<p><a href="https://space.bilibili.com/1301635/">椛暗_Official</a> 模型配布作者</p>
<p><a href="https://space.bilibili.com/325745/">永远赤红的幼月</a> 镜头配布作者</p>
<p><a href="https://space.bilibili.com/503908/">samsink</a> 模型配布作者</p>
<p><a href="https://space.bilibili.com/1688240/">三目YYB</a> 模型配布作者</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>MMD</tag>
      </tags>
  </entry>
  <entry>
    <title>概念艺术设计：存在的天平”与调色盘</title>
    <url>/2024/09/10/%E6%A6%82%E5%BF%B5%E8%89%BA%E6%9C%AF%E8%AE%BE%E8%AE%A1%EF%BC%9A%E5%AD%98%E5%9C%A8%E7%9A%84%E5%A4%A9%E5%B9%B3%E2%80%9D%E4%B8%8E%E8%B0%83%E8%89%B2%E7%9B%98/</url>
    <content><![CDATA[<p>本篇内容是为游戏项目提供的原创概念创意脚本，根据黄金圈模型、弗洛伊德心理学、西方哲学所设计，包含“存在的天平”和“调色盘”两个概念。</p>
<span id="more"></span>

<p>——▋▌▍▎“存在的天平”</p>
<p>“存在的天平”：存在在黄金圈中的、可以完整解释一个有意识的生命在世界中如何存在的天平。</p>
<p>黄金圈形似调色板，分为三层。</p>
<p>【黄金圈法则模型由3个同心圆组成：<br>它把思考和认识问题画成三个圈：<br>最外面的圈层指的是事情的表象，<br>中间的圈层指的是实现目标的途径，<br>最里边的圈层指的是为什么要做这件事。<br>①最外圈，What，做什么；<br>②中间圈，How，怎么做；<br>③最内圈，Why，为什么；</p>
<p>在黄金圈中，人们的思维分为三个层次：what、how、why。<br>代表what的外圈是现实，是物质世界，代表why的内圈是思想，是精神世界。<br>代表how的中心圈是“我”，是“我”的行为。</p>
<p>“存在的天平”是结合黄金圈和心理动力论画出的三重圈中的天平：<br>天平的左侧代表精神世界，代表人的思想与意识，代表了黄金圈法则中的why，代表了以思想为起点的哲学思想，代表了NLP模型中的第一、第二、第三层次，代表了心理动力论中的“超我”。</p>
<p>天平的右侧代表物质世界，代表人在现实中的物质与外在，代表了黄金圈法则中的what，代表了以在现实中接触物质与现象为起点的心理学思想，代表了NLP模型中的第五、第六层次，代表了心理动力论中的“本我”。</p>
<p>整个天平构成了“我”——一个有意识的生命。为了不让天平保持平衡，“我”需要寻找我所在的位置——“我”可以移动自己的平衡点，也可以原地不动。</p>
<p>“我”的行为是黄金圈法则中的how，“我”是心理动力论中的“自我”。“我”的所作所为体现着我的思想平衡，也是在维持“我”的生命存活。</p>
<p>当左侧的精神世界过于沉重，“我”这个支点为了避免自己的精神崩溃，需要让自己向左侧移动，在精神世界投入时间与精力。然而此时的人如同只有思想没有实际生命的只存在在空虚中的死物，沉浸在精神的内耗中而忘记了其他，只剩下在黑暗中叹息和自我怀疑，忘记了其实外面的阳光十分温暖，其实甜点也能让人满足，其实踏出的第一步其实格外有成就感。</p>
<p>当右侧的来自现实世界的压力过于沉重，“我”这个支点则无力顾及精神，只好让自己向右侧移动，来维持当下的现实生活。然而此时的“我”是被生活奴役的压迫的没有自己思想的傀儡，忘记了自己真正想做的是什么，只会听从他人的“劝诫”而随波逐流，在“大家都这样”的上学工作结婚生子中忙忙碌碌了一生最后发现自己真正想做的什么也没做。</p>
<p>只有“我”这个天平的支点能够平衡好精神与物质的关系，平衡好内心思想与外在表现的关系，“我”才能呈现一个正常的人的样子。若天平偏向一侧或“我”并不在天平中间，“我”呈现出来的则是非正常的极端表现。</p>
<p>——▋▌▍▎调色盘</p>
<p>将黄金圈化形成三层调色盘，从内到外分别代表：内在精神、做事风格、外在表现。</p>




]]></content>
      <categories>
        <category>Node</category>
      </categories>
  </entry>
  <entry>
    <title>纪念教程：Mirai Dice！骰娘搭建</title>
    <url>/2022/06/23/%E7%BA%AA%E5%BF%B5%E6%95%99%E7%A8%8B%EF%BC%9AMirai%20Dice%EF%BC%81%E9%AA%B0%E5%A8%98%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>本篇Mirai Dice！骰娘搭建教程，写于2022年，截至2025年，因版本更新过快，该教程已不再支持Mirai Dice！骰娘的搭建与部署，本篇笔记仅保留作纪念。</p>
<span id="more"></span>

<p>观看本篇文章前请先跳转至链接：Dice!文档：<a href="https://v2docs.kokona.tech/zh/latest/">https://v2docs.kokona.tech/zh/latest/</a></p>
<p>请先查看《骰娘是什么》</p>
<p>如果对跑团或骰娘感兴趣，想要搭建骰娘，请阅读完《Dice!文档》后，点击下方链接查看搭建指南。</p>
<p>Dice!导航帖：<a href="https://forum.kokona.tech/d/150-dice-dao-hang-tie">https://forum.kokona.tech/d/150-dice-dao-hang-tie</a></p>
<p>Mirai Dice 下载及搭建指南：<a href="https://forum.kokona.tech/d/448-mirai-dice-xia-zai-ji-da-jian-zhi-nan-zui-hou-geng-xin-20211214">https://forum.kokona.tech/d/448-mirai-dice-xia-zai-ji-da-jian-zhi-nan-zui-hou-geng-xin-20211214</a></p>
<p>Mirai Dice 搭建骰娘遇到的问题及解决方法：<a href="https://www.bilibili.com/read/cv13257089?spm_id_from=333.999.0.0">https://www.bilibili.com/read/cv13257089?spm_id_from=333.999.0.0</a></p>
<p>Mirai 开发文档：<a href="https://docs.mirai.mamoe.net/#%E4%BD%BF%E7%94%A8-mirai">https://docs.mirai.mamoe.net/#%E4%BD%BF%E7%94%A8-mirai</a></p>
<p>【注：本篇教程主要针对在Windows搭建非24h骰娘、在Ubuntu服务器搭建24h骰娘】</p>
<p>【Dice不支持centos】</p>
<p>【本文主要参考以上教程，如想顺利搭建请仔细阅读以上教程，本文根据上诉教程只补充ubuntu部分】</p>
<p>其他或许有用的教程，选择查看：</p>
<p>Mirai环境准备：<a href="https://docs.mirai.mamoe.net/mirai-login-solver-selenium/">https://docs.mirai.mamoe.net/mirai-login-solver-selenium/</a></p>
<p>mirai-login-solver-selenium：<a href="https://github.com/project-mirai/mirai-login-solver-selenium">https://github.com/project-mirai/mirai-login-solver-selenium</a></p>
<p>Mirai qq机器人ubuntu配置踩坑记录：<a href="https://blog.csdn.net/qq_43380015/article/details/108679731">https://blog.csdn.net/qq_43380015/article/details/108679731</a></p>
<h2 id="前置Ubuntu要点："><a href="#前置Ubuntu要点：" class="headerlink" title="前置Ubuntu要点："></a>前置Ubuntu要点：</h2><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> file</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="查看ip地址"><a href="#查看ip地址" class="headerlink" title="查看ip地址"></a>查看ip地址</h4><p>安装 net-tools 工具后使用 <code>ifconfig</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install net-tools</span><br><span class="line"></span><br><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>（服务器中第一个地址是内网ip地址，第二个是本机地址）</p>
<p>（虚拟机中第一个地址是NAT转换ip地址，第二个地址是桥接ip地址，第三个是本机地址）</p>
<h4 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用vim打开文件</span></span><br><span class="line">vim test.txt </span><br><span class="line"></span><br><span class="line"><span class="comment">#输入</span></span><br><span class="line">i</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存并退出</span></span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>



<h2 id="Ubuntu系统环境部署："><a href="#Ubuntu系统环境部署：" class="headerlink" title="Ubuntu系统环境部署："></a>Ubuntu系统环境部署：</h2><p>ubuntu安装lua：<a href="https://blog.csdn.net/yzf279533105/article/details/125448956">https://blog.csdn.net/yzf279533105/article/details/125448956</a></p>
<h4 id="lua下载："><a href="#lua下载：" class="headerlink" title="lua下载："></a>lua下载：</h4><p><a href="http://www.lua.org/ftp/">http://www.lua.org/ftp/</a></p>
<p>下载好.gz包后解压，进入目录</p>
<p>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libncurses-dev</span><br><span class="line">apt-get install libreadline-dev</span><br><span class="line"></span><br><span class="line">make linux <span class="built_in">test</span></span><br></pre></td></tr></table></figure>



<h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#更新源</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装openjdk-11-jre</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install openjdk-11-jre git</span><br></pre></td></tr></table></figure>





<h2 id="正式搭建骰娘"><a href="#正式搭建骰娘" class="headerlink" title="正式搭建骰娘"></a>正式搭建骰娘</h2><h4 id="windows、ubuntu下载Mirai"><a href="#windows、ubuntu下载Mirai" class="headerlink" title="windows、ubuntu下载Mirai"></a>windows、ubuntu下载Mirai</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth=1 https://github.com/w4123/mirai-dice-release-noextra</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> mirai-dice-release-noextra</span><br></pre></td></tr></table></figure>



<h4 id="windows、ubuntu启动Mirai，运行"><a href="#windows、ubuntu启动Mirai，运行" class="headerlink" title="windows、ubuntu启动Mirai，运行"></a>windows、ubuntu启动Mirai，运行</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./LaunchMirai.sh</span><br></pre></td></tr></table></figure>



<h4 id="在windows搭建成功后拷贝文件至Ubuntu服务器"><a href="#在windows搭建成功后拷贝文件至Ubuntu服务器" class="headerlink" title="在windows搭建成功后拷贝文件至Ubuntu服务器"></a>在windows搭建成功后拷贝文件至Ubuntu服务器</h4><h4 id="windows搭建教程"><a href="#windows搭建教程" class="headerlink" title="windows搭建教程"></a>windows搭建教程</h4><p>擅长使用git可在github下载：<a href="https://github.com/w4123/mirai-dice-release-noextra">https://github.com/w4123/mirai-dice-release-noextra</a></p>
<p>git安装教程：<a href="http://morlvoid.pro/2022/06/12/git/">http://morlvoid.pro/2022/06/12/git/</a></p>
<p>打开文件夹，点击“启动Mirai.cmd”</p>
<h4 id="windows配置自动登录账号"><a href="#windows配置自动登录账号" class="headerlink" title="windows配置自动登录账号"></a>windows配置自动登录账号</h4><p>添加自动登录：autologin add QQ账号 密码</p>
<p>根据提示进入WebUI界面，进行认主</p>
<p>认主后已经是Master，在这之后的其他配置请参考本文开头的Master手册</p>
<h4 id="windows下进行滑块验证"><a href="#windows下进行滑块验证" class="headerlink" title="windows下进行滑块验证"></a>windows下进行滑块验证</h4><p>根据提示进行</p>
<p>如果出现报错信息为：Statuslogger Log4j2 could not find a logging implementation.Please ad log4j-core to the classpath. lsing SimpleLoger to log to the console…时</p>
<p>在ubuntu中修改日志文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim data/MiraiNative/config.json</span><br></pre></td></tr></table></figure>

<p>将false 改为 true 后重启Mirai</p>
<h4 id="windows向ubuntu拷贝文件"><a href="#windows向ubuntu拷贝文件" class="headerlink" title="windows向ubuntu拷贝文件"></a>windows向ubuntu拷贝文件</h4><p>通过Xshell 链接服务器后打开Xftp拷贝文件</p>
<p>Xmanager Enterprise 5安装教程：<a href="https://www.xshellcn.com/xmg_column/xshell-hjko.html">https://www.xshellcn.com/xmg_column/xshell-hjko.html</a></p>
<p>将windows配置好的文件复制进服务器的文件中，例如必须拷贝的文件：bots&#x2F;QQ&#x2F;device.json</p>
<h4 id="退出Mirai"><a href="#退出Mirai" class="headerlink" title="退出Mirai"></a>退出Mirai</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/stop</span><br></pre></td></tr></table></figure>

<p>如果想要在ubuntu服务器上始终运行，不需要退出命令</p>
<p>windows中关掉窗口即停止骰娘运行（也可运行命令）</p>
<h4 id="服务器中后台运行骰娘程序"><a href="#服务器中后台运行骰娘程序" class="headerlink" title="服务器中后台运行骰娘程序"></a>服务器中后台运行骰娘程序</h4><p>（以下为可让程序在后台运行的三种方式，如一种不成功请更换其他方式）</p>
<h4 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h4><p>ubuntu下让进程在后台运行：<a href="https://www.shuzhiduo.com/A/MAzAk6MR59/">https://www.shuzhiduo.com/A/MAzAk6MR59/</a></p>
<p>（1）输入命令：nohup 你的shell命令 &amp; </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> ./LaunchMirai.sh &amp;</span><br></pre></td></tr></table></figure>



<p>（2）回车，使终端回到shell命令行</p>
<p>（3）使用第二第三条，完全屏蔽掉信号。用<code>disown -h jobspec</code>来使某个作业忽略HUP信号。用<code>disown -ah</code> 来使所有的作业都忽略HUP信号。用<code>disown -rh</code> 来使正在运行的作业忽略HUP信号。</p>
<p>ubuntu查看进程和结束进程：<a href="https://blog.csdn.net/qq_42257666/article/details/124197052">https://blog.csdn.net/qq_42257666/article/details/124197052</a></p>
<h4 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h4><p>安装screen</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install screen</span><br></pre></td></tr></table></figure>

<p>创建 screen 窗口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -S  name</span><br></pre></td></tr></table></figure>



<p>name可以设置为ssh、ftp，用于标注该 screen 窗口用途</p>
<p>​     注意，执行 <code>screen -S name</code> 之后系统会跳进一个新窗口，这个窗口就是我们创建的新进程，用来执行命令，在新窗口里面进行项目的启动即可</p>
<p>例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd mirai-dice-release-noextra</span><br><span class="line"></span><br><span class="line">./LaunchMirai.sh</span><br></pre></td></tr></table></figure>



<p>退出保存</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br><span class="line">#完全退出</span><br><span class="line">#不会进行session保存</span><br></pre></td></tr></table></figure>


<p>CTRL-a+d </p>
<p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -r</span><br></pre></td></tr></table></figure>

<p>恢复到原来的工作状态</p>
<p>停止screen：</p>
<p>首先查看screen列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -ls</span><br></pre></td></tr></table></figure>



<p>如果只有一个 screen 进程，命令行输入 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">screen -r -d</span><br></pre></td></tr></table></figure>



<p> 即可如果有多个screen，可以通过它的 PID 进入screen</p>
<p> <code>screen -r -d PID</code>进入之后CTRL+C，终止</p>
<h4 id="Tmux"><a href="#Tmux" class="headerlink" title="Tmux"></a>Tmux</h4><p>Tmux 使用教程：<a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">https://www.ruanyifeng.com/blog/2019/10/tmux.html</a></p>
<p>安装Tmux</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure>



<p>启动与退出</p>
<p>安装完成后，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmux</span><br></pre></td></tr></table></figure>



<p>命令进入 Tmux 窗口</p>
<h4 id="查看后台运行程序"><a href="#查看后台运行程序" class="headerlink" title="查看后台运行程序"></a>查看后台运行程序</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -a</span><br></pre></td></tr></table></figure>



<p>显示LaunchMirai.sh表示在后台运行</p>
]]></content>
      <categories>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Mirai</tag>
        <tag>骰娘</tag>
        <tag>Mirai Dice！Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>随笔：小型家政公司打工日记</title>
    <url>/2023/11/19/%E9%9A%8F%E7%AC%94%EF%BC%9A%E5%B0%8F%E5%9E%8B%E5%AE%B6%E6%94%BF%E5%85%AC%E5%8F%B8%E6%89%93%E5%B7%A5%E6%97%A5%E8%AE%B0/</url>
    <content><![CDATA[<p>只是一篇随笔，在小型家政公司打工的打工日记</p>
<p>又名：有关家政服务行业不同运营模式的优劣分析与行业相关公司扩大规模的可行性</p>
<span id="more"></span>

<p>（我也不知道为什么脑子里突然冒出这个想法总之是瞎编的）</p>
<p>前几天在一家小店打工，店很小，楼上楼下两层一个月租金大约三万。店长是一个还没到四十岁但看面相有四十多岁的人。</p>
<p>首先是室外环境。一个多月前第一次进那家店我就想说：如果一家店从早到晚都关着玻璃推拉门，并且玻璃上贴满了纸，会不会给人一种：“这家店是不是关门了？”的错觉？</p>
<p>为什么不能把店里支持的业务做成A字型广告牌，立在店门口，且店门的玻璃推拉门拉开，让人远远地看到打开的门就会知道：这家店正在营业。</p>
<p>十月份我还这么想：起码要把玻璃上所有的广告纸撕下来，然后大门敞开。但到了十一月份就不这么想了，外面太冷了，我庆幸没开着门。</p>
<p>室内环境更不好说，储物架上东西乱七八糟的各种东西堆在一起，桌子上也很不干净，陶瓷杯地非常多的杂质，筷子和笔胡乱丢在玻璃杯中，劣质塑料盒里装着各种不知道放了多久的食物。</p>
<p>唉。烤红薯的烤箱还放在室内，完全不用，就没有见过那个烤箱通电。一般来说，烤红薯这种食物，应该将放满红薯的烤箱放在室外，让烤红薯的香味和红色灯光下的诱人的红薯来吸引路边的人吧？这样原本没想买烤红薯的路人看到了闻到了，说不定就会来买了。哪有“不买就不烤”这样的营业方式？有两次顾客推门进来问：“有烤红薯吗？”店长说：“12元一斤，订了再考。”顾客也就摆摆手算了不买了。</p>
<p>我记得偶尔看到过一些擅长开店的人指导开店新人，会考虑很多，例如：“住户出入这个小区在各个门人口流量怎么样？附近出入的都是什么人？消费层次在什么水平？哪个年龄段的人最多？”诸如此类的《开店前先调研附近的地理人文信息》，还有一些教给开早餐店的新人一些窍门：“你去把早餐包子啊烤肠啊全部往门口放离门口最近，一定要打开门，让香味飘出去！”这样的开店教学指南看多了，所以才觉得这样卖烤红薯很不合理，完全卖不出去吧。</p>
<p>先聊家政方面吧，房产方面和车险方面实在是没怎么接触。（倒是偷看到店长真的在做这个）</p>
<p>以及店长的营业模式。三天的时间倒是见过大约有三四个人走进店里，说：“我想登记一下，有什么保姆或者小时工打扫卫生的活可以找我我去做……（后面是一些个人年龄或居住地或者其他要求）”店长将这些信息记下来，顺便加一下微信，就说：“好，行，有活了联系。”</p>
<p>问题来了。没有任何考核吗？</p>
<p>如果对方是给别人的屋子打扫卫生，店长不会亲自导到场去验收一下吗？不会实地考察一下自己招揽的“员工”的工作情况吗？</p>
<p>如果对方是保姆，店长也不会去亲自尝试一下对方做的饭菜如何、洗衣或者相关照顾他人的能力如何？</p>
<p>除了招揽“员工”，还有一些雇主上门找服务的人。比如：“我家二室一厅，需要打扫加擦玻璃，找小时工打扫怎么收费？”</p>
<p>店长对此直接回话给雇主：“那就四个小时左右吧。也可以找两个人每人干两个小时。40块钱一个小时。”</p>
<p>我迟疑地打开电脑，在地图上搜索了雇主地址里的小区，查看了符合描述的五种室内平面图。很明显这五种户型玻璃都很多，两个阳台一个卧室一个厨房一个卫生间都有玻璃，且阳台的玻璃面积相当大。</p>
<p>我感觉不妙，4个小时大概率是擦不完玻璃的，将近90平米的房子打扫起来难度也很大。且店长也没有找雇主要房间内的拍照或者视频，可以说是除了地址和联系电话还有价格以外，什么都没说，什么都不知道。</p>
<p>额……所以……中介帮助“员工”接活完全不看现场环境吗？中介直接帮“员工”订了四个小时的时间，四个小时做不完的话，雇主不给钱或对中介差评怎么办？打扫卫生这种事情……不看实际环境就接下来真的合适吗？</p>
<p>除此之外还有保姆的工作。店长也完全不会去实地看一下需要照顾的人的情况，不去看看雇主家里的情况，没有问任何事情，就只知道：“这家要找保姆，要一日三餐。”</p>
<p>……还遇到过一个相当奇特的。儿子给父母找做饭的保姆，要求一日两餐，但中午的时候把晚上的饭一起做出来，放进冰箱，晚上让父母拿来热一热吃……很多菜其实不能放进冰箱再“热一热”吃……年龄在45岁多的阿姨本身也不懂这些吧？</p>
<p>……总之，店长的不专业程度让我震惊，应聘的“员工”不考核技术，下单的雇主不去考核工作环境，导致总有“员工”做不完工作而雇主不满意，打很多次电话互相吵来吵去最终总有人不满总有人赔钱总有人受累受气多做了工作还拿不到相应的报酬。</p>
<p>……打扫卫生一小时40元，中介还要每小时拿走10元的中介费……甚至还有中介也不知道吸尘器需要用直流电而雇主家里没有电导致的乌龙。</p>
<p>最让我生气的一点是，店长通过微信来联系所有的雇主和“员工”，以及众多同城群。好吧，也没什么，毕竟微信也可以通过一些标签或者备注的方式来记人。但是一个电脑同时登陆三个微信号同时发消息回消息纯靠脑子记也太过分了吧？</p>
<p>我试着加班做了一个表格，大概是这么分类的：</p>
<p>某月某日</p>
<p>接单使用的店长的微信号：<br>雇主微信号：<br>雇主手机号：<br>雇主的要求：<br>类型（小时工或长期保姆）：<br>工作时间：<br>工作状态（是否完工是否结账）：<br>员工微信号：<br>员工所在的店长的微信号：<br>员工手机号：<br>工作地址：<br>许诺薪资：<br>特殊需求：</p>
<p>我努力列了这样一个表格，在三个工作用微信号里翻消息记录，翻呀翻，翻呀翻。一个小时我终于找清楚了四对谈成的单子，并且记录在这个表格里。一边翻一边崩溃就是了。当然这第一天也没整理完，直接放弃了。第二天直接不去做这件事了。</p>
<p>……以我写代码的经验来看这东西写一个不联网的在电脑本机上运行的管理系统兼职完美解决所有问题！我还可以用数据库去存“员工”的简历！就算不用什么程序去做，表格啊，office的表格也可以去做这个啊！只要一边接单一边把相关的信息记录下来，剩下的大把时间不是想做什么就做什么，还需要人脑去记忆订单的情况吗？</p>
<p>要知道手机里的微信简直就是流氓软件，微信就是手机杀手。要不是微信可以付款和存款我是完全不想下载微信的，消息记录也是每隔几个月彻底删除一次。如果一个微信号加了几千上万个好友，并且依靠消息记录来确认工作进度和单子状态……再好的手机也支撑不了几个月吧？人力记忆是最低效率的，更何况还用上了这么个吃手机内存的微信……</p>
<p>总之这是实在让我受不了的一点：还在使用人力去记住“员工”和雇主的一切信息。或者但凡……用个免费的微信公众号……都比完全人力回微信要好……唉，最好还是用小程序吧，花钱请人设计一个小程序多好啊……那不就是躺着赚钱了……有这个时间完全可以去做别的……</p>
<p>电脑程序和机器人存在的意义就是解放人类的时间和双手，让人类一边坐享其利的同时有余力做其他的事情……</p>
<p>总之，在我打工的三天里，我深刻认识到了：这是一个耗时间费心思且不讨好的工作。大概除了那些要求中介费为一个月房租的专业房产中介，家政类型的中介都是这样十分吃力不讨好的类型。（当然依靠小程序完成订单躺赚中介费只是偶尔当个客服的不是）</p>
<p>很多人都说，家政是最容易创业的，但是，以这个小店现在的处境来看，以这家店长现在的经营模式来看，这不像是在经营一家家政公司，或者家政企业，而是在个人自主地找兼职，没有高效率没有专业性，也就没有进一步扩大规模的可能，没有扩大声望招揽更多客户的可能。</p>
<p>所以我打工了三天就辞职了。我不想将庞大的雇主信息和“员工”信息记在我的脑子里，这是没必要且无用的，我不想接这个烂摊子。同样，这家店的店长没有那么多的见识，意识不到使用机器处理和储存信息比起用人脑记忆更好，我曾经尝试暗示店长，告诉他人力无法记住这些数据，也有科学证明，人类最多只能有五个最亲密的朋友，只能记住100个人的名字，但是事实证明我无法开导店长，我知道怎么做可以让店长接到的订单更多口碑更好，但我好像无法将这些传授给店长。</p>
<p>之前也见过一些专业的家政企业，也查阅过一些资料，看过一些成功人士的经验分享，一些做大做强的家政企业，他们的员工往往经过统一培训，公司组织团队穿戴统一工作服前往雇主家里打扫卫生，那是得益于他们的经济基础不错，能够出得起培训费，相应的也挣得起。</p>
<p>当然，也有店长经济实力限制目光的原因。店长感叹油价太贵，开了2天的汽车，50元的油竟然快要见底了，于是找到了渠道购买私油。唉，私油客户群中的415人还有店长的43个共同好友呢，原来这样的黑产业链这么庞大。我也无意揭穿什么，生活贫困的人，每天拿着十块钱二十块钱算计，产生这样的黑产业链也不是不能理解。要怪就怪国家的经济水平底下，还让这么多人处在贫困里了。</p>
<p>2023年11月19日记</p>
]]></content>
      <tags>
        <tag>打工日记</tag>
        <tag>家政行业</tag>
      </tags>
  </entry>
</search>
